<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c语言复习</title>
    <link href="/2023/09/30/Introductory%20C%20Programming%20Specialization/"/>
    <url>/2023/09/30/Introductory%20C%20Programming%20Specialization/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.coursera.org/specializations/c-programming">https://www.coursera.org/specializations/c-programming</a></p><h1 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h1><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300149814.png" alt="image-20230930014923639"></p><p>实际上在栈上创建结构体有两种写法</p><ul><li><del>struct mystruct struct_name;</del></li><li>mystruct struct;</li></ul><p>结构体的定义则有四种风格</p><ul><li><p>very simple</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// do not forget ;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mystruct</span>&#123;</span><br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> width;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><del>seems to normal</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mystruct</span>&#123;</span><br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> width;<br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mystruct</span> <span class="hljs-title">mystruct_</span>;</span><br><span class="hljs-comment">//usage</span><br>mystruct_ lily;<br>lily.legth = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p><del>very confused</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mystruct</span>&#123;</span><br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> width;<br>&#125;mystruct_;<br><span class="hljs-comment">//usage</span><br>mystruct_ lily;<br></code></pre></td></tr></table></figure></li><li><p>yeah</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> width;<br>&#125;mystruct_;<br><span class="hljs-comment">//usage</span><br>mystruct_ lily;<br></code></pre></td></tr></table></figure></li></ul><h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><ul><li>定义<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span><br>    A,<br>    B,<br>    C<br>&#125;myenum;<br></code></pre></td></tr></table></figure></li></ul><p>枚举类型是可以比较大小的，按照定义顺序从0至1，因此也可以通过数字来访问</p><ul><li>实例<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">myEnum_</span>&#123;</span><br>    A,<br>    B,<br>    C<br>&#125;myEnum;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    myEnum myEnum1 = (myEnum)<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">switch</span> (myEnum1) &#123;<br>        <span class="hljs-keyword">case</span> A:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> B:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h1><p>You must very carefully when you are using Macros</p><ul><li>优先级问题</li></ul><p>假如你定义了一个如下的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> mul(x,y) x*y;</span><br></code></pre></td></tr></table></figure><p>第一眼看上去似乎没有什么问题，但假如参数为（2+3，3+2），则结果为 2+3*3+2；宏只会做最简单的<strong>文本替换，</strong>不规范的使用可能会带来很多问题；</p><p>上边的问题可以这样解决，这称之为宏的优先级问题；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> mul(x,y) (x)*(y);</span><br></code></pre></td></tr></table></figure><h1 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h1><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300150740.png" alt="image-20230930015037511"></p><p>GCC编译文件分为四个步骤</p><ul><li>预处理</li></ul><p>这部分主要会进行宏替换，宏替换仅仅只是文本替换；此外还会执行头文件包含操作；此外会移除掉注释；这一步会生成一个filename.i的中间文件；<br>假设主文件为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 输出</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们包含了stdio.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _STDIO_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _STDIO_H_</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* _STDIO_H_ */</span></span><br></code></pre></td></tr></table></figure><p>那么第一步预处理后的文件为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"># <span class="hljs-number">1</span> <span class="hljs-string">&quot;main.c&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;main.c&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;stdio.h&quot;</span> <span class="hljs-number">1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _STDIO_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _STDIO_H_</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* _STDIO_H_ */</span></span><br><br># <span class="hljs-number">2</span> <span class="hljs-string">&quot;main.c&quot;</span> <span class="hljs-number">2</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编译阶段</li></ul><p>此阶段会把预处理的文件根据对应的平台编译为汇编代码，生成.s中间文件</p><ul><li>汇编阶段</li></ul><p>此阶段会将编译阶段生成的汇编代码翻译为机器码指令，一般为.o或者.obj的二进制文件</p><ul><li>连接阶段</li></ul><p>通常来说，一个c语言项目会包含很多源代码，也就对应了许多了.o或者是.obj文件。连接阶段把编译后的目标文件链接在一起形成可执行文件；这个阶段主要解决代码中的符号引用问题（将相应的函数和变量定义联系起来），最终的可执行文件往往没有拓展名。</p><p>所以编译实际上是一个合并的过程，需要注意的是，现代编译器对编译做了大量的优化，在一个大型的c语言项目中，修改某些源文件，并不会导致所有文件全部重新处理一遍。</p><h1 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h1><p>实际的c项目会包含很多的源文件，如果在每次修改源文件后，将整个工程重修编译一遍会消耗很多的时间；幸运的是如果我们保留了之前的.o文件，我们可以通过使用gcc -c指定需要被重新编译的文件，然后重新运行连接器；但这意味着手动去完成每一个需要被重新编译的文件；Make允许我们通过一个很简单的方式来重新编译对象；</p><p>以下是一个简单的例子，源文件仅有main.c，helper.h，helper.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;helper.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//printf(&quot;asdadasd    &quot;);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-number">1</span>);<br>slove(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> HELPER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HELPER_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">slove</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;helper.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">slove</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">main: main.o helper.o<br>        gcc -o main main.o helper.o<br>main.o: main.c helper.h<br>        gcc -<span class="hljs-built_in">std</span>=gnu99 -pedantic -Wall -c main.c<br>helper.o: helper.c helper.h<br>        gcc -<span class="hljs-built_in">std</span>=gnu99 -pedantic -Wall -c helper.c<br></code></pre></td></tr></table></figure><p>这个 <code>Makefile</code> 描述了如何从源文件构建一个名为 <code>main</code> 的可执行程序。其中有几个目标、依赖项和命令。以下是详细描述：</p><ol><li><strong>目标和依赖项</strong>:</li></ol><ul><li><code>main</code>: 这是主目标，意味着当你只输入 <code>make</code> 而不指定目标时，<code>make</code> 将尝试构建这个目标。这个目标取决于 <code>main.o</code> 和 <code>helper.o</code>，这意味着在构建 <code>main</code> 之前，它需要 <code>main.o</code> 和 <code>helper.o</code> 这两个对象文件。 </li><li><code>main.o</code>: 这是一个中间目标，它表示从 <code>main.c</code> 源文件编译出的对象文件。它的依赖项是 <code>main.c</code> 和 <code>helper.h</code>，所以当这两个文件中的任何一个更改时，<code>main.o</code> 将被重新编译。 </li><li><code>helper.o</code>: 类似地，这也是一个中间目标，表示从 <code>helper.c</code> 源文件编译出的对象文件。它依赖于 <code>helper.c</code> 和 <code>helper.h</code> 文件。</li></ul><ol start="2"><li><strong>命令</strong>:</li></ol><ul><li><code>gcc -o main main.o helper.o</code>: 这是链接命令，它链接 <code>main.o</code> 和 <code>helper.o</code> 对象文件来创建 <code>main</code> 可执行程序。 </li><li><code>gcc -std=gnu99 -pedantic -Wall -c main.c</code>: 这是编译命令，用于编译 <code>main.c</code> 并生成 <code>main.o</code> 对象文件。其中： <ul><li><code>-std=gnu99</code>: 使用C99标准以GNU的扩展进行编译。</li><li><code>-pedantic</code>: 强制遵循C标准，并对不遵循标准的代码发出警告。</li><li><code>-Wall</code>: 启用大多数编译器警告。</li><li><code>-c</code>: 仅编译，不链接。</li></ul></li><li><code>gcc -std=gnu99 -pedantic -Wall -c helper.c</code>: 类似地，这是编译命令，用于编译 <code>helper.c</code> 并生成 <code>helper.o</code> 对象文件。它使用了与上面相同的编译标志。</li></ul><ol start="3"><li><strong>关系</strong>:</li></ol><ul><li>在你运行 <code>make</code> 命令时，<code>make</code> 首先查看 <code>main</code> 目标及其依赖项。它会检查 <code>main.o</code> 和 <code>helper.o</code> 的最后修改时间与它们各自的依赖项进行比较。如果依赖项的修改时间比目标文件更新，或者目标文件不存在，<code>make</code> 就会执行相应的命令。 </li><li>举个例子，如果你修改了 <code>main.c</code>，当你下一次运行 <code>make</code> 时，<code>main.o</code> 和 <code>main</code> 将被重新构建，但 <code>helper.o</code> 不会，因为 <code>helper.c</code> 没有更改。</li></ul><p>这样，<code>Makefile</code> 为你提供了一种高效的方式，只重新编译和链接那些自上次构建以来已更改的源文件，从而加速整个构建过程。</p><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><h2 id="Black-Box-Testing"><a href="#Black-Box-Testing" class="headerlink" title="Black Box Testing"></a>Black Box Testing</h2><ul><li>考虑边界条件</li><li>永远不要期望输入会如同你的预期</li><li>测试子集要覆盖尽可能多的情况</li></ul><h2 id="White-Box-Testing"><a href="#White-Box-Testing" class="headerlink" title="White Box Testing"></a>White Box Testing</h2><ul><li>覆盖所有路径的测试</li><li>走到终点的测试</li></ul><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><ul><li>复杂的分支打断言测试</li><li>#include &lt;assert.h&gt;</li></ul><h2 id="Valgrind"><a href="#Valgrind" class="headerlink" title="Valgrind"></a>Valgrind</h2><ul><li>MAC不支持，用Linux打</li></ul><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><ul><li>一个强大的开源调试软件（c\c++)</li><li>多平台支持</li><li>只调试可执行文件</li></ul><p><strong>USAGE</strong></p><ul><li>使用之前首先在Makefile中的gcc命令中添加-g将gdb嵌入到程序</li><li>然后通过gdb.&#x2F;main</li><li>打断点  break main.c:5 </li><li>开始调试   run</li><li>显示当前位置附近的源码  list</li><li>执行一步但是不进入函数调用 next</li><li>执行一步并且进入函数调用 step</li><li>打印变量的值  print variable_name</li><li>到下一个断点 continue</li><li>查看局部变量的值 info local</li><li>显示堆栈区 bt</li><li>在循环条件中打断点 break file.c:loop_start_number   condition 1 i &#x3D;&#x3D; 1000 or (gdb) break your_file.c:line_number if i &#x3D;&#x3D; 1000</li></ul><h1 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h1><p><strong>左值和右值 核心区别在于 是否有持久的地址</strong></p><ul><li><strong>左值实际上标识了一块地址，因此左值可以出现在赋值操作符的左边或者右边</strong></li><li><strong>右值则是临时的，无法标识内存位置的表达式，它往往是中间计算结果；</strong></li></ul><p>一些右值的例子：</p><ol><li><p><strong>字面常量</strong>：整数、浮点数、字符等字面常量通常是右值。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">42</span>;     <span class="hljs-comment">// 42 是右值</span><br><span class="hljs-type">double</span> pi = <span class="hljs-number">3.14</span>; <span class="hljs-comment">// 3.14 是右值</span><br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;A&#x27;</span>;   <span class="hljs-comment">// &#x27;A&#x27; 是右值</span><br></code></pre></td></tr></table></figure></li><li><p><strong>临时对象</strong>：在表达式中创建的临时对象通常是右值。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string result = std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;Hello&quot;</span>) + <span class="hljs-string">&quot; World&quot;</span>; <span class="hljs-comment">// 字符串拼接的结果是右值</span><br></code></pre></td></tr></table></figure></li><li><p><strong>函数返回值</strong>：函数返回的临时值是右值。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x * x; <span class="hljs-comment">// 返回值是右值</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>表达式的结果</strong>：在表达式中计算的中间结果通常是右值。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> sum = <span class="hljs-number">5</span> + <span class="hljs-number">3</span>; <span class="hljs-comment">// 5 + 3 的结果是右值</span><br></code></pre></td></tr></table></figure></li><li><p><strong>移动构造函数的参数</strong>：在使用移动语义时，传递给移动构造函数的对象通常是右值。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; source = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; dest = std::<span class="hljs-built_in">move</span>(source); <span class="hljs-comment">// std::move(source) 返回右值</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Lambda 表达式</strong>：Lambda 表达式可以是右值。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> lambda = [](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>; &#125;; <span class="hljs-comment">// lambda 表达式是右值</span><br></code></pre></td></tr></table></figure></li><li><p><strong>类型转换表达式</strong>：类型转换表达式通常生成右值。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> x = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">double</span>&gt;(<span class="hljs-number">5</span>); <span class="hljs-comment">// static_cast 的结果是右值</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="指针的内存布局"><a href="#指针的内存布局" class="headerlink" title="指针的内存布局"></a>指针的内存布局</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300151247.png" alt="image.png"></p><ul><li>可以看到int类型占据了4字节，也就是32个比特位</li><li>我们注意到x的高位为零，从低位开始使用</li></ul><p>首先，我们规定内存是从低到高排列的</p><p><strong>大端字节序</strong><br>**低位字节位（右）存储于较高的内存地址       **<br><strong>小端字节序（存储时从低地址向高地址存储）</strong><br>**低位字节位（右）存储于较低的内存地址     **</p><p>绕的丫批，所以小端字节序常用，因为低字节位（右边的字节位）从较低的内存地址开始存储。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300151827.png" alt="image.png"></p><ul><li>栈在高地址，堆在低地址</li></ul><p>c语言内存布局</p><ul><li>代码区</li><li>静态区</li><li>堆区</li><li>栈区</li><li>每个进程都以为自己独占一块空间，其实并不是，这只是逻辑地址</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300151029.png" alt="image.png"></p><ul><li>栈只存数据，代码区只存代码</li><li>栈的起始地址是高于堆的启始地址的</li><li>栈向下增长，高位代表了最后放入的数据；而这在代码中，反应为第一行定义的变量</li><li>代码区向上增长，用户编写的代码从低地址开始向高地址执行</li><li>只要是执行顺序，一定是从低到高，所以被调用函数的返回地址会高于被调用函数存储变量的地址</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300151502.png" alt="image.png"></p><ul><li>虽然swap函数在书写过程中在主函数之前，但swap函数中的变量实际会存储在低地址，而不是高于主函数在栈中存储的变量</li><li>定义多个局部变量，存储规则依旧不变</li><li>NULL指向逻辑无效地址</li></ul><h2 id="void"><a href="#void" class="headerlink" title="void *"></a>void *</h2><p>这个牛逼的东西可以指向任何数据类型，除了函数以外；</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300151582.png" alt="image.png"></p><h2 id="别名问题"><a href="#别名问题" class="headerlink" title="别名问题"></a>别名问题</h2><ul><li>多个指针指向同一快内存地址时</li><li>后续的操作可能带来一些问题</li></ul><p>首先我们给出一段常见的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> f = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">int</span> x = (<span class="hljs-type">int</span>) f;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x);<br></code></pre></td></tr></table></figure><ul><li>将f强制转换为一个整形数字</li><li>赋值给x</li></ul><p>接下来是另一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> f = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">int</span> * p = (<span class="hljs-type">int</span> *) &amp;f;  <span class="hljs-comment">// generally a bad idea!</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *p);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300151230.png" alt="image.png"></p><p><em>3.14 按照 IEE754 的浮点编码表示为：</em><br><em>0100 0000 0100 1000 1111 0101 1100 0011</em></p><ul><li>_高位0为符号位 _</li><li><em>随后的1000 0000为指数位</em></li><li><em>剩下的23位是尾数位</em></li></ul><p>这段代码本质上是通过<strong>解引</strong>打印出了f在IEEE754标准下的表示模式</p><ul><li>指针不要乱用</li><li>不同的数据的存储模式是不同的</li><li>指针加一代表向内存中移动一段距离，这段距离由所指向的数据类型来决定<ul><li>占用的字节数目不同</li><li>模式不同</li></ul></li></ul><h2 id="悬挂指针"><a href="#悬挂指针" class="headerlink" title="悬挂指针"></a>悬挂指针</h2><ul><li>指某个指向了已经销毁的堆&#x2F;栈区内存的指针</li><li>可能会造成数据的覆写或者一些未知的值</li><li>永远不要返回一个指向局部变量的指针</li><li>释放某块内存后，立即将该指针指向nullptr或null</li><li>使用指针之前永远检查是否非空</li></ul><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><ul><li>c99标准允许我们动态的创建数组</li><li>c是不能显示的获取数组的大小的</li></ul><h1 id="String-in-c"><a href="#String-in-c" class="headerlink" title="String in c"></a>String in c</h1><h2 id="const-string"><a href="#const-string" class="headerlink" title="const string"></a>const string</h2><ul><li>使用指针形式创造的字符串是不允许被修改的</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300152802.png" alt="image.png"></p><ul><li>如果尝试使用str[i] 或者 *(a+1)等方式修改str，则程序崩溃，因为这种方式创建的字符串存储在静态区，而存储在静态区的数据很多情况下我们会进行复用，我们不会希望修改；</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300152547.png" alt="image.png"></p><ul><li>所以在创建字符串常量时务必使用const来修饰，这样可以在编译阶段及时发现错误</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *str = <span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="Mutable-string"><a href="#Mutable-string" class="headerlink" title="Mutable string"></a>Mutable string</h2><ul><li>使用[]来标记我们希望把这个字符串存到堆或者栈而不是静态区</li><li>如果显式定义了字符串的大小，确保你的空间够用，如果因为空间问题导致结束标志’\0’没有地方存储会导致越界访问</li><li>需要注意内存泄漏问题</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> *a = new <span class="hljs-type">char</span>[<span class="hljs-number">3</span>];<br>    a =<span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个不会报错，但是内存泄漏的例子；<br>首先在堆上分配了3个字节；<br>a指向的是堆上连续的三个字节；<br>然后a又指向了静态区；<br>这导致了之前在堆上分配的内存无法回收；</p><h2 id="String-Equality"><a href="#String-Equality" class="headerlink" title="String Equality"></a>String Equality</h2><ul><li>&#x3D;&#x3D; 比较的是两个值相不相同</li><li>确保使用比较函数</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300152560.png" alt="image.png"></p><h2 id="String-copy"><a href="#String-copy" class="headerlink" title="String copy"></a>String copy</h2><ul><li>确保用安全的函数进行字符串的拷贝</li><li>确保’\0’拷贝进去了</li><li><em>strncpy(str1,str2,num(str2)+1)</em></li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300152541.png" alt="image.png"></p><h2 id="Array-of-Strings"><a href="#Array-of-Strings" class="headerlink" title="Array of Strings"></a>Array of Strings</h2><ul><li>有两种实现方式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> * words[] = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;likes&quot;</span>, <span class="hljs-string">&quot;sleeping.&quot;</span>, <span class="hljs-literal">NULL</span>&#125;;<br><br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(words)&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-type">char</span> words_[<span class="hljs-number">5</span>][<span class="hljs-number">10</span>] = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;likes&quot;</span>, <span class="hljs-string">&quot;sleeping.&quot;</span>, <span class="hljs-literal">NULL</span>&#125;;<br><br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(words_)&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第一个占用的内存更小 每一个位置存储的char* 大小为8字节</li><li>第二个存储的是实实在在的字符 大小为5*10</li></ul><h1 id="多维数组的内存布局"><a href="#多维数组的内存布局" class="headerlink" title="多维数组的内存布局"></a>多维数组的内存布局</h1><ul><li>double myMatrix[4][3]</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300152233.png" alt="image.png"></p><p>逻辑上我们可以认为：</p><ul><li>首先开辟了四个内存块</li><li>每个内存块存储了三个double类型</li><li>总消耗内存位4<em>3</em>sizeof(double)</li></ul><p>实际的内存布局为</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300153310.png" alt="image.png"></p><ul><li>从低地址向高地址递增</li><li>内存是连续的</li><li>初始化可以回避第一维，除此之外的任意一维都不行</li></ul><p>当然也可以存储不定长的数组</p><ul><li>此时内存不一定连续</li><li>double * myMatrix[4] &#x3D; {row0, row1, row2, row3};</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309300153296.png" alt="image.png"></p><h2 id="多维数组的传参"><a href="#多维数组的传参" class="headerlink" title="多维数组的传参"></a>多维数组的传参</h2><p>首先给出一个错误的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">p</span><span class="hljs-params">(<span class="hljs-type">int</span> ** arr,<span class="hljs-type">int</span> w,<span class="hljs-type">int</span> h)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;w;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;h;j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br>    p((<span class="hljs-type">int</span>**)data,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编译不报错</li><li>但会引发段错误 （访问到了无效内存）</li></ul><p>解析</p><ul><li>data是一个指针（多维数组的首地址） 指向的第一个元素是一个长度为3的int型数组的第一个元素  记为(int(*)[3])</li><li>p函数要求的类型是int **</li><li>int <strong>arr &#x3D; (int</strong>)data 在告诉编译器 从data[0][0] 读取int<em>个大小的字节 也就是把data[0][0]和data[0][1]组合在了一起（int</em>指针往往是8字节个大小)</li><li>访问到完全未知的内存，有可能会引发段错误</li></ul><p>更正</p><ul><li><p>方法一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">p</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][<span class="hljs-number">3</span>],<span class="hljs-type">int</span> w,<span class="hljs-type">int</span> h)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;w;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;h;j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br>    p(data,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span> ;<br>&#125;<br><br><span class="hljs-comment">//其实这里的int arr[][3] 就是 (int(*)[3]) 也就是一个指向了长度为三的int型数组的指针</span><br></code></pre></td></tr></table></figure></li><li><p>方法二</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">p</span><span class="hljs-params">(<span class="hljs-type">int</span> **arr, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; w; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; h; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, arr[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> *pdata[<span class="hljs-number">3</span>] = &#123;data[<span class="hljs-number">0</span>], data[<span class="hljs-number">1</span>], data[<span class="hljs-number">2</span>]&#125;;<br>    p(pdata, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>方法三（最优雅）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">p</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; w; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; h; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, arr[i * h + j]); <span class="hljs-comment">// 手动计算二维索引</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br>    p(&amp;data[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-number">3</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 传入一维数组的首地址</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><ul><li>函数的名称其实就是函数指针(没有括号的情况下）</li><li>函数指针是实现面向对象编程的核心，但是面向对象编程往往封装了这个细节</li></ul><p>一个简单的例子，实现对不同类型的数组进行排序</p><ul><li>c中的qsort的最后一个参数就是一个函数指针<ul><li>这个指针 int(* compare)(const void *,const void *))</li><li>可以指向任意返回为int型，参数个数为两个的任意形参<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compareLong</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *p1,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *p2)</span></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">long</span> *v1 = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">long</span> *&gt;(p1);<br>    <span class="hljs-type">const</span> <span class="hljs-type">long</span> *v2 = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">long</span> *&gt;(p2);<br>    <br>    <span class="hljs-keyword">if</span> (*v1 &lt; *v2) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (*v1 == *v2) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortLong</span><span class="hljs-params">(<span class="hljs-type">long</span> *array,<span class="hljs-type">size_t</span> n)</span></span>&#123;<br>    <span class="hljs-built_in">qsort</span>(array,n,<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>),compareLong);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> *arr = <span class="hljs-keyword">new</span> <span class="hljs-type">long</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>        arr[i] = <span class="hljs-number">10</span>-i;<br>    &#125;<br>    <span class="hljs-built_in">sortLong</span>(arr,<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>        cout&lt;&lt;arr[i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">delete</span>(arr);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Buffer-Overflow-attack"><a href="#Buffer-Overflow-attack" class="headerlink" title="Buffer Overflow attack"></a>Buffer Overflow attack</h1><ul><li>never use gets()</li></ul><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>搜索大师表示不需要学这玩意，毕竟是饭碗子，要骗分的<br>但还是看了一看</p><ul><li>尾部递归</li><li>头部递归</li><li>函数式编程（强烈推荐）？？为啥</li><li>相互递归</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通讯协议</title>
    <link href="/2023/08/19/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/08/19/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h1><p>小S同学每天都要和他的女朋友小B同学打电话，搞的小N同学和小M同学都十分的气愤，因为没法好好睡觉。能让NM两位同学能够在应有的年龄得到应有的教育的原因之一，就是通讯协议的存在。在我写这篇博文之前，我只知道<strong>HTTP，TCP，UDP，FTP，FMSTP，SSH</strong>等协议，然而从来没想过<strong>HDMI</strong>居然也是通讯协议，<strong>Wi-Fi</strong>也是通讯协议<del>啊？</del>。写这篇博文的目的有两点，希望能够从一个更高的层面理解什么是通讯协议，日后再慢慢深入。</p><h2 id="通讯协议是什么"><a href="#通讯协议是什么" class="headerlink" title="通讯协议是什么"></a>通讯协议是什么</h2><p>通讯协议就是<strong>一座桥</strong>，桥可以让人，车通过，但通讯协议就是<strong>桥本身</strong>，有没有人走，都无所谓。通讯协议只做一件事情，确保桥能够确保人或者车顺利通过。</p><p>在原始部落，消息的交流以声音为主，随着人类的不断进化，我们现在有了更高级的信息交流方式<del>比如在大赛开赛前桃田贤斗邀请福岛由纪选手在房间内交流羽毛球战术</del>，我们可以通过一部手机和远在千里之外的亲人交流，我们可以通过网络会师于全国各地的喷子；</p><p>通讯协议有三个要素:</p><ul><li><p>语法</p></li><li><p>语意</p></li><li><p>时序</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>定义了数据的格式，数据的结构，开始结束的标志，数据字段怎么排布等。语法就像<strong>桥</strong>上的道路一样，规定了走人的地方，走车的地方。</p><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><p>描述了通讯过程中的意图。语意就像桥上的指示牌一样，让我们知道人走人路，车走车路。</p><h3 id="时序"><a href="#时序" class="headerlink" title="时序"></a>时序</h3><p>规定了数据交换的顺序和时间间隔。时序就像交通法则一样，车要礼让行人，车有速度要求，能够在一定时间过桥。</p></li></ul><p>所以通讯协议做了什么，<strong>让通信双方可以正确的发送信息，接收信息，理解信息</strong>，桥呢？让过桥的人或者车能够正常的通过桥。</p><h2 id="通讯协议为什么有很多种"><a href="#通讯协议为什么有很多种" class="headerlink" title="通讯协议为什么有很多种"></a>通讯协议为什么有很多种</h2><p>我们有很多种不同的车需要过桥，有玩具车，装甲车，火车。很明显设计出一条桥能够满足所有的过车需求很难，比如如果我告诉我的妈妈说我要带着我的玩具车穿过京渝大道，那我的妈妈一定会亲切的告诉我你的玩具车只配从你爸爸的脸上碾过一样荒谬。</p><p><strong>HTTP协议：</strong>超文本传输协议，其目的就是为了发送HTML（超文本标记语言），超文本标记语言做了两件事，文本中包含链接可以跳转，以及文本可以被渲染成多种不同的形式。</p><p><strong>SSH协议：</strong><del>就叫SSH协议</del>，其目的是为了解决早期的登陆协议不加密导致的安全问题的<strong>远程登录</strong>协议，不过用的比较多的是用来传文件就是了hhh</p><p><strong>DP协议：</strong>又称之为打游戏协议，解决了镭射眼玩家打游戏的输入延迟问题，<del>超人玩家除外，他们可能需要1000帧</del></p><p>不同的通讯协议解决了不同的需求，就像不同的桥解决了不同的过桥需求一样。</p><h2 id="协议栈是什么？为什么需要协议栈"><a href="#协议栈是什么？为什么需要协议栈" class="headerlink" title="协议栈是什么？为什么需要协议栈"></a>协议栈是什么？为什么需要协议栈</h2><p>OSI：应用层，表示层，会话层，传输层，网络层，数据链路层，物理层</p><p>TCP&#x2F;IP：应用层 传输层  网络层 网络接口层</p><p>为什么有<strong>桥</strong>？因为人有<strong>过桥</strong>的需求。那么现代的桥一般都由什么组成呢？钢筋要有吧，水泥要有吧，电缆可能要有吧。尽管看起来人只需要过桥就好了，但实际情况复杂的多，比如万一过桥的人很多怎么办，万一雨下得很大没法过桥怎么半？桥塌了怎么修？桥承载的不仅仅是<strong>过桥</strong>二字那么简单，背后需要大量的付出与维护。</p><ul><li><p><strong>协议栈</strong>是对通讯需求的<strong>解耦模块化</strong>设计，其本身包含了<strong>一系列的通信协议</strong>。协议栈提高了开发的效率。TCP&#x2F;IP就是常见的协议栈。</p></li><li><p>协议栈的存在提高了开发的效率，这种效率可能是复用，可能是不同厂商不同设备的互联的可能。就和建一座大桥一样，分包给了三个不同的工程组，A工程组用混凝土做支撑，B组用榫卯做支撑，C组不做支撑，那这座桥的可靠性甚至于能不能完工都是另一回事了。</p></li></ul><h1 id="常见的协议栈"><a href="#常见的协议栈" class="headerlink" title="常见的协议栈"></a>常见的协议栈</h1><p>很明显的，TCP，UDP，SSH，HTTP&#x2F;HTTPS，IP是后端开发的主力协议，当然还有一些流媒体协议，但基本上都会基于上述提到的协议进行开发。</p><ol><li><p><strong>TCP&#x2F;IP协议栈</strong> (也称为Internet协议套件)：</p><ul><li>应用层：<strong>HTTP</strong>, <strong>HTTPS</strong>, FTP, SMTP, <strong>SSH</strong>,POP3, IMAP, DNS, SNMP, DHCP等。</li><li>传输层：<strong>TCP</strong>, <strong>UDP</strong>, SCTP。</li><li>网络层：<strong>IP</strong> (IPv4 和 IPv6), ICMP, ARP, RARP。</li><li>链路层：Ethernet, Wi-Fi, PPP。</li></ul></li><li><p><strong>OSI参考模型</strong> (主要用于理论参考，但某些协议确实基于此模型设计)：</p><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层：<strong>TCP</strong>, <strong>UDP</strong>。</li><li>网络层：<strong>IP</strong>, ICMP。</li><li>数据链路层：SLIP, PPP。</li><li>物理层：电缆、光纤、无线传输介质。</li></ul></li><li><p>蓝牙协议栈</p></li><li><p>Zigbee协议栈 (用于低功耗、短距离无线通信)</p></li><li><p>GSM协议栈 (移动通信)</p></li><li><p>车载CAN,航空航天CANaerospace等…</p></li></ol><h2 id="HTTP-x2F-HTTPS"><a href="#HTTP-x2F-HTTPS" class="headerlink" title="HTTP&#x2F;HTTPS"></a>HTTP&#x2F;HTTPS</h2><p>我们之前已经讨论过，协议就可以看作一座桥，因此在开始讨论每一个协议之前我们都需要知道桥的两方是谁。</p><p>HTTP functions as a <a href="https://en.wikipedia.org/wiki/Request%E2%80%93response">request–response</a> protocol in the <a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model">client–server model</a>. A <a href="https://en.wikipedia.org/wiki/Web_browser">web browser</a>, for example, may be the <em>client</em> whereas a <a href="https://en.wikipedia.org/wiki/Process_(computing)">process</a>, named <a href="https://en.wikipedia.org/wiki/Web_server">web server</a>, running on a computer <a href="https://en.wikipedia.org/wiki/Host_(network)">hosting</a> one or more <a href="https://en.wikipedia.org/wiki/Website">websites</a> may be the <em>server</em>.（维基百科）</p><p>这里又牵扯出了新的定义，<strong>客户端-服务器</strong>模型，详细的定义可以参照wiki，我们的目的是确定HTTP&#x2F;HTTPS协议的通信双方是谁。<del>永远知道自己的目的是什么，漫无目的的深挖只会让你成为败犬。</del></p><ul><li>客户端  &lt;——&gt; [HTTP&#x2F;HTTPS]&lt;——-&gt; 服务端</li></ul><p><strong>客户端</strong>可以是浏览器，可以是APP，可以是任何可以发送&#x2F;响应HTTP请求的实体，而无关于技术实现。</p><p><strong>服务端</strong>则与客户端类似，可以正确的响应HTTP客户端的请求的实体，而无关于技术实现。</p><h3 id="HTTP协议简单使用-amp-作用"><a href="#HTTP协议简单使用-amp-作用" class="headerlink" title="HTTP协议简单使用&amp;作用"></a>HTTP协议简单使用&amp;作用</h3><p>先上个形象的例子，假如我们想在服务器测试一下是否可以访问别的站点，但是因为又穷又菜搞定不了图形化界面。所以我们百度以后发现了这条命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X GET www.baidu.com<br></code></pre></td></tr></table></figure><p>我们发送完毕后在那个小黑框里得到了一些输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">content-type</span> <span class="hljs-attr">content</span>=<span class="hljs-string">text/html;charset</span>=<span class="hljs-string">utf-8</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">X-UA-Compatible</span> <span class="hljs-attr">content</span>=<span class="hljs-string">IE</span>=<span class="hljs-string">Edge</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">always</span> <span class="hljs-attr">name</span>=<span class="hljs-string">referrer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">stylesheet</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text/css</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>百度一下，你就知道<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> ...<br>...<br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://www.baidu.com/duty/</span>&gt;</span>使用百度前必读<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://jianyi.baidu.com/</span> <span class="hljs-attr">class</span>=<span class="hljs-string">cp-feedback</span>&gt;</span>意见反馈<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>京ICP证030173号<span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">//www.baidu.com/img/gs.gif</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们也不知道返回了什么东西，但我们可以额确定的是，假如我们有钱且不那么菜的话，我们是可以在服务器上用百度搜索Google的搜索结果的。</p><p>实际上我们返回的东西叫做<strong>超文本</strong>(Hypertext)，让我们在计算机设备或者其他电子设备阅读的文本，使用HTML编写，使我们在互联网上能够很轻松的发布或者阅读内容。</p><p>所以我们也很清楚的知道了，<strong>HTTP协议就是用来在互联网上传输文本的</strong>。它具有信息传递的功能。那HTTPS呢？不深究的话一句话就可以理解。</p><ul><li><p>夫人，你也不想翔太知道你昨天趁着老公不在家偷偷躲在衣柜里看哆啦A梦吧？</p><p>HTTPS对我们访问的地址，以及后续通信的数据包进行了加密。</p></li></ul><h3 id="HTTP-x2F-1-1协议语法"><a href="#HTTP-x2F-1-1协议语法" class="headerlink" title="HTTP&#x2F;1.1协议语法"></a>HTTP&#x2F;1.1协议语法</h3><p><strong>support</strong></p><p>URL是什么，URI是什么？</p><p>URL也叫统一资源定位符，是URI的子集。通过URL我们可以标识并找到（如果存在）一个具体的资源，如：</p><p><code>http://www.baidu.com</code>。我们知道了用什么协议，在什么地址，在哪个端口（http默认80）。</p><p>而URI则可以标识一个资源，但并不一定提供具体寻找的手段，URI与协议无关。一个URL必然是一个URI。</p><h4 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息:"></a>请求消息:</h4><ul><li><strong>起始行</strong>: 包括HTTP方法、请求的URI和HTTP版本。例如：<code>GET /index.html HTTP/1.1</code></li><li><strong>头部字段</strong>: 由冒号分隔的名称-值对。例如：<code>Host: www.example.com</code></li><li><strong>空行</strong>: 头部和消息体之间的一个空行。</li><li><strong>消息体</strong>: POST或PUT请求中包含的数据。</li></ul><h4 id="响应消息"><a href="#响应消息" class="headerlink" title="响应消息:"></a>响应消息:</h4><ul><li><strong>状态行</strong>: 包括HTTP版本、状态码和原因短语。例如：<code>HTTP/1.1 200 OK</code></li><li><strong>头部字段</strong>: 例如：<code>Content-Type: text/html</code></li><li><strong>空行</strong></li><li><strong>消息体</strong>: 通常是请求的资源，如HTML文档。</li></ul><h3 id="HTTP-x2F-1-1协议语义"><a href="#HTTP-x2F-1-1协议语义" class="headerlink" title="HTTP&#x2F;1.1协议语义"></a>HTTP&#x2F;1.1协议语义</h3><p>每个HTTP请求方法都有其语义，定义了所执行操作的类型：</p><ul><li><strong>GET</strong>: 请求指定的资源。只应用于数据检索。</li><li><strong>POST</strong>: 用于提交数据到资源。</li><li><strong>PUT</strong>: 更新现有资源或创建新资源。</li><li><strong>DELETE</strong>: 删除指定的资源。</li><li><strong>HEAD</strong>: 与GET类似，但没有消息体。</li><li><strong>OPTIONS</strong>: 返回可以应用于目标资源的通信选项。</li><li><strong>CONNECT</strong>: 用于网络隧道。</li><li><strong>TRACE</strong>: 回显服务器收到的请求，主要用于诊断。</li><li><strong>PATCH</strong>: 对资源进行部分修改。</li></ul><p>状态码，向客户端快速反馈请求的结果</p><ul><li><strong>1xx</strong>：信息响应</li><li><strong>2xx</strong>：成功。例如，200 OK, 201 Created。</li><li><strong>3xx</strong>：重定向。例如，301 Moved Permanently, 302 Found。</li><li><strong>4xx</strong>：客户端错误。例如，400 Bad Request, 404 Not Found。</li><li><strong>5xx</strong>：服务器错误。例如，500 Internal Server Error, 503 Service</li></ul><h3 id="HTTP-x2F-1-1协议时序"><a href="#HTTP-x2F-1-1协议时序" class="headerlink" title="HTTP&#x2F;1.1协议时序"></a>HTTP&#x2F;1.1协议时序</h3><p>基于请求-响应模型，HTTP的时序通常如下：</p><ol><li><strong>客户端连接</strong>：客户端（通常是Web浏览器）建立到服务器的TCP连接。</li><li><strong>发送请求</strong>：客户端发送HTTP请求。</li><li><strong>服务器处理</strong>：服务器处理该请求，可能会查询数据库或执行其他操作。</li><li><strong>发送响应</strong>：服务器发送HTTP响应给客户端。</li><li><strong>关闭连接</strong>：除非使用了持久连接（例如在HTTP&#x2F;1.1中默认启用），否则一旦响应被发送，连接就会被关闭。</li></ol><h3 id="HTTP协议版本-amp-杂项"><a href="#HTTP协议版本-amp-杂项" class="headerlink" title="HTTP协议版本&amp;杂项"></a>HTTP协议版本&amp;杂项</h3><p>HTTP协议是无状态的，服务器并不不会保存多轮请求之间的状态。（cookies在客户端存一些内容，使得之后的请求都会带上cookies，session允许服务端跨请求之间的信息交换）。</p><p>HTTP&#x2F;0.9只支持一个GET请求，而且不完整</p><p>HTTP&#x2F;1.0支持了完整的GET请求</p><p>HTTP&#x2F;1.1现在用的最广的协议</p><h3 id="HTTP-x2F-2"><a href="#HTTP-x2F-2" class="headerlink" title="HTTP&#x2F;2"></a>HTTP&#x2F;2</h3><ol><li><p><strong>多路复用（Multiplexing）</strong>: 通过单一的 HTTP&#x2F;2 连接，允许多个请求和响应同时交叉进行，从而解决 HTTP&#x2F;1.x 中的线头阻塞问题。</p></li><li><p><strong>首部压缩（Header Compression）</strong>: 使用 HPACK 算法对头部信息进行压缩，降低了传输的大小，提高效率。</p></li><li><p><strong>服务器推送（Server Push）</strong>: 允许服务器在客户端需要之前“推送”资源，例如，服务器可以预测到客户端接下来会请求某些资源，于是提前发送给客户端。</p></li><li><p><strong>优先级和流量控制</strong>: 可以设置资源的优先级，以及控制数据的流动速率。</p></li><li><p><strong>二进制协议</strong>: 不同于 HTTP&#x2F;1.x 的文本协议，HTTP&#x2F;2 使用二进制格式，使得解析更为高效、精确和紧凑。</p></li><li><p><strong>更强的安全性</strong>: 虽然 HTTP&#x2F;2 协议本身不要求使用 HTTPS，但在实际的大多数实现和浏览器中，HTTP&#x2F;2 基本上都是通过 HTTPS 进行的。</p></li></ol><h3 id="HTTP-x2F-3"><a href="#HTTP-x2F-3" class="headerlink" title="HTTP&#x2F;3"></a>HTTP&#x2F;3</h3><ol><li><strong>使用 QUIC 协议</strong>: HTTP&#x2F;3 放弃了基于 TCP 的传输层协议，转而使用新的 QUIC 协议。QUIC 是基于 UDP 的，它本身内置了多路复用、流量控制、误差纠正和其他功能。</li><li><strong>更好的连接迁移</strong>: 用户在移动设备上更换网络时（例如，从 Wi-Fi 切换到移动网络），QUIC 提供的连接迁移功能可以更平滑地进行。</li><li><strong>零 RTT 连接建立</strong>: 利用之前的连接信息，QUIC 允许更快地建立连接，有时候只需零个往返时延。</li><li><strong>内置 TLS 1.3</strong>: QUIC 内置了最新版本的 TLS，从而提供了强加密和更好的性能。</li><li><strong>解决线头阻塞</strong>: 由于 QUIC 自带多路复用，它进一步解决了由于单个数据包丢失而导致的整个连接受阻的线头阻塞问题。</li></ol><h3 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h3><p>HTTPS协议是通过在HTTP协议的上层添加了一层加密协议，实现了对HTTP请求和响应的加密。</p><p>HTTPS的加密协议使用了SSL&#x2F;TLS，其中SSL已经被放弃使用，因为其本身存在许多安全漏洞。</p><h4 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程"></a>握手过程</h4><ol><li><p><strong>客户端的初始请求</strong>：客户端发送一个”ClientHello”消息给服务端。这个消息中包含了客户端支持的加密算法列表、一个客户端随机数(Client Random)、以及客户端支持的TLS版本。</p></li><li><p><strong>服务端的响应</strong>：服务端回复一个”ServerHello”消息给客户端。这个消息中选择了一种客户端所提供的加密算法、一个服务端随机数(Server Random)、以及双方要使用的TLS版本。</p></li><li><p><strong>服务端的证书</strong>：服务端发送其数字证书给客户端。这个证书由第三方权威认证中心签名，并且包含服务端的公钥。</p></li><li><p><strong>客户端验证证书</strong>：客户端验证服务端的证书，确保它是由一个受信任的证书颁发机构签名的、仍然有效（未过期），且与服务端的域名匹配。</p></li><li><p><strong>预主密钥的生成与发送</strong>：客户端生成一个预主密钥(Pre-Master Secret)，并使用服务端证书中的公钥对它进行加密，然后发送给服务端。</p></li><li><p><strong>服务端解密预主密钥</strong>：服务端使用其私钥解密从客户端接收到的加密的预主密钥，从而获取原始的预主密钥。</p></li><li><p><strong>会话密钥的计算</strong>：客户端和服务端都使用预主密钥和之前的随机数（Client Random和Server Random）来计算会话密钥。这个会话密钥将被用于加密和解密整个会话的数据。</p></li><li><p><strong>客户端的确认消息</strong>：客户端发送一个”Finished”消息给服务端，消息内容是使用会话密钥加密的。</p></li><li><p><strong>服务端的确认消息</strong>：服务端回复一个”Finished”消息给客户端，同样使用会话密钥加密。</p></li><li><p><strong>安全会话的开始</strong>：双方现在都有了相同的会话密钥，并且已经确认了彼此的身份。他们可以开始安全地交换加密的数据。</p></li></ol><h2 id="TCP-x2F-UDP"><a href="#TCP-x2F-UDP" class="headerlink" title="TCP&#x2F;UDP"></a>TCP&#x2F;UDP</h2><p>同样的，在开始之前，我们首先要确定TCP&#x2F;UDP协议通讯的双方是谁。我们已经知道了HTTP&#x2F;HTTPS协议是服务于客户端和服务端的，并且通常情况下，客户端和服务端都是一些较为重型的应用，譬如浏览器、服务器。</p><p>TCP&#x2F;UDP协议是作为两个进程之间通信的桥梁，这是一个很细的粒度。</p><h3 id="TCP简单实例"><a href="#TCP简单实例" class="headerlink" title="TCP简单实例"></a>TCP简单实例</h3><p>打开终端，我们监听一个端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netcat -v -l -p 9090<br></code></pre></td></tr></table></figure><p>在开启一个新的终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet -v -l -p 9090<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202308282054578.png" alt="image-20230828205434358"></p><p>此时我们便成功建立起了一个TCP连接，TCP连接允许双方进行字节流级别的通信。TCP协议基本上就是我这种菜鸡准后台开发能够接触到的最底层的协议。</p><h3 id="TCP协议语法"><a href="#TCP协议语法" class="headerlink" title="TCP协议语法"></a>TCP协议语法</h3><ul><li><strong>TCP头</strong>: 每个TCP段都包含一个固定大小的头部，该头部有一系列的字段来指定如何处理该段。这些字段包括源端口、目的端口、序列号、确认号、窗口大小、标志位（如SYN、ACK、FIN等）以及校验和。</li><li><strong>序列号和确认号</strong>: 这些字段用于实现TCP的可靠性。每个字节都有一个序列号，而确认号指的是接收方希望接收的下一个字节的序列号。</li><li><strong>窗口大小</strong>: 用于流控制，指定了接收方当前可以接收的字节数。</li><li><strong>标志位</strong>: 如SYN（用于连接建立）、FIN（用于连接终止）、ACK（表示确认号字段有效）等，这些标志位在TCP的不同操作中起到关键作用。</li></ul><h3 id="TCP协议语义"><a href="#TCP协议语义" class="headerlink" title="TCP协议语义"></a>TCP协议语义</h3><ul><li><strong>连接导向</strong>: TCP是一个连接导向的协议。在数据传输前，发送方和接收方必须首先建立连接。</li><li><strong>可靠传输</strong>: TCP通过使用确认、重传等机制确保数据可靠地从源到目的地传输。</li><li><strong>流控制</strong>: TCP使用滑动窗口机制来控制数据流，防止发送方超过接收方的处理能力。</li><li><strong>拥塞控制</strong>: TCP使用拥塞窗口和其他机制，如慢启动和拥塞避免，以避免网络拥塞。</li><li><strong>有序数据传输</strong>: TCP通过序列号保证数据的有序传输。</li></ul><h3 id="TCP协议时序"><a href="#TCP协议时序" class="headerlink" title="TCP协议时序"></a>TCP协议时序</h3><ul><li><strong>三次握手</strong>: 当一个TCP连接被初始化时，它使用所谓的“三次握手”来建立连接。发送方发送一个带有SYN标志的段，接收方响应一个带有SYN和ACK标志的段，然后发送方再次发送一个带有ACK标志的段。</li><li><strong>数据传输</strong>: 一旦连接建立，数据可以在两个方向上流动。发送方发送数据，接收方返回带有ACK标志的段来确认已经接收的数据。</li><li><strong>四次挥手</strong>: 当通信结束时，连接终止通过一个四步过程完成：发送方或接收方发送一个FIN段，对方响应一个ACK，然后对方发送它自己的FIN，原始方发送最后的ACK。</li><li><strong>超时和重传</strong>: 如果发送方没有在预期的时间内收到一个段的确认，则它会假定该段丢失，并重传该段。</li><li><strong>拥塞控制</strong>: 根据网络的拥塞情况，TCP会调整其数据传输速率。例如，如果发生丢包，TCP可能会减少其发送速率。</li></ul><h3 id="TCP实现细节"><a href="#TCP实现细节" class="headerlink" title="TCP实现细节"></a>TCP实现细节</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202308290917579.png" alt="image-20230829091741465"></p><p>首先推荐一个斯坦福的lab，这个lab从零开始实现可靠的字节流传输，最终允许在两个终端上实现和简单示例一样的结果，时间问题我只完成了前三个，也算是lab中编码最难的部分了，主要难度是在TCP组装器那个部分。</p><p>整个TCP的实现内容还是很多的，这里补充一些在写这个lab之前没有了解到的东西。</p><ul><li>TCP的存储区有两个部分，一部分用于处理乱序到达的报文段（我用了map实现，使用unordered_map会在垃圾处理的时候比较麻烦），一部分用于存储顺序到达的报文段（我用了string以及一个标志位模拟了一个队）</li><li>TCP支持任意长度的数据发送与接收，但我们可以发现TCP表头的<strong>序列号码</strong>只有32位，也就是大约只能存储$2^{32}$个二进制位，这显然不符合TCP支持任意长度数据的发送。实际上这个序列号码是一个相对序列号码，我们真正数据索引的最大长度是$2^{64}$,因此TCP的接收器和发送器实际上并不是直接把下一个所需要的报文段的索引存储在序列号码中，而是通过一个随机数以及取模运算，在收发时将这个序列号码在32位与64位之间进行转换，为什么不从0开始呢？这是一个非常哲学的设计方法，详细可以参照cs144lab 2023中的lab2。</li></ul><p><strong>标志位解释</strong></p><ol><li><p>URG (Urgent pointer): 当此位被设置时，表示”Urgent Pointer”字段是有效的，通常用于通知接收方有紧急数据需要处理。</p></li><li><p><strong>ACK (Acknowledgment)</strong>: 当此位被设置时，表示确认号码”Acknowledgment Number”字段是有效的。通常表示之前发送的数据已经被接收方确认了。</p></li><li><p><strong>PSH (Push)</strong>: 当此位被设置时，发送方请求接收方立即处理接收的数据，而不是等待缓冲区填满。</p></li><li><p><strong>RST (Reset)</strong>: 当此位被设置时，表示连接出现错误，请求对端重置当前连接。</p></li><li><p><strong>SYN (Synchronize sequence numbers)</strong>: 当此位被设置时，表示正在请求建立一个新的连接。这通常用于TCP的三次握手过程中。</p></li><li><p><strong>FIN (Finish)</strong>: 当此位被设置时，表示发送方已经完成数据的发送，并希望关闭连接。</p></li><li><p>CWR (Congestion Window Reduced): 当此位被设置时，表示发送方已经确认接收到了ECE回显，因此已经降低了它的拥塞窗口大小。</p></li><li><p>ECE (ECN Echo): 当ECE被设置，且SYN也被设置，表示TCP对端支持ECN功能。如果SYN没有被设置，而ECE被设置，那么这是表示网络已经经历了拥塞，且发送方已经降低了拥塞窗口。</p></li><li><p>NS (Nonce Sum): 与ECN有关，用于保护TCP连接免受攻击。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写这篇博文带给我最大的收获其实是前边口嗨的东西，通讯协议就只做一件事，完成信息的交流。让我更能理解上层设计的重要性，假如没有协议，没有协议栈的概念，各方厂家各自维护自己的标准，那么带来的只能是发展的停滞。</p><p>如今大语言模型的出现了两派，一派以微软，ClosedAI为主的closed发展理念，而一派则以meta ，hugging face为主的开源派（虽然小扎就是在玩阳谋吧）。是闭关锁国胜，还是丝绸之路通，期待！</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后端技术总结</title>
    <link href="/2023/07/30/%E5%90%8E%E7%AB%AF%E5%B8%B8%E8%A7%81%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <url>/2023/07/30/%E5%90%8E%E7%AB%AF%E5%B8%B8%E8%A7%81%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1. 编程语言"></a>1. 编程语言</h3><h4 id="1-1-Java"><a href="#1-1-Java" class="headerlink" title="1.1 Java"></a>1.1 Java</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 版本: Java 8, Java 11, Java 16<br><span class="hljs-bullet">-</span> JVM: HotSpot, OpenJ9, GraalVM<br></code></pre></td></tr></table></figure><h4 id="1-2-Python"><a href="#1-2-Python" class="headerlink" title="1.2 Python"></a>1.2 Python</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 版本: Python 2.7, Python 3.8, Python 3.9<br><span class="hljs-bullet">-</span> 解释器: CPython, PyPy, Jython<br></code></pre></td></tr></table></figure><h3 id="2-框架"><a href="#2-框架" class="headerlink" title="2. 框架"></a>2. 框架</h3><h4 id="2-1-Java"><a href="#2-1-Java" class="headerlink" title="2.1 Java"></a>2.1 Java</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Web 框架: Spring Boot, Struts<br><span class="hljs-bullet">-</span> ORM 框架: JPA, Hibernate, MyBatis<br></code></pre></td></tr></table></figure><h4 id="2-2-Node-js"><a href="#2-2-Node-js" class="headerlink" title="2.2 Node.js"></a>2.2 Node.js</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Web 框架: Koa, Sails.js<br><span class="hljs-bullet">-</span> 测试框架: Mocha, Jest<br></code></pre></td></tr></table></figure><h4 id="2-3-移动开发框架"><a href="#2-3-移动开发框架" class="headerlink" title="2.3 移动开发框架"></a>2.3 移动开发框架</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> React Native<br><span class="hljs-bullet">-</span> Flutter<br><span class="hljs-bullet">-</span> Xamarin<br></code></pre></td></tr></table></figure><h3 id="3-客户端技术"><a href="#3-客户端技术" class="headerlink" title="3. 客户端技术"></a>3. 客户端技术</h3><h4 id="3-1-前端技术"><a href="#3-1-前端技术" class="headerlink" title="3.1 前端技术"></a>3.1 前端技术</h4><h5 id="3-1-1-JavaScript-框架"><a href="#3-1-1-JavaScript-框架" class="headerlink" title="3.1.1 JavaScript 框架"></a>3.1.1 JavaScript 框架</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> React<br><span class="hljs-bullet">-</span> Vue.js<br><span class="hljs-bullet">-</span> Angular<br></code></pre></td></tr></table></figure><h5 id="3-1-2-CSS-预处理器"><a href="#3-1-2-CSS-预处理器" class="headerlink" title="3.1.2 CSS 预处理器"></a>3.1.2 CSS 预处理器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> SASS<br><span class="hljs-bullet">-</span> LESS<br><span class="hljs-bullet">-</span> Stylus<br></code></pre></td></tr></table></figure><h5 id="3-1-3-打包工具"><a href="#3-1-3-打包工具" class="headerlink" title="3.1.3 打包工具"></a>3.1.3 打包工具</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Webpack<br><span class="hljs-bullet">-</span> Rollup<br><span class="hljs-bullet">-</span> Parcel<br></code></pre></td></tr></table></figure><h4 id="3-2-移动操作系统"><a href="#3-2-移动操作系统" class="headerlink" title="3.2 移动操作系统"></a>3.2 移动操作系统</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Android<br><span class="hljs-bullet">-</span> iOS<br><span class="hljs-bullet">-</span> Windows Mobile<br></code></pre></td></tr></table></figure><h3 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a>4. 数据库</h3><h4 id="4-1-关系型数据库"><a href="#4-1-关系型数据库" class="headerlink" title="4.1 关系型数据库"></a>4.1 关系型数据库</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 开源: PostgreSQL, MySQL<br><span class="hljs-bullet">-</span> 商业: Microsoft SQL Server, Oracle<br></code></pre></td></tr></table></figure><h4 id="4-2-非关系型数据库"><a href="#4-2-非关系型数据库" class="headerlink" title="4.2 非关系型数据库"></a>4.2 非关系型数据库</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 文档存储: MongoDB<br><span class="hljs-bullet">-</span> 键值存储: Redis<br><span class="hljs-bullet">-</span> 搜索引擎: Elasticsearch<br><span class="hljs-bullet">-</span> 时间序列数据库: InfluxDB<br></code></pre></td></tr></table></figure><h3 id="5-中间件"><a href="#5-中间件" class="headerlink" title="5. 中间件"></a>5. 中间件</h3><h4 id="5-1-身份验证"><a href="#5-1-身份验证" class="headerlink" title="5.1 身份验证"></a>5.1 身份验证</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> OAuth2<br><span class="hljs-bullet">-</span> SSO (单点登录): Okta, Auth0<br></code></pre></td></tr></table></figure><h4 id="5-2-缓存"><a href="#5-2-缓存" class="headerlink" title="5.2 缓存"></a>5.2 缓存</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 分布式缓存: Redis Cluster, Hazelcast<br></code></pre></td></tr></table></figure><h4 id="5-3-消息队列"><a href="#5-3-消息队列" class="headerlink" title="5.3 消息队列"></a>5.3 消息队列</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> AMQP: RabbitMQ<br><span class="hljs-bullet">-</span> 流处理: Kafka, Apache Flink<br></code></pre></td></tr></table></figure><h3 id="6-其他工具和技术"><a href="#6-其他工具和技术" class="headerlink" title="6. 其他工具和技术"></a>6. 其他工具和技术</h3><h4 id="6-1-版本控制"><a href="#6-1-版本控制" class="headerlink" title="6.1 版本控制"></a>6.1 版本控制</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 分布式: Git<br><span class="hljs-bullet">-</span> 集中式: SVN<br></code></pre></td></tr></table></figure><h4 id="6-2-持续集成-x2F-持续部署"><a href="#6-2-持续集成-x2F-持续部署" class="headerlink" title="6.2 持续集成&#x2F;持续部署"></a>6.2 持续集成&#x2F;持续部署</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 工具: Jenkins, CircleCI, Travis CI, GitLab CI/CD<br><span class="hljs-bullet">-</span> 配置管理: Ansible, Puppet, Chef<br></code></pre></td></tr></table></figure><h4 id="6-3-监控和日志"><a href="#6-3-监控和日志" class="headerlink" title="6.3 监控和日志"></a>6.3 监控和日志</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 性能监控: New Relic, Datadog<br><span class="hljs-bullet">-</span> 日志管理: Logstash, Fluentd<br></code></pre></td></tr></table></figure><h4 id="6-4-云服务"><a href="#6-4-云服务" class="headerlink" title="6.4 云服务"></a>6.4 云服务</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 计算: AWS EC2, Azure Virtual Machines<br><span class="hljs-bullet">-</span> 存储: AWS S3, Azure Blob Storage<br><span class="hljs-bullet">-</span> 数据库: AWS RDS, Azure SQL Database<br></code></pre></td></tr></table></figure><h4 id="6-5-测试"><a href="#6-5-测试" class="headerlink" title="6.5 测试"></a>6.5 测试</h4><h5 id="6-5-1-单元测试"><a href="#6-5-1-单元测试" class="headerlink" title="6.5.1 单元测试"></a>6.5.1 单元测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Java: JUnit, Mockito<br><span class="hljs-bullet">-</span> Python: pytest, unittest<br><span class="hljs-bullet">-</span> JavaScript: Jasmine, Chai<br></code></pre></td></tr></table></figure><h5 id="6-5-2-集成测试"><a href="#6-5-2-集成测试" class="headerlink" title="6.5.2 集成测试"></a>6.5.2 集成测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 工具: Selenium, Appium, JMeter<br><span class="hljs-bullet">-</span> 持续测试平台: Sauce Labs, BrowserStack<br></code></pre></td></tr></table></figure><h4 id="6-6-部署"><a href="#6-6-部署" class="headerlink" title="6.6 部署"></a>6.6 部署</h4><h5 id="6-6-1-容器化"><a href="#6-6-1-容器化" class="headerlink" title="6.6.1 容器化"></a>6.6.1 容器化</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Docker<br><span class="hljs-bullet">-</span> Kubernetes<br><span class="hljs-bullet">-</span> OpenShift<br></code></pre></td></tr></table></figure><h5 id="6-6-2-服务器管理"><a href="#6-6-2-服务器管理" class="headerlink" title="6.6.2 服务器管理"></a>6.6.2 服务器管理</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Apache<br><span class="hljs-bullet">-</span> Nginx<br><span class="hljs-bullet">-</span> IIS<br></code></pre></td></tr></table></figure><h4 id="6-7-安全"><a href="#6-7-安全" class="headerlink" title="6.7 安全"></a>6.7 安全</h4><h5 id="6-7-1-代码审计"><a href="#6-7-1-代码审计" class="headerlink" title="6.7.1 代码审计"></a>6.7.1 代码审计</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Checkmarx<br><span class="hljs-bullet">-</span> Veracode<br><span class="hljs-bullet">-</span> Fortify<br></code></pre></td></tr></table></figure><h5 id="6-7-2-网络安全"><a href="#6-7-2-网络安全" class="headerlink" title="6.7.2 网络安全"></a>6.7.2 网络安全</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> WAF: Cloudflare, AWS WAF<br><span class="hljs-bullet">-</span> 防火墙: Palo Alto Networks, Fortinet<br></code></pre></td></tr></table></figure><h5 id="6-7-3-数据加密"><a href="#6-7-3-数据加密" class="headerlink" title="6.7.3 数据加密"></a>6.7.3 数据加密</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> TLS/SSL<br><span class="hljs-bullet">-</span> 数据库加密: Transparent Data Encryption (TDE)<br><span class="hljs-bullet">-</span> 硬盘加密: BitLocker, FileVault<br></code></pre></td></tr></table></figure><h4 id="6-8-协作与项目管理"><a href="#6-8-协作与项目管理" class="headerlink" title="6.8 协作与项目管理"></a>6.8 协作与项目管理</h4><h5 id="6-8-1-项目管理"><a href="#6-8-1-项目管理" class="headerlink" title="6.8.1 项目管理"></a>6.8.1 项目管理</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Jira<br><span class="hljs-bullet">-</span> Asana<br><span class="hljs-bullet">-</span> Trello<br></code></pre></td></tr></table></figure><h5 id="6-8-2-文档协作"><a href="#6-8-2-文档协作" class="headerlink" title="6.8.2 文档协作"></a>6.8.2 文档协作</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Confluence<br><span class="hljs-bullet">-</span> Notion<br><span class="hljs-bullet">-</span> Microsoft Teams<br></code></pre></td></tr></table></figure><h5 id="6-8-3-代码协作"><a href="#6-8-3-代码协作" class="headerlink" title="6.8.3 代码协作"></a>6.8.3 代码协作</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> GitLab<br><span class="hljs-bullet">-</span> GitHub<br><span class="hljs-bullet">-</span> Bitbucket<br></code></pre></td></tr></table></figure><h3 id="7-DevOps-和自动化"><a href="#7-DevOps-和自动化" class="headerlink" title="7. DevOps 和自动化"></a>7. DevOps 和自动化</h3><h4 id="7-1-配置管理"><a href="#7-1-配置管理" class="headerlink" title="7.1 配置管理"></a>7.1 配置管理</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Terraform<br><span class="hljs-bullet">-</span> SaltStack<br></code></pre></td></tr></table></figure><h4 id="7-2-容器编排"><a href="#7-2-容器编排" class="headerlink" title="7.2 容器编排"></a>7.2 容器编排</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Docker Swarm<br><span class="hljs-bullet">-</span> Apache Mesos<br></code></pre></td></tr></table></figure><h4 id="7-3-自动化测试"><a href="#7-3-自动化测试" class="headerlink" title="7.3 自动化测试"></a>7.3 自动化测试</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> TestNG (Java)<br><span class="hljs-bullet">-</span> Robot Framework<br></code></pre></td></tr></table></figure><h3 id="8-API-开发"><a href="#8-API-开发" class="headerlink" title="8. API 开发"></a>8. API 开发</h3><h4 id="8-1-RESTful-API"><a href="#8-1-RESTful-API" class="headerlink" title="8.1 RESTful API"></a>8.1 RESTful API</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Java: Jersey, Spring REST<br><span class="hljs-bullet">-</span> Python: Flask, Django REST Framework<br><span class="hljs-bullet">-</span> Node.js: Express.js<br></code></pre></td></tr></table></figure><h4 id="8-2-GraphQL"><a href="#8-2-GraphQL" class="headerlink" title="8.2 GraphQL"></a>8.2 GraphQL</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Apollo Server<br><span class="hljs-bullet">-</span> Prisma<br><span class="hljs-bullet">-</span> Relay<br></code></pre></td></tr></table></figure><h3 id="9-本地化和国际化"><a href="#9-本地化和国际化" class="headerlink" title="9. 本地化和国际化"></a>9. 本地化和国际化</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> i18n<br><span class="hljs-bullet">-</span> GNU gettext<br><span class="hljs-bullet">-</span><br><br> Unicode<br></code></pre></td></tr></table></figure><h3 id="10-网络协议"><a href="#10-网络协议" class="headerlink" title="10. 网络协议"></a>10. 网络协议</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> HTTP/1.1, HTTP/2<br><span class="hljs-bullet">-</span> TCP/IP<br><span class="hljs-bullet">-</span> WebSockets<br></code></pre></td></tr></table></figure><h3 id="16-分布式计算"><a href="#16-分布式计算" class="headerlink" title="16. 分布式计算"></a>16. 分布式计算</h3><h4 id="16-1-分布式系统架构"><a href="#16-1-分布式系统架构" class="headerlink" title="16.1 分布式系统架构"></a>16.1 分布式系统架构</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 微服务架构<br><span class="hljs-bullet">-</span> 分布式数据库架构<br><span class="hljs-bullet">-</span> 分布式文件系统: Hadoop HDFS, GlusterFS<br></code></pre></td></tr></table></figure><h4 id="16-2-分布式协调服务"><a href="#16-2-分布式协调服务" class="headerlink" title="16.2 分布式协调服务"></a>16.2 分布式协调服务</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Apache ZooKeeper<br><span class="hljs-bullet">-</span> etcd<br><span class="hljs-bullet">-</span> Consul<br></code></pre></td></tr></table></figure><h4 id="16-3-分布式计算框架"><a href="#16-3-分布式计算框架" class="headerlink" title="16.3 分布式计算框架"></a>16.3 分布式计算框架</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Apache Hadoop<br><span class="hljs-bullet">-</span> Apache Spark<br><span class="hljs-bullet">-</span> Apache Flink<br></code></pre></td></tr></table></figure><h4 id="16-4-负载均衡"><a href="#16-4-负载均衡" class="headerlink" title="16.4 负载均衡"></a>16.4 负载均衡</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 硬件负载均衡器: 如F5<br><span class="hljs-bullet">-</span> 软件负载均衡器: 如HAProxy, Nginx<br><span class="hljs-bullet">-</span> 服务发现和服务网格: Istio, Linkerd<br></code></pre></td></tr></table></figure><h4 id="16-5-分布式缓存"><a href="#16-5-分布式缓存" class="headerlink" title="16.5 分布式缓存"></a>16.5 分布式缓存</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Redis<br><span class="hljs-bullet">-</span> Memcached<br><span class="hljs-bullet">-</span> Apache Ignite<br></code></pre></td></tr></table></figure><h4 id="16-6-分布式消息系统"><a href="#16-6-分布式消息系统" class="headerlink" title="16.6 分布式消息系统"></a>16.6 分布式消息系统</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Apache Kafka<br><span class="hljs-bullet">-</span> RabbitMQ<br><span class="hljs-bullet">-</span> NATS<br></code></pre></td></tr></table></figure><h4 id="16-7-分布式事务"><a href="#16-7-分布式事务" class="headerlink" title="16.7 分布式事务"></a>16.7 分布式事务</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 两阶段提交 (2PC)<br><span class="hljs-bullet">-</span> 三阶段提交 (3PC)<br><span class="hljs-bullet">-</span> Saga 模式<br></code></pre></td></tr></table></figure><h4 id="16-8-分布式监控和跟踪"><a href="#16-8-分布式监控和跟踪" class="headerlink" title="16.8 分布式监控和跟踪"></a>16.8 分布式监控和跟踪</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Prometheus<br><span class="hljs-bullet">-</span> Grafana<br><span class="hljs-bullet">-</span> Jaeger (分布式跟踪)<br></code></pre></td></tr></table></figure><h4 id="16-9-分布式安全"><a href="#16-9-分布式安全" class="headerlink" title="16.9 分布式安全"></a>16.9 分布式安全</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> TLS/SSL 证书管理: 如Let&#x27;s Encrypt<br><span class="hljs-bullet">-</span> 分布式防火墙管理<br><span class="hljs-bullet">-</span> 访问控制列表 (ACL)<br></code></pre></td></tr></table></figure><h4 id="16-10-容错和灾难恢复"><a href="#16-10-容错和灾难恢复" class="headerlink" title="16.10 容错和灾难恢复"></a>16.10 容错和灾难恢复</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 副本和冗余<br><span class="hljs-bullet">-</span> 心跳检测和故障切换<br><span class="hljs-bullet">-</span> 备份和恢复策略<br></code></pre></td></tr></table></figure><h4 id="16-11-分布式一致性算法"><a href="#16-11-分布式一致性算法" class="headerlink" title="16.11 分布式一致性算法"></a>16.11 分布式一致性算法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Raft<br><span class="hljs-bullet">-</span> Paxos<br><span class="hljs-bullet">-</span> SWIM<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列笔记</title>
    <link href="/2023/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2023/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><strong>什么是MQ:</strong><br>本质上是一个队列，实现进程的之间的通信，一方生产消息，一方消费消息；<br><strong>MQ的作用</strong></p><ul><li><strong>流量削峰（服务器是有线程限制的，同一时刻过多的消息无法处理）</strong></li><li><strong>应用解耦（例如解耦三个服务同时依赖一个服务）</strong></li><li><strong>异步处理（发送完消息后做其他事情）</strong></li></ul><p><strong>MQ的选择</strong></p><ul><li><strong>Kafka：大公司，有日志收集需求的，大数据量场景使用</strong></li><li><strong>RockertMQ：高可靠性例如支付业务用（阿里系）</strong></li><li><strong>RabbitMQ：中小型，数据量少用</strong></li></ul><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307261201149.png" alt="image.png"><br>生产者：生产消息<br>交换机：可以对应多个队列（M-N）<br>消费者：从队列消费消息，一般是一个队列对应一个消费者，如果是多个的话，消费者会争抢一个消息<br>消费者与生产者和RabbitMQ的服务器连接都基于<strong>TCP</strong>，这部分连接被抽象为一个<strong>逻辑上</strong>的<strong>Connection</strong>，而一个Connection里由维护了许多<strong>信道（反复创建连接消耗资源)</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>ubuntu：18.04<br>rabbitmq：3.8.8<br>erlang：23.0.3（Ubuntu Bionic 64bit） </p><ul><li>先安erlang</li><li>再安RabbitMQ</li></ul><p><a href="https://www.erlang-solutions.com/resources/download.html">https://www.erlang-solutions.com/resources/download.html</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -i erlang.deb<br><br><span class="hljs-comment"># 更新https://img-blog.csdnimg.cn/img_convert/3939e3f90ccfa75fcedd2036b31b683e.png</span><br>apt-get update<br><br><span class="hljs-comment"># 下载包</span><br>wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.8/rabbitmq-server_3.8.8-1_all.deb<br><br><span class="hljs-comment"># 安装</span><br>dpkg -i rabbitmq-server_3.8.8-1_all.deb<br><br>service rabbitmq-server start <span class="hljs-comment"># 启动服务</span><br>service rabbitmq-server stop <span class="hljs-comment"># 停止服务</span><br>service rabbitmq-server restart <span class="hljs-comment"># 重启服务</span><br><br>开启面板插件<br>rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br><br>允许其他IP登陆<br>sudo vim /etc/rabbitmq/rabbitmq.conf<br>添加<br>loopback_users = none<br><br>修改密码<br>sudo rabbitmqctl change_password guest newpassword<br>端口是15672<br><br>添加用户<br>sudo rabbitmqctl add_user zs ----<br>sudo rabbitmqctl <span class="hljs-built_in">set</span> user_tags zs administrator<br>sudo rabbitmqctl set_permissions -p <span class="hljs-string">&quot;/&quot;</span> zs <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br></code></pre></td></tr></table></figure><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>使用java操控MQ</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-comment">// 定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 创建一个日志记录器实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Producer.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 在日志中记录一条信息，标识生产者开始运行</span><br>        logger.info(<span class="hljs-string">&quot;in&quot;</span>);<br><br>        <span class="hljs-comment">// 创建一个新的连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 设置RabbitMQ服务的地址，这里为&quot;&quot;</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 设置RabbitMQ服务的用户名，这里为&quot;zs&quot;</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;zs&quot;</span>);<br>        <span class="hljs-comment">// 设置RabbitMQ服务的密码，这里为&quot;cscsc&quot;</span><br>        connectionFactory.setPassword(<span class="hljs-string">&quot;cscsc&quot;</span>);<br><br>        <span class="hljs-comment">// 从连接工厂中获取一个新的连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">// 创建一个新的通道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 声明一个队列，如果该队列不存在，RabbitMQ将为我们创建一个新的队列</span><br>        <span class="hljs-comment">// 参数分别为：队列名称，是否持久化，是否排他，是否自动删除，其他属性</span><br>        AMQP.Queue.<span class="hljs-type">DeclareOk</span> <span class="hljs-variable">declareOk</span> <span class="hljs-operator">=</span> channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 定义要发布的消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world!&quot;</span>;<br>        <span class="hljs-comment">// 发布消息到指定的队列，参数分别为：交换器名称，队列名称，消息属性，消息体（这里是消息的字节表示形式）</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes());<br><br>        <span class="hljs-comment">// 关闭通道和连接</span><br>        channel.close();<br>        connection.close();<br><br>        <span class="hljs-comment">// 在日志中记录一条信息，标识生产者结束运行</span><br>        logger.info(<span class="hljs-string">&quot;out&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>排他 (Exclusive)<strong>：在创建队列（Queue）或者交换机（Exchange）时，可以设置这个队列或交换机的“排他性”。如果一个队列被声明为排他的，那么这个队列仅对</strong>首次</strong>声明它的连接（Connection）可见，并且这个队列在其连接断开的时候会自动被删除（无论是否设置了自动删除）。排他队列用于一个客户端同时发送和读取消息，但不允许其他客户端访问。</p><p>**消息属性 (Message Properties)**：每条消息都可以带有一个消息属性（properties），这是一个由键值对构成的数据结构，其中包含了一些关于消息的元信息。例如，我们可以在消息属性中设定消息的优先级、内容类型、内容编码、过期时间等。</p><p>在RabbitMQ中，消息属性是通过<code>BasicProperties</code>类来表示的，这个类包含了一些字段，如<code>contentType</code>（内容类型）、<code>contentEncoding</code>（内容编码）、<code>priority</code>（优先级）、<code>deliveryMode</code>（消息持久化）、<code>expiration</code>（过期时间）等。然后在发布消息时，这个属性对象可以作为<code>basicPublish</code>方法的一个参数。</p><p>例如，以下代码设置了消息的持久性和优先级：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties.Builder()<br>        .deliveryMode(<span class="hljs-number">2</span>) <span class="hljs-comment">// 持久化消息</span><br>        .priority(<span class="hljs-number">1</span>) <span class="hljs-comment">// 优先级</span><br>        .build();<br><br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, properties, message.getBytes());<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>deliveryMode(2)</code>设置了消息的持久化，这意味着即使RabbitMQ服务崩溃，这个消息也不会丢失。<code>priority(1)</code>设置了消息的优先级，当队列中积压了很多消息时，优先级高的消息将会优先被发送。</p><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-comment">// QUEUE_NAME定义我们的消息队列名称为&quot;hello&quot;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// logger是我们用来记录日志的工具，通过LoggerFactory类获取</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Producer.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 使用logger记录一条信息，表示生产者程序开始运行</span><br>        logger.info(<span class="hljs-string">&quot;in&quot;</span>);<br><br>        <span class="hljs-comment">// 创建一个ConnectionFactory，用于建立到RabbitMQ服务器的连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 设置RabbitMQ服务器的地址</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 设置连接RabbitMQ服务器的用户名</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;zs&quot;</span>);<br>        <span class="hljs-comment">// 设置连接RabbitMQ服务器的密码</span><br>        connectionFactory.setPassword(<span class="hljs-string">&quot;cczsc&quot;</span>);<br><br>        <span class="hljs-comment">// 使用ConnectionFactory建立到RabbitMQ服务器的连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">// 使用Connection创建一个新的Channel，通道是发送和接收消息的通道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 使用Channel声明一个队列，参数QUEUE_NAME指定队列名称</span><br>        <span class="hljs-comment">// 如果队列不存在，将会被创建；如果存在，将使用现有的队列</span><br>        <span class="hljs-comment">// 参数：队列名称，是否持久化，是否排他，是否自动删除，队列的其他属性</span><br>        AMQP.Queue.<span class="hljs-type">DeclareOk</span> <span class="hljs-variable">declareOk</span> <span class="hljs-operator">=</span> channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 创建一条消息，内容为&quot;hello world!&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world!&quot;</span>;<br>        <span class="hljs-comment">// 使用Channel将消息发布到指定的队列中</span><br>        <span class="hljs-comment">// 参数：交换器名称，队列名称，消息的属性，消息内容的字节数组形式</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes());<br><br>        <span class="hljs-comment">// 关闭Channel和Connection</span><br>        channel.close();<br>        connection.close();<br><br>        <span class="hljs-comment">// 使用logger记录一条信息，表示生产者程序运行结束</span><br>        logger.info(<span class="hljs-string">&quot;out&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><p>避免直接处理大量任务；将任务传递给消息队列，消息队列<strong>轮训（避免饥饿，避免一个任务被执行多次）</strong>的分发任务给执行消费线程。</p><p>工具类的抽取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMqConnectionFactory</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">get_connection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;----&quot;</span>);<br>        connectionFactory.setUsername(<span class="hljs-string">&quot;----&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;----&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Producer.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        logger.info(<span class="hljs-string">&quot;in&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> RabbitMqConnectionFactory.get_connection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        AMQP.Queue.<span class="hljs-type">DeclareOk</span> <span class="hljs-variable">declareOk</span> <span class="hljs-operator">=</span> channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world!&quot;</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;thre1&quot;</span>+Thread.currentThread().getName());<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                channel = RabbitMqConnectionFactory.get_connection().createChannel();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message)-&gt;&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>            &#125;;<br>            <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (consumerTag)-&gt;&#123;<br>                System.out.println(consumerTag);<br>            &#125;;<br>            <span class="hljs-keyword">try</span> &#123;<br>                channel.basicConsume(QUEUE_NAME,<span class="hljs-literal">true</span>,deliverCallback,cancelCallback);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实验结果：<br>消费者进程少时，每个线程轮流获取消息；<br>然而消费者线程很多时，带宽较少时可能出现连接错误</p><h2 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h2><p>自动应答：只要工作线程接收到线程就通知消息队列删除，容易造成消息丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第二个参数就代表了是否自动应答</span><br>channel.basicConsume(QUEUE_NAME,<span class="hljs-literal">true</span>,deliverCallback,cancelCallback);<br></code></pre></td></tr></table></figure><p>手动应答：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//肯定确认 支持批量应答（true）</span><br>channel.basicAck<br><span class="hljs-comment">//否定确认</span><br>channel.basicNack<br>channel.basicReject<br></code></pre></td></tr></table></figure><h2 id="两种持久化"><a href="#两种持久化" class="headerlink" title="两种持久化"></a>两种持久化</h2><p>消息持久化和队列持久化是两个概念，用于确保消息和队列的持久性，以防止数据丢失或应用程序重启后的数据恢复。</p><ol><li>消息持久化：<br>消息持久化是指在发送消息时，将消息标记为持久化。这样，即使消息代理（例如RabbitMQ）在消息发送到队列之前崩溃，消息也会被保存在磁盘上，确保不会丢失。持久化的消息会在消息代理重启后恢复并重新发送到相应的队列。这是通过将消息的<code>deliveryMode</code>设置为2来实现的。非持久化的消息的<code>deliveryMode</code>设置为1，如果消息代理在消息到达队列之前崩溃，非持久化消息会丢失。</li></ol><p>示例代码中，在发送消息时设置消息的<code>deliveryMode</code>为<code>PERSISTENT</code>即可实现消息持久化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());<br></code></pre></td></tr></table></figure><ol start="2"><li>队列持久化：<br>队列持久化是指在声明队列时，将队列标记为持久化。这样，即使消息代理在重启后，队列的定义也会被保留下来，不会丢失。如果队列没有被标记为持久化，在消息代理重启后，队列会被删除，且其中的消息也会丢失。要创建一个持久化的队列，需要将队列的<code>durable</code>参数设置为<code>true</code>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>仅将队列标记为持久化并<strong>不能保证</strong>其中的消息也是持久化的，消息是否持久化还需要在发送消息时设置消息的<code>deliveryMode</code>为<code>PERSISTENT</code>，如前面的消息持久化示例中所示。<br>消息持久化确保消息在<strong>发送时不会丢失</strong></p><h2 id="不公平分发"><a href="#不公平分发" class="headerlink" title="不公平分发"></a>不公平分发</h2><p>轮训的方式保证了消费者不会饥饿，但某些需要快速响应的场景可能会由于一部分消费者进程过慢而过慢；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不公平分发 设置为1时能者多劳</span><br>channel.basicQos(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 预取值 当某个新道的消息大于预取值时 则该信道不接收消息</span><br><span class="hljs-comment">// 给处理速度慢的少消息</span><br><span class="hljs-comment">// 给处理速度快的多消息</span><br><span class="hljs-comment">// 预取值不是说一定要把某个信道填满</span><br>channel.basicQos(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h2 id="发布确认"><a href="#发布确认" class="headerlink" title="发布确认"></a>发布确认</h2><p>通过将消息以及队列设置了持久化之后，消息还是有可能丢失，例如在RabbitMQ服务器刚接收到消息就发生了宕机，消息没有被持久化；<br>通过开启发布确认功能可以确保消息被持久化</p><h2 id="单次确认"><a href="#单次确认" class="headerlink" title="单次确认"></a>单次确认</h2><p>发一次确认一次，如果某个消息被卡住了，那么在超时以前就一直卡着</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglePublishConfirmExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建连接和通道</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>             <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel()) &#123;<br>            <span class="hljs-comment">// 声明队列 </span><br>            channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>            <span class="hljs-comment">// 开启发布确认模式 </span><br>            channel.confirmSelect();<br><br>            <span class="hljs-comment">// 消息内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, RabbitMQ!&quot;</span>;<br><br>            <span class="hljs-comment">// 发布消息到队列 </span><br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());<br><br>            <span class="hljs-comment">// 发一条确认一条</span><br>            <span class="hljs-keyword">if</span> (channel.waitForConfirms()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Message sent successfully.&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Message sending failed.&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="批量确认"><a href="#批量确认" class="headerlink" title="批量确认"></a>批量确认</h2><p>一次发一批，降低了网络IO，同样在一批确认以前不会发送下一批数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchPublishConfirmExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;<br>        <span class="hljs-comment">// 创建连接和通道</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>             <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel()) &#123;<br>            <span class="hljs-comment">// 声明队列 </span><br>            channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>            <span class="hljs-comment">// 开启发布确认模式 </span><br>            channel.confirmSelect();<br><br>            <span class="hljs-comment">// 发布消息的数量</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>            <span class="hljs-comment">// 消息内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, RabbitMQ!&quot;</span>;<br>            List&lt;Long&gt; deliveryTags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>            <span class="hljs-comment">// 批量发布消息到队列</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; batchSize; i++) &#123;<br>                deliveryTags.add(channel.getNextPublishSeqNo());<br>                channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());<br>            &#125;<br>            <br>            <span class="hljs-comment">// 发送一批再确认</span><br>            <span class="hljs-keyword">if</span> (channel.waitForConfirms()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Batch message sent successfully.&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Batch message sending failed.&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="异步确认"><a href="#异步确认" class="headerlink" title="异步确认"></a>异步确认</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsynchronousPublisher</span> &#123;<br><br>    <span class="hljs-comment">// 定义exchange、routing key、queue的名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange_name&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_key&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue_name&quot;</span>;<br><br>    <span class="hljs-comment">// RabbitMQ的频道和消息确认集合</span><br>    <span class="hljs-keyword">private</span> Channel channel;<br>    <span class="hljs-keyword">private</span> ConcurrentNavigableMap&lt;Long, String&gt; outstandingConfirms = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentSkipListMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AsynchronousPublisher</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 创建连接工厂并设置RabbitMQ服务器地址，用户名和密码</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;123.123.123.123&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;321321&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;123123&quot;</span>);<br>        <br>        <span class="hljs-comment">// 创建连接和频道</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        channel = connection.createChannel();<br><br>        <span class="hljs-comment">// 声明exchange、queue以及它们之间的binding</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, <span class="hljs-string">&quot;direct&quot;</span>);<br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);<br><br>        <span class="hljs-comment">// 将channel设置为publisher confirm模式</span><br>        channel.confirmSelect();<br><br>        <span class="hljs-comment">// 添加一个publisher confirm的listener</span><br>        <span class="hljs-comment">// 当收到RabbitMQ的确认消息时，从未确认的消息集合中移除相应的消息</span><br>        channel.addConfirmListener((sequenceNumber, multiple) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (multiple) &#123;<br>                outstandingConfirms.headMap(sequenceNumber, <span class="hljs-literal">true</span>).clear();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                outstandingConfirms.remove(sequenceNumber);<br>            &#125;<br>        &#125;, (sequenceNumber, multiple) -&gt; &#123;<br>            <span class="hljs-comment">// 当收到RabbitMQ的未确认消息时，从未确认的消息集合中移除相应的消息，并打印出警告信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> outstandingConfirms.get(sequenceNumber);<br>            System.out.println(<span class="hljs-string">&quot;Message with body &quot;</span> + body + <span class="hljs-string">&quot; has been nack-ed. Sequence number: &quot;</span> + sequenceNumber);<br>            <span class="hljs-keyword">if</span> (multiple) &#123;<br>                outstandingConfirms.headMap(sequenceNumber, <span class="hljs-literal">true</span>).clear();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                outstandingConfirms.remove(sequenceNumber);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 添加一个ReturnListener，当消息不能被正确路由时，RabbitMQ会将消息返回给生产者</span><br>        channel.addReturnListener((replyCode, replyText, exchange, routingKey, properties, body) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Message returned: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishMessage</span><span class="hljs-params">(String messageBody)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 发布消息前，获取下一个消息序列号</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">nextSeqNo</span> <span class="hljs-operator">=</span> channel.getNextPublishSeqNo();<br>        <span class="hljs-comment">// 发布消息，并将消息添加到未确认的消息集合中</span><br>        channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, <span class="hljs-literal">true</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, messageBody.getBytes());<br>        outstandingConfirms.put(nextSeqNo, messageBody);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建publisher，并发送100000条测试消息</span><br>            <span class="hljs-type">AsynchronousPublisher</span> <span class="hljs-variable">publisher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsynchronousPublisher</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>                publisher.publishMessage(<span class="hljs-string">&quot;Message &quot;</span> + i);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span>(IOException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>RabbitMQ从来不是直接把消息传递给队列，而是传递给交换机，交换机再决定传递给哪些队列，或者丢弃。<br>交换机有四种模式：</p><ul><li>直接模式（路由模式）</li><li>主题模式</li><li>标题模式（不常用）</li><li>扇出模式（发布订阅）</li><li>默认类型：用空字符串表示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一个参数就是交换机名称，当交换机不为默认交换机时，第二个参数其实就是路由key</span><br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());<br></code></pre></td></tr></table></figure><p>临<strong>时队列的创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不要创建名字，断开连接后队列会删除</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> channel.queueDedare ().getQueue();<br></code></pre></td></tr></table></figure><p><strong>交换机与队列的绑定</strong></p><ul><li>一个交换机可以与多个队列绑定</li><li>交换机通过路由key确定是哪个队列</li></ul><h2 id="发布订阅模式（fanout）"><a href="#发布订阅模式（fanout）" class="headerlink" title="发布订阅模式（fanout）"></a>发布订阅模式（fanout）</h2><p>就是广播模式<br>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer_fanout</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHANGE_NAME</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;MY_CHANGE&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建一个连接</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> RabbitMqConnectionFactory.get_connection();<br>            <span class="hljs-comment">//创建一个信道</span><br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>            <span class="hljs-comment">//创建一个队列</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br>            channel.queueBind(queueName,CHANGE_NAME,<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (tag,message)-&gt;&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>            &#125;;<br>            <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (tag)-&gt;&#123;<br>                System.out.println(tag);<br>            &#125;;<br>            channel.basicConsume(queueName,<span class="hljs-literal">true</span>,deliverCallback,cancelCallback);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer_fanout</span>());<br>        thread1.start();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer_fanout</span>());<br>        thread2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer_fanout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHANGE_NAME</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;MY_CHANGE&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> RabbitMqConnectionFactory.get_connection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        channel.exchangeDeclare(CHANGE_NAME,<span class="hljs-string">&quot;fanout&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.next();<br>            <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;EOF&quot;</span>)<br>                <span class="hljs-keyword">break</span>;<br>            channel.basicPublish(CHANGE_NAME,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-literal">null</span>,s.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="直接交换机（路由模式）（diret-）"><a href="#直接交换机（路由模式）（diret-）" class="headerlink" title="直接交换机（路由模式）（diret ）"></a>直接交换机（路由模式）（diret ）</h2><p>在创建交换机时指定为Direct，发送给指定的队</p><h2 id="主题交换机"><a href="#主题交换机" class="headerlink" title="主题交换机"></a>主题交换机</h2><p>更加灵活的消息传递机制，在路由key中引入了正则匹配</p><ul><li>topic交换机要求路由key的格式为x.x.x.x</li><li>*代表一个x</li><li>#代表一个或多个x</li></ul><p>使用主题交换机可以实现单独给某个队发消息，或者是给一些队发消息</p><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p>因为某些原因消息没有被消费掉，这些消息组成的队列就称为死信队列<br>死信的来源</p><ul><li>消息超过最长存活时间</li><li>队列达到最大长度</li><li>消息被拒绝（并且重入队设置为false）</li></ul><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer_deadQue</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">normal_exchange</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">dead_exchange</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">normal_queue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_queue &quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">dead_queue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_queue &quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> RabbitMqConnectionFactory.get_connection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        channel.exchangeDeclare(normal_exchange, BuiltinExchangeType.DIRECT);<br>        channel.exchangeDeclare(dead_exchange,BuiltinExchangeType.DIRECT);<br>        Map&lt;String,Object&gt; arg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        arg.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,dead_exchange);<br>        arg.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>);<br>        channel.queueDeclare(normal_queue,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,arg);<br>        channel.queueDeclare(dead_queue,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>        channel.queueBind(normal_queue,normal_exchange,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        channel.queueBind(dead_queue,dead_exchange,<span class="hljs-string">&quot;list&quot;</span>);<br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (a,b)-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b.getBody(),<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;A等待消息---&quot;</span>);<br>        channel.basicConsume(normal_queue,<span class="hljs-literal">true</span>,deliverCallback,consumerTag-&gt;&#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer_deadQue</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">normal_exchange</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">dead_exchange</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">normal_queue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">dead_queue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> RabbitMqConnectionFactory.get_connection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;10000&quot;</span>).build();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> i+<span class="hljs-string">&quot;&quot;</span>;<br>            channel.basicPublish(normal_exchange,<span class="hljs-string">&quot;zhangsan&quot;</span>,properties,info.getBytes());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>死信消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer_consumDeadQueue</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">dead_queue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_queue &quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> RabbitMqConnectionFactory.get_connection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (a,b)-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b.getBody(),<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;A等待消息---&quot;</span>);<br>        channel.basicConsume(dead_queue,<span class="hljs-literal">true</span>,deliverCallback,consumerTag-&gt;&#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p>一种特殊的死信队列，当死信条件被限制为TTL时，就是一种特殊的延时队列；</p><h1 id="RabbitMQ-via-SpringBoot"><a href="#RabbitMQ-via-SpringBoot" class="headerlink" title="RabbitMQ via SpringBoot"></a>RabbitMQ via SpringBoot</h1><ul><li><p>坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-comment">&lt;!-- Spring Boot集成RabbitMQ依赖项 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-comment">&lt;!-- Spring Boot集成Web依赖项 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">spring<span class="hljs-punctuation">:</span><br>  #配置rabbitMq 服务器<br>  rabbitmq<span class="hljs-punctuation">:</span><br>    host<span class="hljs-punctuation">:</span> ----<br>    port<span class="hljs-punctuation">:</span> <span class="hljs-number">5672</span><br>    username<span class="hljs-punctuation">:</span> ----<br>    password<span class="hljs-punctuation">:</span> ----<br>    #虚拟host 可以不设置<span class="hljs-punctuation">,</span>使用server默认host<br>    #virtual-host<span class="hljs-punctuation">:</span> zHost<br><br></code></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bootTopicExchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bootQueue&quot;</span>;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.rabbitmq.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.rabbitmq.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.rabbitmq.host&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String host;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.rabbitmq.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.rabbitmq.virtual-host&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String virtualHost;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  创建一个交换机</span><br><span class="hljs-comment">     *  ExchangeBuilder可以建立四种不同的交换机（直接，主题，订阅发布，头模式）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(&quot;bootExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> Exchange <span class="hljs-title function_">exchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="hljs-literal">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;bootQueue&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindQueueExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;bootQueue&quot;)</span> Queue queue,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@Qualifier(&quot;bootExchange&quot;)</span> Exchange exchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;boot.#&quot;</span>).noargs();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测了一下不加这个Bean，发送100000条数据耗时是一致的</span><br><span class="hljs-comment">     * 开启确认模式后250/s一条</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CachingConnectionFactory <span class="hljs-title function_">connectionFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CachingConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CachingConnectionFactory</span>();<br>        connectionFactory.setUsername(username);<br>        connectionFactory.setPassword(password);<br>        connectionFactory.setHost(host);<br>        connectionFactory.setPort(port);<br>        connectionFactory.setVirtualHost(virtualHost);<br>        <span class="hljs-comment">//开启确认Confirm模式</span><br>        connectionFactory.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED);<br>        <span class="hljs-comment">//开启回退Return模式</span><br>        connectionFactory.setPublisherReturns(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> connectionFactory;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>简单消息消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQStartListener</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Listen</span><span class="hljs-params">(Message message)</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span>  System.currentTimeMillis();<br>        <span class="hljs-comment">//System.out.println((end-start)/1000);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>另外一种消息消费（慢）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSend</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)<br>    rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE_NAME,<span class="hljs-string">&quot;boot.error&quot;</span>,<span class="hljs-string">&quot;Test&quot;</span>);<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println((end-start)/<span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>        rabbitTemplate.receiveAndConvert(RabbitMQConfig.QUEUE_NAME);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="消息可靠投递"><a href="#消息可靠投递" class="headerlink" title="消息可靠投递"></a>消息可靠投递</h2><ul><li><p>confirm（确认模式）保证消息成功发送到交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息可靠投递之 确认模式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InterruptedException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendConfirm</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//需要在RabbitMQ配置文件中开启确认模式</span><br>        rabbitTemplate.setConfirmCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             *</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> correlationData 相关配置信息（在发送消息的时候设置）</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> b 交换机是否接收到信息</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> s 失败原因</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> b, String s)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;confirm方法被执行了，b is &quot;</span>+b+<span class="hljs-string">&quot; s is &quot;</span>+s);<br>            &#125;<br>        &#125;);<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE_NAME,<span class="hljs-string">&quot;boot.error&quot;</span>,<span class="hljs-string">&quot;Test&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;in&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>return（回退模式） （保证消息成功从交换机路由到队）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息可靠投递之 回退模式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReturn</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//首先确保配置文件开启了返回模式</span><br>        <span class="hljs-comment">//交换机默认会把路由失败的消息丢弃，希望触发回调需要改变模式</span><br>        rabbitTemplate.setMandatory(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//不推荐使用setReturnCallback</span><br>        rabbitTemplate.setReturnsCallback((message)-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;路由失败，回调&quot;</span>);<br>            System.out.println(message);<br>        &#125;);<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE_NAME,<span class="hljs-string">&quot;boot.error&quot;</span>,<span class="hljs-string">&quot;Test&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>Consumer Ack 消费端收到消息后的确认方式</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC并发</title>
    <link href="/2023/07/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/07/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JUC是什么"><a href="#JUC是什么" class="headerlink" title="JUC是什么"></a>JUC是什么</h1><p>Java多线程的一个工具包（进程是资源分配的最小单位，线程是最小运行单位）</p><ul><li>JVM的锁基于管程对象实现，持有锁其实就是持有管程对象。</li><li>当主线程结束时，如果没有用户线程存活时，会结束所有守护线程（即使守护线程是个死循环）</li></ul><h1 id="LOCK-amp-SYNCHRONIZED"><a href="#LOCK-amp-SYNCHRONIZED" class="headerlink" title="LOCK &amp; SYNCHRONIZED"></a>LOCK &amp; SYNCHRONIZED</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp">package JUC;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankAccount</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ReentrantLock</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BankAccount</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">void</span> <span class="hljs-title">transferSync</span><span class="hljs-params">(BankAccount targetAccount, <span class="hljs-type">double</span> amount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.balance &gt;= amount) &#123;<br>            <span class="hljs-keyword">this</span>.balance -= amount;<br>            targetAccount.balance += amount;<br>            <span class="hljs-comment">//System.out.println(&quot;使用Synchronized关键字，转账成功，转账金额：&quot; + amount);</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//System.out.println(&quot;使用Synchronized关键字，转账失败，余额不足&quot;);</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-built_in">transferLock</span>(BankAccount targetAccount, <span class="hljs-type">double</span> amount) &#123;<br>        lock.<span class="hljs-built_in">lock</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.balance &gt;= amount) &#123;<br>                <span class="hljs-keyword">this</span>.balance -= amount;<br>                targetAccount.balance += amount;<br>                <span class="hljs-comment">//System.out.println(&quot;使用Lock接口实现的锁，转账成功，转账金额：&quot; + amount);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//System.out.println(&quot;使用Lock接口实现的锁，转账失败，余额不足&quot;);</span><br>            &#125;<br>        &#125; finally &#123;<br>            lock.<span class="hljs-built_in">unlock</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BankAccount account1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BankAccount</span>(<span class="hljs-number">1000</span>);<br>        BankAccount account2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BankAccount</span>(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-type">long</span> startTimeSync = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">Thread</span>(() -&gt; &#123;<br>                account1.<span class="hljs-built_in">transferSync</span>(account2, <span class="hljs-number">10</span>);<br>            &#125;).<span class="hljs-built_in">start</span>();<br>        &#125;<br>        <span class="hljs-type">long</span> endTimeSync = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>        account1.balance=<span class="hljs-number">1000</span>;<br>        account2.balance=<span class="hljs-number">2000</span>;<br>        <span class="hljs-type">long</span> startTimeLock = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">Thread</span>(() -&gt; &#123;<br>                account1.<span class="hljs-built_in">transferLock</span>(account2, <span class="hljs-number">10</span>);<br>            &#125;).<span class="hljs-built_in">start</span>();<br>        &#125;<br>        <span class="hljs-type">long</span> endTimeLock = System.<span class="hljs-built_in">currentTimeMillis</span>();<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;使用Synchronized关键字，总耗时：&quot;</span> + (endTimeSync - startTimeSync) + <span class="hljs-string">&quot;ms&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;使用Lock接口实现的锁，总耗时：&quot;</span> + (endTimeLock - startTimeLock) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Lock发生异常时需要在Finally中手动释放锁，synchronized不需要</li><li>Lock可以让等待锁的线程中断，synchronized不行</li><li>Lock可以知道有没有成功获取到锁，synchronized不行</li><li>竞争不多的话用synchronized</li></ul><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>令线程按照既定的顺序进行创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JUC;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Compute</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">sol</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span>(num!=<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">this</span>.wait();<br>        System.out.println(Thread.currentThread().getName()+num);<br>        num--;<br>        <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  InterruptedException&#123;<br>        <span class="hljs-keyword">if</span>(num!=<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">this</span>.wait();<br>        System.out.println(num);<br>        num++;<br>        <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Compute</span> <span class="hljs-variable">compute</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compute</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    compute.add();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    compute.sol();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Share</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.num != <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">this</span>.condition.await();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + num);<br>            num++;<br>            <span class="hljs-built_in">this</span>.condition.signalAll();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dec</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  InterruptedException&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.num != <span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">this</span>.condition.await();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + num);<br>            num--;<br>            <span class="hljs-built_in">this</span>.condition.signalAll();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Share</span> <span class="hljs-variable">share</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Share</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                System.out.println();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.add();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Share</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition1</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition2</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition3</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print_5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(tag!=<span class="hljs-number">1</span>)<br>                lock.wait();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;print 5&quot;</span>+<span class="hljs-string">&quot; &quot;</span>+i);<br>            tag = <span class="hljs-number">2</span>;<br>            condition2.signal();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print_10</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(tag!=<span class="hljs-number">2</span>)<br>                lock.wait();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;print 10&quot;</span>+<span class="hljs-string">&quot; &quot;</span>+i);<br>            tag = <span class="hljs-number">3</span>;<br>            condition3.signal();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print_15</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(tag!=<span class="hljs-number">3</span>)<br>                lock.wait();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">15</span>;i++)<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;print 15&quot;</span>+<span class="hljs-string">&quot; &quot;</span>+i);<br>            tag = <span class="hljs-number">1</span>;<br>            condition1.signal();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Share</span> <span class="hljs-variable">share</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Share</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                share.print_5();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                share.print_10();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>        <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                share.print_15();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;CC&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="集合的线程安全"><a href="#集合的线程安全" class="headerlink" title="集合的线程安全"></a>集合的线程安全</h1><h2 id="list线程安全问题"><a href="#list线程安全问题" class="headerlink" title="list线程安全问题"></a>list线程安全问题</h2><p>并发写&#x2F;读出现异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Share</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                list.add(<span class="hljs-string">&quot;&quot;</span>+ finalI);<br>                System.out.println(list);<br>            &#125;, <span class="hljs-string">&quot;&quot;</span>+i).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用vector解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;String&gt;();<br></code></pre></td></tr></table></figure><p>使用collections工具类转化为线程安全的容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Collections.synchronizedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;());<br></code></pre></td></tr></table></figure><p>使用CopyOnWriteArrayList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//写是独立的</span><br><span class="hljs-comment">//每次写开一个新的空间，写完后与之前的合并</span><br></code></pre></td></tr></table></figure><h2 id="map，set线程安全问题"><a href="#map，set线程安全问题" class="headerlink" title="map，set线程安全问题"></a>map，set线程安全问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h1 id="多线程锁"><a href="#多线程锁" class="headerlink" title="多线程锁"></a>多线程锁</h1><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307191126773.png" alt="image.png"></p><h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p>使用<strong>ReentrantLock默认创建的是非公平锁，会出现线程饿死的情况。</strong><br><strong>公平锁效率低一些，但是不会导致线程饿死；非公平锁效率高，但可能导致线程饿死。</strong></p><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>又叫递归锁，方法本身可以进行递归调用；假如锁不是可重入的，那么在外层方法已经加锁的状态下，是无法继续进入下一个状态的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>     <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>)<br>         <span class="hljs-keyword">return</span>;<br>     System.out.println(n);<br>     dfs(n-<span class="hljs-number">1</span>);<br>     <span class="hljs-keyword">return</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>1.请求等待2.互斥3.不合理的执行顺序<br>如何发现死锁：使用jps + jstack</p><h1 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Share</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(Thread.currentThread().getName());<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><br>        FutureTask&lt;Integer&gt; futureTask1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Share</span>());<br>        FutureTask&lt;Integer&gt; futureTask2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>        &#125;);<br>        futureTask1.run();<br>        futureTask2.run();<br>        System.out.println(futureTask1.get());<br>        System.out.println(futureTask1.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JUC工具类"><a href="#JUC工具类" class="headerlink" title="JUC工具类"></a>JUC工具类</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>通过设置一个计数器，使得在该技术器为零之前可以阻塞后续的任务；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Share</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//模拟七个线程并发执行，主线程为第七个线程，需要在六个线程执行结束后才执行</span><br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">6</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName()+ finalI+<span class="hljs-string">&quot;执行完毕&quot;</span>);<br>                countDownLatch.countDown();<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>        countDownLatch.await();<br>        System.out.println(<span class="hljs-string">&quot;任务完成&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">6</span>;i++)&#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Job</span>(countDownLatch));<br>            thread.start();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Job</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    CountDownLatch countDownLatch;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Job</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> &#123;<br>        <span class="hljs-built_in">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Job &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;is run!&quot;</span>);<br>        <span class="hljs-built_in">this</span>.countDownLatch.countDown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>设置一个终极线程，在其他线程完成之前一直阻塞；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//循环栅栏，在达到给定的线程完成之前，一直阻塞，达到状态后执行传入的线程</span><br>        <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cyclicBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">7</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;目标线程完成&quot;</span>);<br>        &#125;));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">7</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;线程&quot;</span>+ finalI +<span class="hljs-string">&quot;执行中&quot;</span>);<br>                    cyclicBarrier.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>给定某种资源，只有占有资源的线程才可以继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Text</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">6</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire();<br>                    System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;抢到了资源&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>                    semaphore.release();<br>                    System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;释放了资源&quot;</span>);<br><br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><p>乐观锁：维护一个版本号，并发进程如果发现数据版本号不一致就会提交失败<br>悲观锁：串行执行，抢到资源就上锁<br>表锁：整张表都被上锁<br>行锁：表中的某一行被上锁（读锁，写锁）<br>加入所有线程只获取读锁不会导致死锁的发生；但如果存在两个线程尝试同时获取读写锁，那有可能会导致死锁的发生；</p><p><strong>读写锁本质上就是允许并发读，而不允读写，写写并发。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建读写锁</span><br><span class="hljs-comment">//2.在读和写操作上分别上锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;Integer,Integer&gt;map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">lk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Integer i)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lk.writeLock().lock();<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        map.put(i,i);<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;is  写 &quot;</span>+i);<br>        lk.writeLock().unlock();<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">gt</span><span class="hljs-params">(Integer i)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lk.readLock().lock();<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;is 读&quot;</span>+i+map.get(i));<br>        lk.readLock().unlock();<br>        <span class="hljs-keyword">return</span> map.get(i);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        test.map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    test.add(finalI);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;,finalI+<span class="hljs-string">&quot;&quot;</span>).start();<br>        &#125;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    test.gt(finalI);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;,finalI+<span class="hljs-string">&quot;&quot;</span>).start();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读写锁的演变过程：</p><ul><li>多个资源并发操作，导致操作顺序十分混乱</li><li>提出Sychronized，ReentrantLook等解决（1）的问题；但某些操作不能共享，例如读</li><li>提出读写锁，允许读共享；但有可能造成饥饿的问题（一直读，一直写），写的时候不允许读</li></ul><h2 id="锁降级"><a href="#锁降级" class="headerlink" title="锁降级"></a>锁降级</h2><p>写锁-&gt; 读锁，解决写操作时不能读的问题<br>获取写锁-&gt;获取读锁-&gt;释放写锁-&gt;释放读锁<br>读锁不能升级为写锁</p><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p>有利于多线程环境的数据共享。<br>阻塞队列的实现类主要有ArrayBlockingQueue，以及LinkedBlockingQueue<br>阻塞队列常用的方法为add,remove  （失败抛异常）；put,take（不满足则阻塞）<br>特殊值<strong>自动</strong>完成了异常处理<br><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307191123056.png" alt="image.png"></p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>接口结构<br><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307191123561.png" alt="image.png"><br>使用Excutors指定线程池的类型，类型有三种</p><ul><li>1对N结构（一个线程池对应N个线程）ExcutorServise ex &#x3D; Excutors.newFixedThreadPool(int N)</li><li>1对1结构 ExcutorServise ex &#x3D; Excutors.newSingleThreadPool()</li><li>自动扩容 ExcutorServise ex &#x3D; Excutors.newCachedThreadPool()</li></ul><p>无论使用哪个方法创建线程池，都调用了ThreadPoolExecutor来创建线程，它有七个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Te</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">100</span>; j++) &#123;<br>            CopyOnWriteArraySet&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>            <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                executorService.execute(() -&gt; &#123;<br>                    <span class="hljs-comment">//System.out.println(Thread.currentThread().getName());</span><br>                    strings.add(Thread.currentThread().getName());<br>                &#125;);<br>            &#125;<br>            executorService.shutdown();<br>            <span class="hljs-keyword">while</span> (!executorService.isTerminated()) &#123;<br>                <span class="hljs-comment">// 等待所有任务完成</span><br>            &#125;<br>            System.out.println(strings.size());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程池的7个参数"><a href="#线程池的7个参数" class="headerlink" title="线程池的7个参数"></a>线程池的7个参数</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307191123692.png" alt="image.png"></p><h2 id="线程池工作流程"><a href="#线程池工作流程" class="headerlink" title="线程池工作流程"></a>线程池工作流程</h2><ul><li>创建线程池后并不会直接创建线程</li><li>当excute方法被执行时开始创建线程</li><li>首先在常驻池里使用和创建</li><li>如果常驻池满又来了新线程，则进入阻塞队列</li><li>如果阻塞队列和常池都满，则创建新的线程，数量小于最大池范围</li><li>如果全满，则执行拒绝策略</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307191123326.png" alt="image.png"></p><ul><li>AbortPolicy：抛异常</li><li>CallerRunsPolicy：将某些人物回退给调用者</li><li>DiscardOlderstPolicy：抛弃队列等待最久的人物</li><li>DiscardPolicy：不处理也不抛异常（推荐）</li></ul><h1 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                <span class="hljs-number">2</span>,<br>                <span class="hljs-number">5</span>,<br>                <span class="hljs-number">2L</span>,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>    &#125;<br></code></pre></td></tr></table></figure><p>一般搞个静态工厂</p><h1 id="Fork框架"><a href="#Fork框架" class="headerlink" title="Fork框架"></a>Fork框架</h1><p><del>分治？埋了吧</del></p><h1 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h1><p>阻塞使用异步回调的线程，不妨碍其他线程继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//没有返回值的异步回调</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Te</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                completableFuture.get();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;).start();<br>        System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//有返回值的异步回调</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Te</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;in&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;out&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;WORK&quot;</span>;<br>        &#125;);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                completableFuture.whenComplete((res,exception)-&gt;&#123;<br>                    System.out.println(res);<br>                &#125;).get();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;).start();<br>        System.out.println(<span class="hljs-string">&quot;OtherTask&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聚合搜索</title>
    <link href="/2023/07/14/csearch/"/>
    <url>/2023/07/14/csearch/</url>
    
    <content type="html"><![CDATA[<h1 id="前端初始化"><a href="#前端初始化" class="headerlink" title="前端初始化"></a>前端初始化</h1><p>1.下载webstorm<br>2.进入Ant Design of Vue官网<br>   2.1 安装nodejs<br>   2.2 安装脚手架工具 (走完)<br>   3.3 创建项目<br><strong>组件选择</strong><br>◉ Babel  –默认<br>◉ TypeScript –TS代码校验<br>◯ Progressive Web App (PWA) Support –提升移动端体验<br>❯◉ Router 一个路由框架<br>◯ Vuex<br>◯ CSS Pre-processors<br>◉ Linter &#x2F; Formatter –默认<br>◯ Unit Testing<br>◯ E2E Testing<br>?<strong>Choose a version of Vue.js that you want to start the project with</strong>3.x<br>?**Use class-style component syntax?**No<br>?**Use Babel alongside TypeScript (required for modern mode, auto-detected **<br>**polyfills, transpiling JSX)?**Yes<br>?**Use history mode for router? (Requires proper server setup for index fallback **<br>**in production)**No<br>?**Pick a linter &#x2F; formatter config:**Prettier<br>?**Pick additional lint features:**Lint on save<br>?**Where do you prefer placing config for Babel, ESLint, etc.?**In dedicated<br>config files<br>?<strong>Save this as a preset for future projects?</strong>(y&#x2F;N) n</p><p>3.使用webstorm打开项目，在终端内安装组件库</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment"># main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><span class="hljs-comment"># 加后缀 App--App.vue</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Antd <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ant-design-vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;ant-design-vue/dist/antd.css&quot;</span>;<br>createApp(App).use(Antd).use(router).mount(<span class="hljs-string">&quot;<span class="hljs-subst">#app</span>&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="后端初始化"><a href="#后端初始化" class="headerlink" title="后端初始化"></a>后端初始化</h1><p>使用万能模版，修改数据库连接，创建表</p><h1 id="前端搜索页面开发"><a href="#前端搜索页面开发" class="headerlink" title="前端搜索页面开发"></a>前端搜索页面开发</h1><p><strong>准备</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-number">1</span>.删除多余的页面，保留一个主页面并修改名称<br><span class="hljs-number">2</span>.在主页面中删除scrpit中的文件<br><span class="hljs-number">3</span>.在路由（<span class="hljs-keyword">index</span>.js）中修改路径<span class="hljs-keyword">const</span> routes: <span class="hljs-keyword">Array</span>&lt;RouteRecordRaw&gt; <br>   删除多余路由<br><span class="hljs-number">4</span>.在APP的&lt;template&gt;标签中删除多余标签 <br></code></pre></td></tr></table></figure><p><strong>正式开发</strong></p><ul><li>需要什么：<strong>一个搜索框，一个tap切换栏（不同tap栏下展示的东西不一样）</strong></li></ul><p><strong>搜索+tag栏</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;index-page&quot;&gt;<br>    &lt;a-input-search<br>        /*这是一个Vue3特有的语法，用于双向绑定数据。将searchText变量的值绑定到输入框中<br>    的 &quot;aria-valuemax&quot; 属性上，以实现输入框中输入值的实时更新。<br>  */<br>      v-model:value=&quot;searchText&quot;<br>      placeholder=&quot;Input search text!&quot;<br>      enter-button=&quot;Search&quot;<br>      size=&quot;large&quot;<br>      @search=&quot;onSearch&quot;<br>    /&gt;<br>    &lt;a-tabs v-model:activeKey=&quot;activeKey&quot;&gt;<br>      &lt;a-tab-pane key=&quot;post&quot; tab=&quot;文章&quot;&gt;<br>        &lt;PosLlist /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=&quot;fig&quot; tab=&quot;图片&quot;&gt;<br>        &lt;FigList /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=&quot;user&quot; tab=&quot;用户&quot;&gt;<br>        &lt;UserList /&gt;<br>      &lt;/a-tab-pane&gt;<br>    &lt;/a-tabs&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>//使用TypeScript 进行编写和类型检查<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>import PosLlist from &quot;@/views/PosLlist.vue&quot;;<br>import FigList from &quot;@/views/FigList.vue&quot;;<br>import UserList from &quot;@/views/UserList.vue&quot;;<br><br>const searchText = ref(&quot;&quot;);<br>const activeKey = ref(&quot;post&quot;);<br>const onSearch = (value: string) =&gt; &#123;<br>  alert(value);<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><strong>tag栏子项目</strong><br><strong>文章列表页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  文章列表<br>  &lt;img :src=&quot;imgg&quot; class=&quot;imgg&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import imgg from &quot;../assets/DALL.png&quot;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.imgg &#123;<br>  width: 200px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">**用户列表页面**</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;用户列表&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;<br><br>&lt;style scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">**图片列表页面**</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;图片列表&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;<br><br>&lt;style scoped&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>页面美化</strong><br><strong>顶栏填充</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">1.在app内添加一个div，属性为app<br>2.在样式里使用padding： 20px<br></code></pre></td></tr></table></figure><p><strong>定义一个分隔符组件，使得内容没那么挤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;my-divider&quot;&gt;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.my-divider &#123;<br>  margin-bottom: 32px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">**居中及最大宽度**</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">max-width: 1024px;<br>  margin: 0 auto;<br></code></pre></td></tr></table></figure><p><strong>用url记录搜索状态，当用户刷新页面时，能从url还原之前的搜索状态</strong><br><strong>动态路由，原有的基础上添加一个</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">const routes: Array&lt;RouteRecordRaw&gt; = [<br>  &#123;<br>    path: &quot;/&quot;,<br>    component: IndexViwe,<br>  &#125;,<br>  &#123;<br>    path: &quot;/:category&quot;,<br>    component: IndexViwe,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><pre><code class="hljs"> **full**</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;index-page&quot;&gt;<br>    &lt;a-input-search<br>      v-model:value=&quot;searchParams.text&quot;<br>      placeholder=&quot;Input search text!&quot;<br>      enter-button=&quot;Search&quot;<br>      size=&quot;large&quot;<br>      @search=&quot;onSearch&quot;<br>    /&gt;<br>    &#123;&#123; JSON.stringify(searchParams) &#125;&#125;<br>    &lt;MyDivider /&gt;<br>    &lt;a-tabs v-model:activeKey=&quot;activeKey&quot; @change=&quot;onTapChange&quot;&gt;<br>      &lt;a-tab-pane key=&quot;post&quot; tab=&quot;文章&quot;&gt;<br>        &lt;PosLlist /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=&quot;fig&quot; tab=&quot;图片&quot;&gt;<br>        &lt;FigList /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=&quot;user&quot; tab=&quot;用户&quot;&gt;<br>        &lt;UserList /&gt;<br>      &lt;/a-tab-pane&gt;<br>    &lt;/a-tabs&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref, watchEffect &#125; from &quot;vue&quot;;<br>import PosLlist from &quot;@/views/PosLlist.vue&quot;;<br>import FigList from &quot;@/views/FigList.vue&quot;;<br>import UserList from &quot;@/views/UserList.vue&quot;;<br>import MyDivider from &quot;@/views/MyDivider.vue&quot;;<br>import &#123; useRoute, useRouter &#125; from &quot;vue-router&quot;;<br><br>const route = useRoute();<br>const router = useRouter();<br>const activeKey = route.params.category;<br>const initSearchParams = &#123;<br>  text: &quot;&quot;,<br>  pageSize: 10,<br>  pageNum: 1,<br>&#125;;<br>const searchParams = ref(initSearchParams);<br><br>watchEffect(() =&gt; &#123;<br>  searchParams.value = &#123;<br>    ...initSearchParams,<br>    text: route.query.text,<br>  &#125; as any;<br>&#125;);<br>const onSearch = (value: string) =&gt; &#123;<br>  alert(value);<br>  router.push(&#123;<br>    query: searchParams.value,<br>  &#125;);<br>&#125;;<br><br>const onTapChange = (key: string) =&gt; &#123;<br>  router.push(&#123;<br>    path: `/$&#123;key&#125;`,<br>    query: searchParams.value,<br>  &#125;);<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h1 id="联调后段"><a href="#联调后段" class="headerlink" title="联调后段"></a>联调后段</h1><p>**整合axios **</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install axios<br></code></pre></td></tr></table></figure><p><strong>创建TS文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">import axios from &quot;axios&quot;;<br><br>const instance = axios.create(&#123;<br>  baseURL: &quot;http://localhost:8101/api/&quot;,<br>  timeout: 10000,<br>  headers: &#123;&#125;,<br>&#125;);<br><br>// 添加响应拦截器<br>instance.interceptors.response.use(<br>  function (response) &#123;<br>    // 对响应数据做点什么<br>    const data_ = response.data;<br>    if (data_.code === 0) return data_.data;<br>    return response.data;<br>  &#125;,<br>  function (error) &#123;<br>    // 对响应错误做点什么<br>    return Promise.reject(error);<br>  &#125;<br>);<br>export default instance;<br><br></code></pre></td></tr></table></figure><p><strong>测试服务端接口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>myAxios.get(&quot;/post/get/vo?id=&quot; + &quot;1648899128480075778&quot;).then((res) =&gt; &#123;<br>  console.log(res);<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>编写查看文章查看</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;PosLlist :post-list=&quot;postList&quot; /&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;template&gt;<br>  &lt;img :src=&quot;imgg&quot; class=&quot;imgg&quot; /&gt;<br>  &lt;a-list item-layout=&quot;horizontal&quot; :data-source=&quot;props.postList&quot;&gt;<br>    &lt;template #renderItem=&quot;&#123; item &#125;&quot;&gt;<br>      &lt;a-list-item&gt;<br>        &lt;a-list-item-meta :description=&quot;item.content&quot;&gt;<br>          &lt;template #title&gt;<br>            &lt;a href=&quot;https://www.antdv.com/&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/a&gt;<br>          &lt;/template&gt;<br>          &lt;template #avatar&gt;<br>            &lt;a-avatar<br>              src=&quot;https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png&quot;<br>            /&gt;<br>          &lt;/template&gt;<br>        &lt;/a-list-item-meta&gt;<br>      &lt;/a-list-item&gt;<br>    &lt;/template&gt;<br>  &lt;/a-list&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import imgg from &quot;../assets/DALL.png&quot;;<br>import &#123; withDefaults, defineProps &#125; from &quot;vue&quot;;<br><br>interface Props &#123;<br>  postList: any[];<br>&#125;<br><br>const props = withDefaults(defineProps&lt;Props&gt;(), &#123; postList: () =&gt; [] &#125;);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.imgg &#123;<br>  width: 200px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="文章数据获取"><a href="#文章数据获取" class="headerlink" title="文章数据获取"></a>文章数据获取</h1><p>抓取： <a href="https://www.code-nav.cn/learn/passage">https://www.code-nav.cn/learn/passage</a><br><strong>数据抓取的几种方式</strong><br>1.直接请求数据接口<br>2.等网页渲染出明文内容，从前端页面内容抓取<br>3.有些网站可能是动态请求，不会一次性加在所有数据，需要点某个按钮或者输入某个验证码显示出数据。（无头浏览器：selenium ，node.js puppeteer）</p><p><strong>通过数据接口来抓取数据：</strong><br><strong>HttpClient,OKHttp,Hutool</strong><br><strong>Hutool 文档</strong><br><a href="https://hutool.cn/docs/index.html#/">https://hutool.cn/docs/index.html#/</a></p><p>1.分析数据源，找到接口<br>2.获取数据，写入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不需要时注释掉component</span><br><span class="hljs-comment">//离线抓取</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrawlerPostInit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PostService postService;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>        <span class="hljs-comment">//1.获取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;current\&quot;:1,\&quot;pageSize\&quot;:8,\&quot;sortField\&quot;:\&quot;createTime\&quot;,\&quot;sortOrder\&quot;:\&quot;descend\&quot;,\&quot;category\&quot;:\&quot;文章\&quot;,\&quot;reviewStatus\&quot;:1&#125;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.code-nav.cn/api/post/search/page/vo&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> HttpRequest.post(url)<br>                .body(json)<br>                .execute().body();<br>        <span class="hljs-comment">//System.out.println(result2);</span><br>        <span class="hljs-comment">//2.json转对象</span><br>        Map&lt;String, Object&gt; map = JSONUtil.toBean(result2, Map.class);<br><span class="hljs-comment">//        System.out.println(map);</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> (JSONObject) map.get(<span class="hljs-string">&quot;data&quot;</span>);<br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">records</span> <span class="hljs-operator">=</span> (JSONArray) data.get(<span class="hljs-string">&quot;records&quot;</span>);<br><span class="hljs-comment">//        System.out.println(records);</span><br>        List&lt;Post&gt; posts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Object record : records) &#123;<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">tempRecord</span> <span class="hljs-operator">=</span> (JSONObject) record;<br>            <span class="hljs-type">Post</span> <span class="hljs-variable">post</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Post</span>();<br>            post.setTitle(tempRecord.getStr(<span class="hljs-string">&quot;title&quot;</span>));<br>            post.setContent(tempRecord.getStr(<span class="hljs-string">&quot;content&quot;</span>));<br>            <span class="hljs-type">JSONArray</span> <span class="hljs-variable">tags</span> <span class="hljs-operator">=</span> (JSONArray) tempRecord.get(<span class="hljs-string">&quot;tags&quot;</span>);<br>            List&lt;String&gt; tagList = tags.toList(String.class);<br>            post.setTags(JSONUtil.toJsonStr(tagList));<br>            post.setUserId(<span class="hljs-number">1L</span>);<br>            posts.add(post);<br>        &#125;<br><span class="hljs-comment">//        System.out.println(posts);</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> postService.saveBatch(posts);<br>        <span class="hljs-keyword">if</span> (b) &#123;<br>            log.info(<span class="hljs-string">&quot;初始化成功,条数为&#123;&#125;&quot;</span>,posts.size());<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            log.error(<span class="hljs-string">&quot;失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="用户数据获取"><a href="#用户数据获取" class="headerlink" title="用户数据获取"></a>用户数据获取</h1><h1 id="图片获取"><a href="#图片获取" class="headerlink" title="图片获取"></a>图片获取</h1><p>实时抓取：自己不存储数据，需要时直接从别人网站取出来。<br><strong>获取BIYING图片（接口太难，等网页渲染好后再获取）</strong><br><strong>jsoup库</strong></p><h1 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h1><p><strong>controller开发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/fig&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FigController</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> figQueryRequest</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> FigService figService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/list/page/vo&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Page&lt;Fig&gt;&gt; <span class="hljs-title function_">listFigByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> FigQueryRequest figQueryRequest,</span><br><span class="hljs-params">                                                 HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> figQueryRequest.getCurrent();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> figQueryRequest.getPageSize();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> figQueryRequest.getSearchText();<br><br>        <span class="hljs-comment">// 限制爬虫</span><br>        ThrowUtils.throwIf(size &gt; <span class="hljs-number">20</span>, ErrorCode.PARAMS_ERROR);<br>        Page&lt;Fig&gt; figPage = figService.searchFig(searchText, current, size);<br>        <span class="hljs-keyword">return</span> ResultUtils.success(figPage);<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>service开发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FigService</span>&#123;<br>    Page&lt;Fig&gt; <span class="hljs-title function_">searchFig</span><span class="hljs-params">(String searchText, <span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> oageSize )</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FigServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FigService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Page&lt;Fig&gt; <span class="hljs-title function_">searchFig</span><span class="hljs-params">(String searchText, <span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*pageSize;<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;https://www.bing.com/images/search?q=%s&amp;form=HDRSC2&amp;first=%s&quot;</span>,searchText,current);<br>        <span class="hljs-keyword">try</span> &#123;<br>            doc = Jsoup.connect(url).get();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;数据获取异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Elements</span> <span class="hljs-variable">newsHeadlines</span> <span class="hljs-operator">=</span> doc.select(<span class="hljs-string">&quot;.iuscp.isv&quot;</span>);<br>        List&lt;Fig&gt; fig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Element newsHeadline : newsHeadlines) &#123;<br>            String m=newsHeadline.select(<span class="hljs-string">&quot;.iusc&quot;</span>).get(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;m&quot;</span>);<br>            Map&lt;String,Object&gt; map = JSONUtil.toBean(m, Map.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">murl</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;murl&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tittle</span> <span class="hljs-operator">=</span> newsHeadline.select(<span class="hljs-string">&quot;.inflnk&quot;</span>).get(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;aria-label&quot;</span>);<br>            <span class="hljs-type">Fig</span> <span class="hljs-variable">fig1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fig</span>();<br>            fig1.setTittle(tittle);<br>            fig1.setUrl(murl);<br>            fig.add(fig1);<br>            <span class="hljs-keyword">if</span>(fig.size()&gt;pageSize)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        Page&lt;Fig&gt; figPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNum,pageSize);<br>        figPage.setRecords(fig);<br>        <span class="hljs-keyword">return</span> figPage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FigQueryRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 搜索词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String searchText;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fig</span> &#123;<br>    <span class="hljs-keyword">private</span> String tittle;<br>    <span class="hljs-keyword">private</span> String url;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现前端向后段传递数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;template&gt;<br>  &lt;div class=<span class="hljs-string">&quot;index-page&quot;</span>&gt;<br>    &lt;a-input-search<br>      v-model:value=<span class="hljs-string">&quot;searchParams.text&quot;</span><br>      placeholder=<span class="hljs-string">&quot;Input search text!&quot;</span><br>      enter-button=<span class="hljs-string">&quot;Search&quot;</span><br>      size=<span class="hljs-string">&quot;large&quot;</span><br>      <span class="hljs-meta">@search</span>=<span class="hljs-string">&quot;onSearch&quot;</span><br>    /&gt;<br>    &lt;!--    &#123;&#123; JSON.stringify(userList) &#125;&#125;--&gt;<br>    &lt;MyDivider /&gt;<br>    &lt;a-tabs v-model:activeKey=<span class="hljs-string">&quot;activeKey&quot;</span> <span class="hljs-meta">@change</span>=<span class="hljs-string">&quot;onTapChange&quot;</span>&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;post&quot;</span> tab=<span class="hljs-string">&quot;文章&quot;</span>&gt;<br>        &lt;PosLlist :post-list=<span class="hljs-string">&quot;postList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;fig&quot;</span> tab=<span class="hljs-string">&quot;图片&quot;</span>&gt;<br>        &lt;FigList :fig-list=<span class="hljs-string">&quot;figList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;user&quot;</span> tab=<span class="hljs-string">&quot;用户&quot;</span>&gt;<br>        &lt;UserList :user-list=<span class="hljs-string">&quot;userList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>    &lt;/a-tabs&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; ref, watchEffect &#125; from <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> PosLlist from <span class="hljs-string">&quot;@/views/PosLlist.vue&quot;</span>;<br><span class="hljs-keyword">import</span> FigList from <span class="hljs-string">&quot;@/views/FigList.vue&quot;</span>;<br><span class="hljs-keyword">import</span> UserList from <span class="hljs-string">&quot;@/views/UserList.vue&quot;</span>;<br><span class="hljs-keyword">import</span> MyDivider from <span class="hljs-string">&quot;@/views/MyDivider.vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; from <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">import</span> myAxios from <span class="hljs-string">&quot;@/plugins/myAxios&quot;</span>;<br><br><span class="hljs-comment">// myAxios.get(&quot;/post/get/vo?id=&quot; + &quot;1648899128480075778&quot;).then((res) =&gt; &#123;</span><br><span class="hljs-comment">//   console.log(res);</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-type">const</span> <span class="hljs-variable">postList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">userList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">figList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">loadData</span> <span class="hljs-operator">=</span> (params: any) =&gt; &#123;<br>  <span class="hljs-type">const</span> <span class="hljs-variable">postQuery</span> <span class="hljs-operator">=</span> &#123;<br>    ...params,<br>    searchText: params.text,<br>  &#125;;<br>  myAxios.post(<span class="hljs-string">&quot;/post/list/page/vo&quot;</span>, postQuery).then((res: any) =&gt; &#123;<br>    postList.value = res.records;<br>  &#125;);<br>  <span class="hljs-type">const</span> <span class="hljs-variable">userQuery</span> <span class="hljs-operator">=</span> &#123;<br>    ...params,<br>    userName: params.text,<br>  &#125;;<br>  myAxios.post(<span class="hljs-string">&quot;/user/list/page/vo&quot;</span>, userQuery).then((res: any) =&gt; &#123;<br>    userList.value = res.records;<br>  &#125;);<br>  <span class="hljs-type">const</span> <span class="hljs-variable">figQuery</span> <span class="hljs-operator">=</span> &#123;<br>    ...params,<br>    searchText: params.text,<br>  &#125;;<br>  myAxios.post(<span class="hljs-string">&quot;fig/list/page/vo&quot;</span>, figQuery).then((res: any) =&gt; &#123;<br>    figList.value = res.records;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-variable">route</span> <span class="hljs-operator">=</span> useRoute();<br><span class="hljs-type">const</span> <span class="hljs-variable">router</span> <span class="hljs-operator">=</span> useRouter();<br><span class="hljs-type">const</span> <span class="hljs-variable">activeKey</span> <span class="hljs-operator">=</span> route.params.category;<br><span class="hljs-type">const</span> <span class="hljs-variable">initSearchParams</span> <span class="hljs-operator">=</span> &#123;<br>  text: <span class="hljs-string">&quot;&quot;</span>,<br>  pageSize: <span class="hljs-number">10</span>,<br>  pageNum: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-variable">searchParams</span> <span class="hljs-operator">=</span> ref(initSearchParams);<br>loadData(initSearchParams);<br>watchEffect(() =&gt; &#123;<br>  searchParams.value = &#123;<br>    ...initSearchParams,<br>    text: route.query.text,<br>  &#125; as any;<br>&#125;);<br><span class="hljs-type">const</span> <span class="hljs-variable">onSearch</span> <span class="hljs-operator">=</span> (value: string) =&gt; &#123;<br>  router.push(&#123;<br>    query: searchParams.value,<br>  &#125;);<br>  loadData(searchParams.value);<br>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-variable">onTapChange</span> <span class="hljs-operator">=</span> (key: string) =&gt; &#123;<br>  router.push(&#123;<br>    path: `/$&#123;key&#125;`,<br>    query: searchParams.value,<br>  &#125;);<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>业务流程：后端为不同的内容提供不同的接口，前端去根据每一个内容去调用对应的接口<br>缺点：<strong>冗余性</strong>太高，后端需要反复开发搜索接口，前端需要反复调用接口<br>   <strong>变量名称不统一，</strong>例如两个内容中用于传输数据的变量名称不同<br>   <strong>请求数量比较多</strong>，每个接口都发起了http请求，而http请求数量是有限的</p><h1 id="聚合接口"><a href="#聚合接口" class="headerlink" title="聚合接口"></a>聚合接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClusterSearchVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;UserVO&gt; userList;<br>    <span class="hljs-keyword">private</span> List&lt;PostVO&gt; postVOList;<br>    <span class="hljs-keyword">private</span> List&lt;Fig&gt; figList;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClusterSearchRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String searchText;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/search&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClusterSearchController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PostService postService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> FigService figService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/all&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;ClusterSearchVO&gt; <span class="hljs-title function_">searchAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ClusterSearchRequest clusterSearchRequest, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> clusterSearchRequest.getSearchText();<br>        CompletableFuture&lt;Page&lt;UserVO&gt;&gt; userTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>            <span class="hljs-type">UserQueryRequest</span> <span class="hljs-variable">userQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserQueryRequest</span>();<br>            userQueryRequest.setUserName(searchText);<br>            Page&lt;UserVO&gt; userVOPage = userService.listUserVOByPage(userQueryRequest);<br>            <span class="hljs-keyword">return</span> userVOPage;<br>        &#125;);<br><br>        CompletableFuture&lt;Page&lt;PostVO&gt;&gt; postTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>            <span class="hljs-type">PostQueryRequest</span> <span class="hljs-variable">postQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostQueryRequest</span>();<br>            postQueryRequest.setSearchText(searchText);<br>            Page&lt;PostVO&gt; postVOPage = postService.listPostVOByPage(postQueryRequest, request);<br>            <span class="hljs-keyword">return</span> postVOPage;<br>        &#125;);<br><br>        CompletableFuture&lt;Page&lt;Fig&gt;&gt; figTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>            Page&lt;Fig&gt; figPage = figService.searchFig(searchText, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">return</span> figPage;<br>        &#125;);<br><br><br>        CompletableFuture.allOf(userTask,postTask,figTask).join();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Page&lt;UserVO&gt; userVOPage = userTask.get();<br>            Page&lt;Fig&gt; figPage = figTask.get();<br>            Page&lt;PostVO&gt; postVOPage = postTask.get();<br><br>            <span class="hljs-type">ClusterSearchVO</span> <span class="hljs-variable">clusterSearchVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClusterSearchVO</span>();<br>            clusterSearchVO.setFigList(figPage.getRecords());<br>            clusterSearchVO.setUserList(userVOPage.getRecords());<br>            clusterSearchVO.setPostVOList(postVOPage.getRecords());<br>            <span class="hljs-keyword">return</span> ResultUtils.success(clusterSearchVO);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.error(<span class="hljs-string">&quot;查询异常&quot;</span>,e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;查询异常&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="对聚合接口进行优化"><a href="#对聚合接口进行优化" class="headerlink" title="对聚合接口进行优化"></a>对聚合接口进行优化</h1><h2 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h2><p>目前的聚合搜索接口是一次性把所有需要的数据全部请求出来<br>怎样才能让前端可以<strong>一次性</strong>搜索出所有数据，又能够<strong>分别获取某一类</strong>的数据</p><p>问题：type增多后，要把查询堆积到controller代码里</p><p><strong>门面模式：</strong><br>帮助用户<strong>更轻松</strong>的实现功能，不需要关心门<strong>背后的细节</strong>。<br>聚合搜索类业务就是门面模式，前端<strong>不关心后端从哪里</strong>，怎么去取，怎么聚合不同来源的数据。<br>当调用系统接口觉得<strong>麻烦</strong>时，就需要思考是否需要<strong>抽象</strong>一个门面<br>怎么才能让搜索系统接入更多的数据源？<br>目前的设计（理论上所有的聚合搜索功能）都会用到门面模式，前端不需要关心后端从哪里怎么取，怎么聚合不同来源的数据。前端只需要一个type就可以获得想要的数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SearchTypeEnum</span> &#123;<br>    POST(<span class="hljs-string">&quot;帖子&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>),<br>    USER(<span class="hljs-string">&quot;用户&quot;</span>,<span class="hljs-string">&quot;user&quot;</span>),<br>    FIG(<span class="hljs-string">&quot;图片&quot;</span>,<span class="hljs-string">&quot;fig&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String text;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String value;<br><br>    SearchTypeEnum(String text, String value) &#123;<br>        <span class="hljs-built_in">this</span>.text = text;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取值列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">getValues</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.stream(values()).map(item -&gt; item.value).collect(Collectors.toList());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据 value 获取枚举</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SearchTypeEnum <span class="hljs-title function_">getEnumByValue</span><span class="hljs-params">(String value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (SearchTypeEnum anEnum : SearchTypeEnum.values()) &#123;<br>            <span class="hljs-keyword">if</span> (anEnum.value.equals(value)) &#123;<br>                <span class="hljs-keyword">return</span> anEnum;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClusterSearchRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 搜索内容</span><br><span class="hljs-comment">     * 类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String searchText;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchFacade</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PostService postService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> FigService figService;<br><br>    <span class="hljs-keyword">public</span> ClusterSearchVO <span class="hljs-title function_">searchAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ClusterSearchRequest clusterSearchRequest, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//获取请求实体类中的状态</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> clusterSearchRequest.getType();<br>        <span class="hljs-comment">//根据请求实体类中的状态获获取枚举类型</span><br>        <span class="hljs-type">SearchTypeEnum</span> <span class="hljs-variable">searchTypeEnum</span> <span class="hljs-operator">=</span> SearchTypeEnum.getEnumByValue(type);<br>        <span class="hljs-comment">//进行合法性判断</span><br>        ThrowUtils.throwIf(StringUtils.isBlank(type), ErrorCode.PARAMS_ERROR);<br>        <span class="hljs-comment">//获取请求实体类中的请求</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> clusterSearchRequest.getSearchText();<br>        <span class="hljs-comment">//如果type为空则搜索所有数据</span><br>        <span class="hljs-keyword">if</span>(type==<span class="hljs-literal">null</span>)&#123;<br>            CompletableFuture&lt;Page&lt;UserVO&gt;&gt; userTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                <span class="hljs-type">UserQueryRequest</span> <span class="hljs-variable">userQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserQueryRequest</span>();<br>                userQueryRequest.setUserName(searchText);<br>                Page&lt;UserVO&gt; userVOPage = userService.listUserVOByPage(userQueryRequest);<br>                <span class="hljs-keyword">return</span> userVOPage;<br>            &#125;);<br><br>            CompletableFuture&lt;Page&lt;PostVO&gt;&gt; postTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                <span class="hljs-type">PostQueryRequest</span> <span class="hljs-variable">postQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostQueryRequest</span>();<br>                postQueryRequest.setSearchText(searchText);<br>                Page&lt;PostVO&gt; postVOPage = postService.listPostVOByPage(postQueryRequest, request);<br>                <span class="hljs-keyword">return</span> postVOPage;<br>            &#125;);<br><br>            CompletableFuture&lt;Page&lt;Fig&gt;&gt; figTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                Page&lt;Fig&gt; figPage = figService.searchFig(searchText, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>                <span class="hljs-keyword">return</span> figPage;<br>            &#125;);<br><br><br>            CompletableFuture.allOf(userTask,postTask,figTask).join();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Page&lt;UserVO&gt; userVOPage = userTask.get();<br>                Page&lt;Fig&gt; figPage = figTask.get();<br>                Page&lt;PostVO&gt; postVOPage = postTask.get();<br>                <span class="hljs-type">ClusterSearchVO</span> <span class="hljs-variable">clusterSearchVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClusterSearchVO</span>();<br>                clusterSearchVO.setFigList(figPage.getRecords());<br>                clusterSearchVO.setUserList(userVOPage.getRecords());<br>                clusterSearchVO.setPostVOList(postVOPage.getRecords());<br>                <span class="hljs-keyword">return</span> clusterSearchVO;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                log.error(<span class="hljs-string">&quot;查询异常&quot;</span>,e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;查询异常&quot;</span>);<br>            &#125;<br><br>        &#125;<span class="hljs-comment">//否则进行type的合法性判断</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">ClusterSearchVO</span> <span class="hljs-variable">clusterSearchVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClusterSearchVO</span>();<br>            <span class="hljs-keyword">switch</span> (searchTypeEnum) &#123;<br>                <span class="hljs-keyword">case</span> POST:<br>                    <span class="hljs-type">PostQueryRequest</span> <span class="hljs-variable">postQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostQueryRequest</span>();<br>                    postQueryRequest.setSearchText(searchText);<br>                    Page&lt;PostVO&gt; postVOPage = postService.listPostVOByPage(postQueryRequest, request);<br>                    clusterSearchVO.setPostVOList(postVOPage.getRecords());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> USER:<br>                    <span class="hljs-type">UserQueryRequest</span> <span class="hljs-variable">userQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserQueryRequest</span>();<br>                    userQueryRequest.setUserName(searchText);<br>                    Page&lt;UserVO&gt; userVOPage = userService.listUserVOByPage(userQueryRequest);<br>                    clusterSearchVO.setUserList(userVOPage.getRecords());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> FIG:<br>                    Page&lt;Fig&gt; figPage = figService.searchFig(searchText, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>                    clusterSearchVO.setFigList(figPage.getRecords());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>            &#125;<br>            <span class="hljs-keyword">return</span> clusterSearchVO;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/search&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClusterSearchController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PostService postService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> FigService figService;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> SearchFacade searchFacade;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/all&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;ClusterSearchVO&gt; <span class="hljs-title function_">searchAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ClusterSearchRequest clusterSearchRequest, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResultUtils.success(searchFacade.searchAll(clusterSearchRequest,request));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;template&gt;<br>  &lt;div class=<span class="hljs-string">&quot;index-page&quot;</span>&gt;<br>    &lt;a-input-search<br>    <span class="hljs-comment">//修改字符避免没有切换标签栏，没有点提交时自动触发请求</span><br>      v-model:value=<span class="hljs-string">&quot;searchText&quot;</span><br>      placeholder=<span class="hljs-string">&quot;Input search text!&quot;</span><br>      enter-button=<span class="hljs-string">&quot;Search&quot;</span><br>      size=<span class="hljs-string">&quot;large&quot;</span><br>      <span class="hljs-meta">@search</span>=<span class="hljs-string">&quot;onSearch&quot;</span><br>    /&gt;<br>    &lt;!--    &#123;&#123; JSON.stringify(searchParams.text) &#125;&#125;--&gt;<br>    &lt;MyDivider /&gt;<br>    &lt;a-tabs v-model:activeKey=<span class="hljs-string">&quot;activeKey&quot;</span> <span class="hljs-meta">@change</span>=<span class="hljs-string">&quot;onTapChange&quot;</span>&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;post&quot;</span> tab=<span class="hljs-string">&quot;文章&quot;</span>&gt;<br>        &lt;PosLlist :post-list=<span class="hljs-string">&quot;postList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;fig&quot;</span> tab=<span class="hljs-string">&quot;图片&quot;</span>&gt;<br>        &lt;FigList :fig-list=<span class="hljs-string">&quot;figList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;user&quot;</span> tab=<span class="hljs-string">&quot;用户&quot;</span>&gt;<br>        &lt;UserList :user-list=<span class="hljs-string">&quot;userList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>    &lt;/a-tabs&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; ref, watchEffect &#125; from <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> PosLlist from <span class="hljs-string">&quot;@/views/PosLlist.vue&quot;</span>;<br><span class="hljs-keyword">import</span> FigList from <span class="hljs-string">&quot;@/views/FigList.vue&quot;</span>;<br><span class="hljs-keyword">import</span> UserList from <span class="hljs-string">&quot;@/views/UserList.vue&quot;</span>;<br><span class="hljs-keyword">import</span> MyDivider from <span class="hljs-string">&quot;@/views/MyDivider.vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; from <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> myAxios from <span class="hljs-string">&quot;@/plugins/myAxios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; message &#125; from <span class="hljs-string">&quot;ant-design-vue&quot;</span>;<br><br><span class="hljs-comment">// myAxios.get(&quot;/post/get/vo?id=&quot; + &quot;1648899128480075778&quot;).then((res) =&gt; &#123;</span><br><span class="hljs-comment">//   console.log(res);</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-type">const</span> <span class="hljs-variable">postList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">userList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">figList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">route</span> <span class="hljs-operator">=</span> useRoute();<br><span class="hljs-type">const</span> <span class="hljs-variable">router</span> <span class="hljs-operator">=</span> useRouter();<br><span class="hljs-type">const</span> <span class="hljs-variable">activeKey</span> <span class="hljs-operator">=</span> route.params.category;<br><span class="hljs-type">const</span> <span class="hljs-variable">initSearchParams</span> <span class="hljs-operator">=</span> &#123;<br>  type: activeKey,<br>  text: <span class="hljs-string">&quot;&quot;</span>,<br>  pageSize: <span class="hljs-number">10</span>,<br>  pageNum: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> ref(route.query.text);<br><span class="hljs-comment">// const searchText = ref(route.params.text);</span><br><span class="hljs-comment">// const loadDataO = (params: any) =&gt; &#123;</span><br><span class="hljs-comment">//   const postQuery = &#123;</span><br><span class="hljs-comment">//     ...params,</span><br><span class="hljs-comment">//     searchText: params.text,</span><br><span class="hljs-comment">//   &#125;;</span><br><span class="hljs-comment">//   myAxios.post(&quot;/post/list/page/vo&quot;, postQuery).then((res: any) =&gt; &#123;</span><br><span class="hljs-comment">//     postList.value = res.records;</span><br><span class="hljs-comment">//   &#125;);</span><br><span class="hljs-comment">//   const userQuery = &#123;</span><br><span class="hljs-comment">//     ...params,</span><br><span class="hljs-comment">//     userName: params.text,</span><br><span class="hljs-comment">//   &#125;;</span><br><span class="hljs-comment">//   myAxios.post(&quot;/user/list/page/vo&quot;, userQuery).then((res: any) =&gt; &#123;</span><br><span class="hljs-comment">//     userList.value = res.records;</span><br><span class="hljs-comment">//   &#125;);</span><br><span class="hljs-comment">//   const figQuery = &#123;</span><br><span class="hljs-comment">//     ...params,</span><br><span class="hljs-comment">//     searchText: params.text,</span><br><span class="hljs-comment">//   &#125;;</span><br><span class="hljs-comment">//   myAxios.post(&quot;/fig/list/page/vo&quot;, figQuery).then((res: any) =&gt; &#123;</span><br><span class="hljs-comment">//     figList.value = res.records;</span><br><span class="hljs-comment">//   &#125;);</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加载聚合数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// const loadALlData = (params: any) =&gt; &#123;</span><br><span class="hljs-comment">//   const query = &#123;</span><br><span class="hljs-comment">//     ...params,</span><br><span class="hljs-comment">//     searchText: params.text,</span><br><span class="hljs-comment">//   &#125;;</span><br><span class="hljs-comment">//   myAxios.post(&quot;search/all&quot;, query).then((res: any) =&gt; &#123;</span><br><span class="hljs-comment">//     postList.value = res.postVOList;</span><br><span class="hljs-comment">//     userList.value = res.userList;</span><br><span class="hljs-comment">//     figList.value = res.figList;</span><br><span class="hljs-comment">//   &#125;);</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加载单类数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">const</span> <span class="hljs-variable">loadData</span> <span class="hljs-operator">=</span> (params: any) =&gt; &#123;<br>  <span class="hljs-comment">// alert(&quot;loda_data&quot; + params.text);</span><br>  const &#123; type = <span class="hljs-string">&quot;post&quot;</span> &#125; = params;<br>  <span class="hljs-keyword">if</span> (!type) &#123;<br>    message.error(<span class="hljs-string">&quot;type is null&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-type">const</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> &#123;<br>    ...params,<br>    searchText: params.text,<br>  &#125;;<br>  <span class="hljs-comment">// alert(type);</span><br>  myAxios.post(<span class="hljs-string">&quot;search/all&quot;</span>, query).then((res: any) =&gt; &#123;<br>    <span class="hljs-comment">// alert(&quot;asdasd&quot; + query.searchText);</span><br>    <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;post&quot;</span>) &#123;<br>      postList.value = res.postVOList;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;user&quot;</span>) &#123;<br>      userList.value = res.userList;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;fig&quot;</span>) &#123;<br>      figList.value = res.figList;<br>    &#125;<br>  &#125;);<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-variable">searchParams</span> <span class="hljs-operator">=</span> ref(initSearchParams);<br><span class="hljs-comment">// loadData(initSearchParams);</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 钩子</span><br><span class="hljs-comment"> * 当内部的变量发生变化时，重新触发这个函数</span><br><span class="hljs-comment"> */</span><br>watchEffect(() =&gt; &#123;<br>  <span class="hljs-comment">// alert(&quot;effect&quot; + route.query.text);</span><br>  searchParams.value = &#123;<br>    ...initSearchParams,<br>    text: route.query.text,<br>    type: route.params.category,<br>  &#125; as any;<br>  loadData(searchParams.value);<br>&#125;);<br><span class="hljs-type">const</span> <span class="hljs-variable">onSearch</span> <span class="hljs-operator">=</span> (value: string) =&gt; &#123;<br>  router.push(&#123;<br>    query: &#123;<br>      ...searchParams.value,<br>      text: value,<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-variable">onTapChange</span> <span class="hljs-operator">=</span> (key: string) =&gt; &#123;<br>  router.push(&#123;<br>    path: `/$&#123;key&#125;`,<br>    query: searchParams.value,<br>  &#125;);<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>定制统一的数据接入规范（标准）：什么数据源允许接入？接入时要满足什么要求？要做什么事？<br>随着type的增多，controller里内容也会越来越多，本质上来说type的增多其实就是搜索系统数据源的增多。<br>任何接入系统的数据，都需要支持。<br><strong>为聚合搜索添加视频类型搜索</strong><br>1.首先在枚举类里添加视频类型<br>2.创建service<br>3.在门面抽象类里调用service<br>这三步看起来没问题，是因为我们已经把复杂的搜索逻辑很好的封装到了service里。而新的服务可能是由别人编写的，或者是微服务调用，那么我们必须对新的功能施加约束（<strong>定义规范</strong>），例如必须支持分页参数，必须支持文本搜索等。<br><strong>通过接口定义规范！每一个功能都需要实现该接口。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据源接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClusterSearchDataSource</span> &lt;T&gt;&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 搜索功能必须要实现该接口，新接入的数据源必须要实现这个接口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> searchText</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageNum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Page&lt;T&gt;doSearch(String searchText,<span class="hljs-type">long</span> pageNum,<span class="hljs-type">long</span> pageSize);<br>&#125;<br></code></pre></td></tr></table></figure><p>假如数据源已经支持了搜索，但是别人微服务的接口或者原有的方法参数与接口的参数不同时，怎么办？使用适配器模式。<br>适配器模式：通过匹配和转换，让两个系统能完成对接。<br><strong>使用适配器模式对原来服务进行修改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据源接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClusterSearchDataSource</span> &lt;T&gt;&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 搜索功能必须要实现该接口，新接入的数据源必须要实现这个接口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> searchText</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageNum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Page&lt;T&gt;doSearch(String searchText,<span class="hljs-type">long</span> pageNum,<span class="hljs-type">long</span> pageSize);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建新的数据源：继承规范接口，对参数进行适配</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClusterSearchDataSource</span>&lt;UserVO&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 盐值，混淆密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Page&lt;UserVO&gt; <span class="hljs-title function_">doSearch</span><span class="hljs-params">(String searchText, <span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize)</span> &#123;<br>        <span class="hljs-type">UserQueryRequest</span> <span class="hljs-variable">userQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserQueryRequest</span>();<br>        userQueryRequest.setUserName(searchText);<br>        userQueryRequest.setCurrent(pageNum);<br>        userQueryRequest.setPageSize(pageSize);<br>        Page&lt;UserVO&gt; userVOPage = userService.listUserVOByPage(userQueryRequest);<br>        <span class="hljs-keyword">return</span> userVOPage;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostDataSource</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClusterSearchDataSource</span>&lt;PostVO&gt; &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PostService postService;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Page&lt;PostVO&gt; <span class="hljs-title function_">doSearch</span><span class="hljs-params">(String searchText, <span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize)</span> &#123;<br>        <span class="hljs-type">PostQueryRequest</span> <span class="hljs-variable">postQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostQueryRequest</span>();<br>        postQueryRequest.setSearchText(searchText);<br>        postQueryRequest.setPageSize(pageSize);<br>        postQueryRequest.setCurrent(pageNum);<br>        <span class="hljs-comment">//这里出现一个问题，源服务需要一个request请求，而这个请求拿不到，无法适配</span><br>        <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">servletRequestAttributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> servletRequestAttributes. getRequest();<br>        Page&lt;PostVO&gt; postVOPage = postService.listPostVOByPage(postQueryRequest, request);<br>        <span class="hljs-comment">//Page&lt;PostVO&gt; postVOPage = postService.listPostVOByPage(postQueryRequest, null);</span><br>        <span class="hljs-keyword">return</span> postVOPage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FigDataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClusterSearchDataSource</span>&lt;Fig&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Page&lt;Fig&gt; <span class="hljs-title function_">doSearch</span><span class="hljs-params">(String searchText, <span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*pageSize;<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;https://www.bing.com/images/search?q=%s&amp;form=HDRSC2&amp;first=%s&quot;</span>,searchText,current);<br>        <span class="hljs-keyword">try</span> &#123;<br>            doc = Jsoup.connect(url).get();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;数据获取异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Elements</span> <span class="hljs-variable">newsHeadlines</span> <span class="hljs-operator">=</span> doc.select(<span class="hljs-string">&quot;.iuscp.isv&quot;</span>);<br>        List&lt;Fig&gt; fig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Element newsHeadline : newsHeadlines) &#123;<br>            String m=newsHeadline.select(<span class="hljs-string">&quot;.iusc&quot;</span>).get(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;m&quot;</span>);<br>            Map&lt;String,Object&gt; map = JSONUtil.toBean(m, Map.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">murl</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;murl&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tittle</span> <span class="hljs-operator">=</span> newsHeadline.select(<span class="hljs-string">&quot;.inflnk&quot;</span>).get(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;aria-label&quot;</span>);<br>            <span class="hljs-type">Fig</span> <span class="hljs-variable">fig1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fig</span>();<br>            fig1.setTittle(tittle);<br>            fig1.setUrl(murl);<br>            fig.add(fig1);<br>            <span class="hljs-keyword">if</span>(fig.size()&gt;=pageSize)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        Page&lt;Fig&gt; figPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNum,pageSize);<br>        figPage.setRecords(fig);<br>        <span class="hljs-keyword">return</span> figPage;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>switch优化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClusterSearchVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;UserVO&gt; userList;<br>    <span class="hljs-keyword">private</span> List&lt;PostVO&gt; postVOList;<br>    <span class="hljs-keyword">private</span> List&lt;Fig&gt; figList;<br>    <span class="hljs-keyword">private</span> List&lt;?&gt; dataList;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchFacade</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    PostDataSource postDataSource;<br>    <span class="hljs-meta">@Resource</span><br>    FigDataSource figDataSource;<br>    <span class="hljs-meta">@Resource</span><br>    UserDataSource userDataSource;<br>    <span class="hljs-keyword">public</span> ClusterSearchVO <span class="hljs-title function_">searchAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ClusterSearchRequest clusterSearchRequest, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//获取请求实体类中的状态</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> clusterSearchRequest.getType();<br>        <span class="hljs-comment">//根据请求实体类中的状态获获取枚举类型</span><br>        <span class="hljs-type">SearchTypeEnum</span> <span class="hljs-variable">searchTypeEnum</span> <span class="hljs-operator">=</span> SearchTypeEnum.getEnumByValue(type);<br>        <span class="hljs-comment">//进行合法性判断</span><br>        ThrowUtils.throwIf(StringUtils.isBlank(type), ErrorCode.PARAMS_ERROR);<br>        <span class="hljs-comment">//获取请求实体类中的请求</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> clusterSearchRequest.getSearchText();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> clusterSearchRequest.getCurrent();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> clusterSearchRequest.getPageSize();<br>        <span class="hljs-comment">//如果type为空则搜索所有数据</span><br>        <span class="hljs-keyword">if</span>(type==<span class="hljs-literal">null</span>)&#123;<br>            CompletableFuture&lt;Page&lt;UserVO&gt;&gt; userTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                <span class="hljs-type">UserQueryRequest</span> <span class="hljs-variable">userQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserQueryRequest</span>();<br>                userQueryRequest.setUserName(searchText);<br>                Page&lt;UserVO&gt; userVOPage = userDataSource.doSearch(searchText,current,pageSize);<br>                <span class="hljs-keyword">return</span> userVOPage;<br>            &#125;);<br><br>            CompletableFuture&lt;Page&lt;PostVO&gt;&gt; postTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                <span class="hljs-type">PostQueryRequest</span> <span class="hljs-variable">postQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostQueryRequest</span>();<br>                postQueryRequest.setSearchText(searchText);<br>                Page&lt;PostVO&gt; postVOPage = postDataSource.doSearch(searchText,current,pageSize);<br>                <span class="hljs-keyword">return</span> postVOPage;<br>            &#125;);<br><br>            CompletableFuture&lt;Page&lt;Fig&gt;&gt; figTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                Page&lt;Fig&gt; figPage = figDataSource.doSearch(searchText, current, pageSize);<br>                <span class="hljs-keyword">return</span> figPage;<br>            &#125;);<br><br><br>            CompletableFuture.allOf(userTask,postTask,figTask).join();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Page&lt;UserVO&gt; userVOPage = userTask.get();<br>                Page&lt;Fig&gt; figPage = figTask.get();<br>                Page&lt;PostVO&gt; postVOPage = postTask.get();<br>                <span class="hljs-type">ClusterSearchVO</span> <span class="hljs-variable">clusterSearchVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClusterSearchVO</span>();<br>                clusterSearchVO.setFigList(figPage.getRecords());<br>                clusterSearchVO.setUserList(userVOPage.getRecords());<br>                clusterSearchVO.setPostVOList(postVOPage.getRecords());<br>                <span class="hljs-keyword">return</span> clusterSearchVO;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                log.error(<span class="hljs-string">&quot;查询异常&quot;</span>,e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;查询异常&quot;</span>);<br>            &#125;<br><br>        &#125;<span class="hljs-comment">//否则进行type的合法性判断</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            Map&lt;String, ClusterSearchDataSource&lt;T&gt;&gt; typeDataSourceMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>()&#123;&#123;<br>               put(SearchTypeEnum.POST.getValue(),postDataSource);<br>               put(SearchTypeEnum.USER.getValue(),userDataSource);<br>               put(SearchTypeEnum.FIG.getValue(),figDataSource);<br>            &#125;&#125;;<br>            <span class="hljs-type">ClusterSearchVO</span> <span class="hljs-variable">clusterSearchVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClusterSearchVO</span>();<br>            ClusterSearchDataSource&lt;?&gt; dataSource = typeDataSourceMap.get(type);<br>            Page&lt;?&gt; page = dataSource.doSearch(searchText,current,pageSize);<br>            clusterSearchVO.setDataList(page.getRecords());<br>            <span class="hljs-comment">//优化掉switch</span><br><span class="hljs-comment">//            switch (searchTypeEnum) &#123;</span><br><span class="hljs-comment">//                case POST:</span><br><span class="hljs-comment">////                    PostQueryRequest postQueryRequest = new PostQueryRequest();</span><br><span class="hljs-comment">////                    postQueryRequest.setSearchText(searchText);</span><br><span class="hljs-comment">//                    Page&lt;PostVO&gt; postVOPage = postDataSource.doSearch(searchText, current,pageSize);</span><br><span class="hljs-comment">//                    clusterSearchVO.setPostVOList(postVOPage.getRecords());</span><br><span class="hljs-comment">//                    break;</span><br><span class="hljs-comment">//                case USER:</span><br><span class="hljs-comment">//                    UserQueryRequest userQueryRequest = new UserQueryRequest();</span><br><span class="hljs-comment">//                    userQueryRequest.setUserName(searchText);</span><br><span class="hljs-comment">//                    Page&lt;UserVO&gt; userVOPage = userDataSource.doSearch(searchText,current,pageSize);</span><br><span class="hljs-comment">//                    clusterSearchVO.setUserList(userVOPage.getRecords());</span><br><span class="hljs-comment">//                    break;</span><br><span class="hljs-comment">//                case FIG:</span><br><span class="hljs-comment">//                    Page&lt;Fig&gt; figPage = figDataSource.doSearch(searchText, current, pageSize);</span><br><span class="hljs-comment">//                    clusterSearchVO.setFigList(figPage.getRecords());</span><br><span class="hljs-comment">//                    break;</span><br><span class="hljs-comment">//                default:</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-keyword">return</span> clusterSearchVO;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>继续对门面进行抽象</strong><br><strong>构建注册类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClusterSearchDataSouceRegistry</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    PostDataSource postDataSource;<br>    <span class="hljs-meta">@Resource</span><br>    FigDataSource figDataSource;<br>    <span class="hljs-meta">@Resource</span><br>    UserDataSource userDataSource;<br>    <br>    <span class="hljs-keyword">private</span> Map&lt;String, ClusterSearchDataSource&lt;T&gt;&gt; typeDataSourceMap;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doInit</span><span class="hljs-params">()</span> &#123;<br>        typeDataSourceMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>() &#123;<br>            &#123;<br>                put(SearchTypeEnum.POST.getValue(), postDataSource);<br>                put(SearchTypeEnum.USER.getValue(), userDataSource);<br>                put(SearchTypeEnum.FIG.getValue(), figDataSource);<br>            &#125;<br>        &#125;;<br>    &#125;<br>    <span class="hljs-keyword">public</span> ClusterSearchDataSource <span class="hljs-title function_">getDataSourceByType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-keyword">if</span> (typeDataSourceMap==<span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> typeDataSourceMap.get(type);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>最终门面类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchFacade</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    PostDataSource postDataSource;<br>    <span class="hljs-meta">@Resource</span><br>    FigDataSource figDataSource;<br>    <span class="hljs-meta">@Resource</span><br>    UserDataSource userDataSource;<br>    <span class="hljs-meta">@Resource</span><br>    ClusterSearchDataSouceRegistry clusterSearchDataSouceRegistry;<br>    <span class="hljs-keyword">public</span> ClusterSearchVO <span class="hljs-title function_">searchAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ClusterSearchRequest clusterSearchRequest, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//获取请求实体类中的状态</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> clusterSearchRequest.getType();<br>        <span class="hljs-comment">//根据请求实体类中的状态获获取枚举类型</span><br>        <span class="hljs-type">SearchTypeEnum</span> <span class="hljs-variable">searchTypeEnum</span> <span class="hljs-operator">=</span> SearchTypeEnum.getEnumByValue(type);<br>        <span class="hljs-comment">//进行合法性判断</span><br>        ThrowUtils.throwIf(StringUtils.isBlank(type), ErrorCode.PARAMS_ERROR);<br>        <span class="hljs-comment">//获取请求实体类中的请求</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> clusterSearchRequest.getSearchText();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> clusterSearchRequest.getCurrent();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> clusterSearchRequest.getPageSize();<br>        <span class="hljs-comment">//如果type为空则搜索所有数据</span><br>        <span class="hljs-keyword">if</span>(type==<span class="hljs-literal">null</span>)&#123;<br>            CompletableFuture&lt;Page&lt;UserVO&gt;&gt; userTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                <span class="hljs-type">UserQueryRequest</span> <span class="hljs-variable">userQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserQueryRequest</span>();<br>                userQueryRequest.setUserName(searchText);<br>                Page&lt;UserVO&gt; userVOPage = userDataSource.doSearch(searchText,current,pageSize);<br>                <span class="hljs-keyword">return</span> userVOPage;<br>            &#125;);<br><br>            CompletableFuture&lt;Page&lt;PostVO&gt;&gt; postTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                <span class="hljs-type">PostQueryRequest</span> <span class="hljs-variable">postQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostQueryRequest</span>();<br>                postQueryRequest.setSearchText(searchText);<br>                Page&lt;PostVO&gt; postVOPage = postDataSource.doSearch(searchText,current,pageSize);<br>                <span class="hljs-keyword">return</span> postVOPage;<br>            &#125;);<br><br>            CompletableFuture&lt;Page&lt;Fig&gt;&gt; figTask = CompletableFuture.supplyAsync(() -&gt;&#123;<br>                Page&lt;Fig&gt; figPage = figDataSource.doSearch(searchText, current, pageSize);<br>                <span class="hljs-keyword">return</span> figPage;<br>            &#125;);<br><br><br>            CompletableFuture.allOf(userTask,postTask,figTask).join();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Page&lt;UserVO&gt; userVOPage = userTask.get();<br>                Page&lt;Fig&gt; figPage = figTask.get();<br>                Page&lt;PostVO&gt; postVOPage = postTask.get();<br>                <span class="hljs-type">ClusterSearchVO</span> <span class="hljs-variable">clusterSearchVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClusterSearchVO</span>();<br>                clusterSearchVO.setFigList(figPage.getRecords());<br>                clusterSearchVO.setUserList(userVOPage.getRecords());<br>                clusterSearchVO.setPostVOList(postVOPage.getRecords());<br>                <span class="hljs-keyword">return</span> clusterSearchVO;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                log.error(<span class="hljs-string">&quot;查询异常&quot;</span>,e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;查询异常&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">ClusterSearchVO</span> <span class="hljs-variable">clusterSearchVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClusterSearchVO</span>();<br>            <span class="hljs-comment">//通过注册获取</span><br>            ClusterSearchDataSource&lt;?&gt; dataSource = clusterSearchDataSouceRegistry.getDataSourceByType(type);<br>            Page&lt;?&gt; page = dataSource.doSearch(searchText,current,pageSize);<br>            clusterSearchVO.setDataList(page.getRecords());<br>            <span class="hljs-keyword">return</span> clusterSearchVO;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>前端变更</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;template&gt;<br>  &lt;div class=<span class="hljs-string">&quot;index-page&quot;</span>&gt;<br>    &lt;a-input-search<br>      v-model:value=<span class="hljs-string">&quot;searchText&quot;</span><br>      placeholder=<span class="hljs-string">&quot;Input search text!&quot;</span><br>      enter-button=<span class="hljs-string">&quot;Search&quot;</span><br>      size=<span class="hljs-string">&quot;large&quot;</span><br>      <span class="hljs-meta">@search</span>=<span class="hljs-string">&quot;onSearch&quot;</span><br>    /&gt;<br>    &lt;!--    &#123;&#123; JSON.stringify(searchParams.text) &#125;&#125;--&gt;<br>    &lt;MyDivider /&gt;<br>    &lt;a-tabs v-model:activeKey=<span class="hljs-string">&quot;activeKey&quot;</span> <span class="hljs-meta">@change</span>=<span class="hljs-string">&quot;onTapChange&quot;</span>&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;post&quot;</span> tab=<span class="hljs-string">&quot;文章&quot;</span>&gt;<br>        &lt;PosLlist :post-list=<span class="hljs-string">&quot;postList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;fig&quot;</span> tab=<span class="hljs-string">&quot;图片&quot;</span>&gt;<br>        &lt;FigList :fig-list=<span class="hljs-string">&quot;figList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>      &lt;a-tab-pane key=<span class="hljs-string">&quot;user&quot;</span> tab=<span class="hljs-string">&quot;用户&quot;</span>&gt;<br>        &lt;UserList :user-list=<span class="hljs-string">&quot;userList&quot;</span> /&gt;<br>      &lt;/a-tab-pane&gt;<br>    &lt;/a-tabs&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; ref, watchEffect &#125; from <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> PosLlist from <span class="hljs-string">&quot;@/views/PosLlist.vue&quot;</span>;<br><span class="hljs-keyword">import</span> FigList from <span class="hljs-string">&quot;@/views/FigList.vue&quot;</span>;<br><span class="hljs-keyword">import</span> UserList from <span class="hljs-string">&quot;@/views/UserList.vue&quot;</span>;<br><span class="hljs-keyword">import</span> MyDivider from <span class="hljs-string">&quot;@/views/MyDivider.vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; from <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> myAxios from <span class="hljs-string">&quot;@/plugins/myAxios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; message &#125; from <span class="hljs-string">&quot;ant-design-vue&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-variable">postList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">userList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">figList</span> <span class="hljs-operator">=</span> ref([]);<br><span class="hljs-type">const</span> <span class="hljs-variable">route</span> <span class="hljs-operator">=</span> useRoute();<br><span class="hljs-type">const</span> <span class="hljs-variable">router</span> <span class="hljs-operator">=</span> useRouter();<br><span class="hljs-type">const</span> <span class="hljs-variable">activeKey</span> <span class="hljs-operator">=</span> route.params.category;<br><span class="hljs-type">const</span> <span class="hljs-variable">initSearchParams</span> <span class="hljs-operator">=</span> &#123;<br>  type: activeKey,<br>  text: <span class="hljs-string">&quot;&quot;</span>,<br>  pageSize: <span class="hljs-number">10</span>,<br>  pageNum: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> ref(route.query.text);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加载单类数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">const</span> <span class="hljs-variable">loadData</span> <span class="hljs-operator">=</span> (params: any) =&gt; &#123;<br>  <span class="hljs-comment">// alert(&quot;loda_data&quot; + params.text);</span><br>  const &#123; type = <span class="hljs-string">&quot;post&quot;</span> &#125; = params;<br>  <span class="hljs-keyword">if</span> (!type) &#123;<br>    message.error(<span class="hljs-string">&quot;type is null&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-type">const</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> &#123;<br>    ...params,<br>    searchText: params.text,<br>  &#125;;<br>  <span class="hljs-comment">// alert(type);</span><br>  myAxios.post(<span class="hljs-string">&quot;search/all&quot;</span>, query).then((res: any) =&gt; &#123;<br>    <span class="hljs-comment">// alert(&quot;asdasd&quot; + query.searchText);</span><br>    <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;post&quot;</span>) &#123;<br>      postList.value = res.datalist;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;user&quot;</span>) &#123;<br>      userList.value = res.dataList;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;fig&quot;</span>) &#123;<br>      figList.value = res.dataList;<br>    &#125;<br>  &#125;);<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-variable">searchParams</span> <span class="hljs-operator">=</span> ref(initSearchParams);<br><span class="hljs-comment">// loadData(initSearchParams);</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 钩子</span><br><span class="hljs-comment"> * 当内部的变量发生变化时，重新触发这个函数</span><br><span class="hljs-comment"> */</span><br>watchEffect(() =&gt; &#123;<br>  <span class="hljs-comment">// alert(&quot;effect&quot; + route.query.text);</span><br>  searchParams.value = &#123;<br>    ...initSearchParams,<br>    text: route.query.text,<br>    type: route.params.category,<br>  &#125; as any;<br>  loadData(searchParams.value);<br>&#125;);<br><span class="hljs-type">const</span> <span class="hljs-variable">onSearch</span> <span class="hljs-operator">=</span> (value: string) =&gt; &#123;<br>  router.push(&#123;<br>    query: &#123;<br>      ...searchParams.value,<br>      text: value,<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-variable">onTapChange</span> <span class="hljs-operator">=</span> (key: string) =&gt; &#123;<br>  router.push(&#123;<br>    path: `/$&#123;key&#125;`,<br>    query: searchParams.value,<br>  &#125;);<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>最终通过三种设计模式使得代码更加简洁</p><h1 id="搜索不够灵活"><a href="#搜索不够灵活" class="headerlink" title="搜索不够灵活"></a>搜索不够灵活</h1><p>数据库的like是包含查询，一个可以查询的字段如果拆分后，则可能搜不到<br>引入专门的搜索引擎</p><h2 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h2><p><a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a><br><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307142227515.png"></p><p><strong>Install:7.17.9</strong><br><strong>ElasticSearch:</strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/install-elasticsearch.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/install-elasticsearch.html</a> [9200端口 给客户端用 9300：给ES集群调用，外部调用不了]<br><strong>kibana:</strong><a href="https://www.elastic.co/guide/en/kibana/7.17/targz.html">https://www.elastic.co/guide/en/kibana/7.17/targz.html</a>（可视化ElasticSearch）[5601]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">可以当成mysql一样的数据库<br>Index索引 ---- Mysql里的表（table）<br>建表、增删改查（查询需要花费的学习时间比较多）<br>用客户端去调用EsticSearch(<span class="hljs-number">3</span>种)<br>语法：SQL、调用SQL的方法（<span class="hljs-number">4</span>种）<br>ES相比于Mysql，能够自动做分词，能够高效的进行模糊查询<br></code></pre></td></tr></table></figure><h3 id="ES索引"><a href="#ES索引" class="headerlink" title="ES索引"></a>ES索引</h3><p>正向索引：理解为书籍的目录，可以帮助你快速找到对应的内容（通过页码找到文章）<br>倒排索引：根据内容找到文章</p><p>1.ES会将内容进行切词，并构建一个表（倒排索引表），键为词，属性为内容的id<br>2.进行搜索时会把搜索内容自动进行分词，并在倒排索引表里进行索引</p><h3 id="ES调用"><a href="#ES调用" class="headerlink" title="ES调用"></a>ES调用</h3><p>1.<strong>通过restful api调用</strong>（http请求）<br><a href="http://localhost:9200/">http://localhost:9200</a> 发了一个GET请求<br>curl命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">curl -X GET <span class="hljs-string">&quot;localhost:9200/?pretty&quot;</span><br></code></pre></td></tr></table></figure><p>2.<strong>kibana -&gt;Managment -&gt;Dev Tools</strong><br>可以自由的对ES进行请求，本质也是（restful api）<br>3.<strong>客户端调用</strong><br>java客户端，go客户端<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/_getting_started.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/_getting_started.html</a></p><h3 id="ES-语法"><a href="#ES-语法" class="headerlink" title="ES 语法"></a>ES 语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">POST logs-my_app-<span class="hljs-keyword">default</span>/_doc<br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;zs&quot;</span>,<br>  <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;2099-05-06T16:21:15.000Z&quot;</span>,<br>  <span class="hljs-string">&quot;event&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;original&quot;</span>: <span class="hljs-string">&quot;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \&quot;GET /images/bg.jpg HTTP/1.0\&quot; 200 24736&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DSL语法：ES自己创建的语法</strong><br>QUERY_DSL:<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET logs-my_app-default/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>根据id查询<br>ECS数据不支持下面命令查询，含有时间戳以及事件字段较为特殊。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET post/_doc/id<br></code></pre></td></tr></table></figure><p>根据id修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">POST post/_doc/id<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xiu gai&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE _data_stream/logs-my_app-default<br></code></pre></td></tr></table></figure><p><strong>EQL:专门查询标准文档的语法</strong><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/eql.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/eql.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">POST event/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;zs&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2099-05-06T16:21:15.000Z&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;event&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \&quot;GET /images/bg.jpg HTTP/1.0\&quot; 200 24736&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><br>GET /event/_eql/search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">   any where 1 == 1</span><br><span class="hljs-string">  &quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>SQL语法</strong><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/sql-getting-started.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/sql-getting-started.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_sql?format=txt<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SELECT * FROM post where title like &#x27;%s%&#x27;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><p>理解为数据库的表结构，有哪些字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET post/_mapping<br></code></pre></td></tr></table></figure><p>ES支持动态Mapping，可以在表创建后，新添加原来不存在的字段记录</p><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/dynamic-field-mapping.html">Dynamic field mapping</a></li></ul><p>ES同样也支持显示的定义文档&#x2F;表结构</p><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/explicit-mapping.html">Explicit mapping</a><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /my-index<span class="hljs-number">-000001</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//keyword不会被分词，例如帖子的分类</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span>   <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-punctuation">&#125;</span>     <br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/test-analyzer.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/test-analyzer.html</a><br><strong>空格分词器</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;whitespace&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span>     <span class="hljs-string">&quot;The quick brown fox.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>标准分词器</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;lowercase&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;asciifolding&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span>      <span class="hljs-string">&quot;Is this déja vu?&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>内置分词器</strong><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-analyzers.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-analyzers.html</a></p><p><strong>IK分词器：一个插件（中文友好，版本有bug，修改配置文件为ElasticSearch的版本7.17.9)</strong><br><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你好我不是小黑子，我是真爱粉&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//ik_smart 是智能分词，尽量选择最像一个词的拆分方式</span><br><span class="hljs-comment">//ik_max_word 尽可能分词，包括组合词</span><br></code></pre></td></tr></table></figure><h3 id="ES打分机制"><a href="#ES打分机制" class="headerlink" title="ES打分机制"></a>ES打分机制</h3><p>搜索每个关键词时，ES是自动对文章中每个关键词进行打分，打分高的排在前边</p><h3 id="Java操作ES"><a href="#Java操作ES" class="headerlink" title="Java操作ES"></a>Java操作ES</h3><p>1.ES官方API<br>2.以前的官方API，已废弃<br>3.Spring Data Elasticsearch<br>Spring-data系列：spring提供的操作数据的框架<br>spring-data-redis：操作redis的一套方法<br>spring-data-mongodb：操作mongodb的一套方法<br>spring-data-elasticsearch：操作elasticsearch<br><a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.4.11/reference/html/">https://docs.spring.io/spring-data/elasticsearch/docs/4.4.11/reference/html/</a><br>自定义方法：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.4.11/reference/html/#repositories.core-concepts">https://docs.spring.io/spring-data/elasticsearch/docs/4.4.11/reference/html/#repositories.core-concepts</a></p><h3 id="在服务器启动elasticsearch服务"><a href="#在服务器启动elasticsearch服务" class="headerlink" title="在服务器启动elasticsearch服务"></a>在服务器启动elasticsearch服务</h3><p>修改config文件，将IP设置为任何人可以访问。除了把network.host的IP为0.0.0.0，<strong>还需要</strong>修改cluster.initial_master_nodes为回环地址。</p><h3 id="修改elasticsearch默认内存"><a href="#修改elasticsearch默认内存" class="headerlink" title="修改elasticsearch默认内存"></a>修改elasticsearch默认内存</h3><p>首先修改系统缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sysctl -w vm.max_map_count=262144<br></code></pre></td></tr></table></figure><p>然后在编辑config目录中的jvm.options,添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Xms2g<br>-Xmx2g<br></code></pre></td></tr></table></figure><h1 id="用ES优化搜索接口"><a href="#用ES优化搜索接口" class="headerlink" title="用ES优化搜索接口"></a>用ES优化搜索接口</h1><p>之前的查询我们是在数据库中进行的，现在我们需要把数据放到ES上。<br>1.建立ES索引（思考哪些字段需要放到ES里进行存储,ES中尽量存放需要用户筛选搜索的数据，频繁变化的数据也不推荐放到ES里存储）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><br>create table if not exists post<br>(<br>    id         bigint auto_increment comment &#x27;id&#x27; primary key<span class="hljs-punctuation">,</span><br>    title      varchar(<span class="hljs-number">512</span>)                       <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;标题&#x27;<span class="hljs-punctuation">,</span><br>    content    text                               <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;内容&#x27;<span class="hljs-punctuation">,</span><br>    tags       varchar(<span class="hljs-number">1024</span>)                      <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;标签列表（json 数组）&#x27;<span class="hljs-punctuation">,</span><br>    thumbNum   int      default <span class="hljs-number">0</span>                 not <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;点赞数&#x27;<span class="hljs-punctuation">,</span><br>    favourNum  int      default <span class="hljs-number">0</span>                 not <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;收藏数&#x27;<span class="hljs-punctuation">,</span><br>    userId     bigint                             not <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;创建用户 id&#x27;<span class="hljs-punctuation">,</span><br>    createTime datetime default CURRENT_TIMESTAMP not <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;创建时间&#x27;<span class="hljs-punctuation">,</span><br>    updateTime datetime default CURRENT_TIMESTAMP not <span class="hljs-literal"><span class="hljs-keyword">null</span></span> on update CURRENT_TIMESTAMP comment &#x27;更新时间&#x27;<span class="hljs-punctuation">,</span><br>    isDelete   tinyint  default <span class="hljs-number">0</span>                 not <span class="hljs-literal"><span class="hljs-keyword">null</span></span> comment &#x27;是否删除&#x27;<span class="hljs-punctuation">,</span><br>    index idx_userId (userId)<br>) comment &#x27;帖子&#x27; collate = utf8mb4_unicode_ci;<br></code></pre></td></tr></table></figure><p>aliases:数据别名，可以用post_v1或者post查询到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT post_v1<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;post&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//text类型支持分词，keyword只能精确匹配</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">//存储时生效的分词器，最大粒度</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">//搜索时生效的分词器，最智能</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">//子字段，假如主字段也希望支持全匹配查询，则通过指定一个fields子字段来实现</span><br>        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">//超过256个字符不允许查询</span><br>            <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;isDelete&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>增删改查</strong><br><strong>1.引入ElasticSearch配置文件&#x2F;&#x2F;使用spring-data整合java操作ElasticSearch时，保证ElasticSearch版本和spring boot的版本兼容</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>2.创建一个用于接受ES数据的实体类</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 帖子 ES 包装类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @author &lt;a href=&quot;https://github.com/liyupi&quot;&gt;程序员鱼皮&lt;/a&gt;</span><br><span class="hljs-comment"> * @from &lt;a href=&quot;https://yupi.icu&quot;&gt;编程导航知识星球&lt;/a&gt;</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">// todo 取消注释开启 ES（须先配置 ES）</span><br>@Document(indexName = <span class="hljs-string">&quot;post&quot;</span>)<br>@Data<br>public class PostEsDTO implements Serializable <span class="hljs-punctuation">&#123;</span><br><br>    private static final String DATE_TIME_PATTERN = <span class="hljs-string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * id</span><br><span class="hljs-comment">     */</span><br>    @Id<br>    private Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标题</span><br><span class="hljs-comment">     */</span><br>    private String title;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内容</span><br><span class="hljs-comment">     */</span><br>    private String content;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标签列表</span><br><span class="hljs-comment">     */</span><br>    private List&lt;String&gt; tags;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建用户 id</span><br><span class="hljs-comment">     */</span><br>    private Long userId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    @Field(index = <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> store = <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> type = FieldType.Date<span class="hljs-punctuation">,</span> format = <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> pattern = DATE_TIME_PATTERN)<br>    private Date createTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新时间</span><br><span class="hljs-comment">     */</span><br>    @Field(index = <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> store = <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> type = FieldType.Date<span class="hljs-punctuation">,</span> format = <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> pattern = DATE_TIME_PATTERN)<br>    private Date updateTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否删除</span><br><span class="hljs-comment">     */</span><br>    private Integer isDelete;<br><br>    private static final long serialVersionUID = <span class="hljs-number">1</span>L;<br><br>    private static final Gson GSON = new Gson();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对象转包装类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param post</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static PostEsDTO objToDto(Post post) <span class="hljs-punctuation">&#123;</span><br>        if (post == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>            return <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        PostEsDTO postEsDTO = new PostEsDTO();<br>        BeanUtils.copyProperties(post<span class="hljs-punctuation">,</span> postEsDTO);<br>        String tagsStr = post.getTags();<br>        if (StringUtils.isNotBlank(tagsStr)) <span class="hljs-punctuation">&#123;</span><br>            postEsDTO.setTags(GSON.fromJson(tagsStr<span class="hljs-punctuation">,</span> new TypeToken&lt;List&lt;String&gt;&gt;() <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-punctuation">&#125;</span>.getType()));<br>        <span class="hljs-punctuation">&#125;</span><br>        return postEsDTO;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 包装类转对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param postEsDTO</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static Post dtoToObj(PostEsDTO postEsDTO) <span class="hljs-punctuation">&#123;</span><br>        if (postEsDTO == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>            return <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        Post post = new Post();<br>        BeanUtils.copyProperties(postEsDTO<span class="hljs-punctuation">,</span> post);<br>        List&lt;String&gt; tagList = postEsDTO.getTags();<br>        if (CollectionUtils.isNotEmpty(tagList)) <span class="hljs-punctuation">&#123;</span><br>            post.setTags(GSON.toJson(tagList));<br>        <span class="hljs-punctuation">&#125;</span><br>        return post;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p><strong>3.在配置文件引入</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">spring<span class="hljs-punctuation">:</span><br>elasticsearch<span class="hljs-punctuation">:</span><br>    uris<span class="hljs-punctuation">:</span> http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:9200</span><br>    username<span class="hljs-punctuation">:</span> root<br>    password<span class="hljs-punctuation">:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h2 id="ES-增删改查"><a href="#ES-增删改查" class="headerlink" title="ES 增删改查"></a>ES 增删改查</h2><p>方法1:继承ElasticsearchRepository（支持常规的可预期的查询，也支持复杂查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostEsDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ElasticsearchRepository</span>&lt;PostEsDTO, Long&gt; &#123;<br><br>    List&lt;PostEsDTO&gt; <span class="hljs-title function_">findByUserId</span><span class="hljs-params">(Long userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法2.使用ElasticsearchRestTemplate（要求的参数多，更灵活，同样支持复杂查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;<br></code></pre></td></tr></table></figure><p><strong>查询DSL</strong><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html</a><br>“must”是布尔查询的一个子句，它表示<strong>所有指定的查询条件都必须满足</strong>，否则就<strong>不会返回任何匹配文档</strong>。例如，在查询中，”must”子句包含多个”match”查询，它们是针对不同的字段进行匹配，只有当一个文档的<strong>所有”match”查询都匹配成功</strong>时，才会被返回。”must”关键字常用于执行全文本或全字段查询。<br>“filter”也是布尔查询的一个子句，它在<strong>不影响最终文档得分</strong>的情况下过滤掉不符合查询条件的文档。”filter”通常用于对查询结果进行精细的筛选过滤，例如要求查询结果中的”status”字段必须等于”published”，同时要求”publish_date”字段在指定日期之后。由于”filter”不参与最终得分的计算，因此它的执行效率一般比”must”高，尤其是在大数据集上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123; <br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123; <br>      <span class="hljs-string">&quot;must&quot;</span>: [ <br>        &#123; <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;title&quot;</span>:   <span class="hljs-string">&quot;Search&quot;</span>        &#125;&#125;,<br>        &#123; <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Elasticsearch&quot;</span> &#125;&#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: [ <br>        &#123; <span class="hljs-string">&quot;term&quot;</span>:  &#123; <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;published&quot;</span> &#125;&#125;,<span class="hljs-comment">//精确查询</span><br>        &#123; <span class="hljs-string">&quot;range&quot;</span>: &#123; <span class="hljs-string">&quot;publish_date&quot;</span>: &#123; <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;2015-01-01&quot;</span> &#125;&#125;&#125;<span class="hljs-comment">//范围查询</span><br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-bool-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-bool-query.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;user.id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kimchy&quot;</span> <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;tags&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;production&quot;</span> <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;range&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;gte&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lte&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">20</span> <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;should&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;tags&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;env1&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;tags&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deployed&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;minimum_should_match&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;boost&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>tips：</p><ol><li>ES中下划线开头的表示系统自动创建的类型，例如使用Spring Data调用ES创建doc时，没有指定ID，但是ES会默认创建_id字段，</li><li>ES的字段即可以接受单个变量，也可以接受数组。</li></ol><h1 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h1><p>一般情况下，如果做搜索查询功能，使用ES来模糊搜索，但是数据以Mysql为主，所以需要把Mysql的数据和ES进行同步，保持一致。（把数据从mysql同步到ES）<br>4种方式，全量同步（首次）十增量同步 （新数据）：</p><ol><li>定时任务，比如1分钟1次，找到 MysQL 中过去几分钟内（至少是定时周期的2倍）发生改变的数据，然后更新到 ES。<br>优点：简单易懂、占用资源少、不用引入第三方中间件<br>缺点：有时间差<br>应用场景：数据短时间内不同步影响不大、或者数据几乎不发生修改</li><li>双写：写数据的时候，必须也去写 ES；更新删除数据库同理。（事务：建议先保证 MySQL 写成功，如果<br>ES 写失败了，可以通过定时任务 ＋日志 ＋告警进行检测和修复（补偿））</li><li>用 Logstash 数据同步管道（一般要配合 kafka 消息队列＋ beats 采集器）：</li></ol><h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><p>传输和处理数据的管道<br><a href="https://www.elastic.co/guide/en/logstash/7.17/getting-started-with-logstash.html">https://www.elastic.co/guide/en/logstash/7.17/getting-started-with-logstash.html</a><br><a href="https://www.elastic.co/cn/downloads/past-releases/logstash-7-17-9">https://www.elastic.co/cn/downloads/past-releases/logstash-7-17-9</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">cd logstash<span class="hljs-number">-7.17</span><span class="hljs-number">.9</span><br>bin/logstash -e &#x27;input <span class="hljs-punctuation">&#123;</span> stdin <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span> output <span class="hljs-punctuation">&#123;</span> stdout <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span>&#x27;<br></code></pre></td></tr></table></figure><p>把Mysql的数据同步给ES</p><ol><li>在IDEA里通过搜索MySQL获取jdbc的JAR包，复制到Logstash的目录 </li><li>在config里编写配置文件（格式很TM严格）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">input &#123;<br>  jdbc &#123;<br>    jdbc_driver_library =&gt; <span class="hljs-string">&quot;/Users/zs/logstash-7.17.9/config/mysql-connector-java-8.0.29.jar&quot;</span><br>    jdbc_driver_class =&gt; <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>    jdbc_connection_string =&gt; <span class="hljs-string">&quot;jdbc:mysql://--.--.--.--:3306/mydatabase&quot;</span><br>    jdbc_user =&gt; <span class="hljs-string">&quot;--&quot;</span><br>    jdbc_password =&gt; <span class="hljs-string">&quot;--&quot;</span><br>    schedule =&gt; <span class="hljs-string">&quot;*/5 * * * * *&quot;</span><br>    statement =&gt; <span class="hljs-string">&quot;SELECT * from post&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>    stdout &#123; codec =&gt; rubydebug &#125;<br>&#125;<br></code></pre></td></tr></table></figure>3.运行LogStash<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/logstash -f ./config/mytask.conf<br></code></pre></td></tr></table></figure></li></ol><p><strong>增量配置(首次同步时需要删除Logstash中data&#x2F;plugs里的文件)</strong><br>可以记录上次更新数据事件，只查出来上次更新数据的时间</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">input <span class="hljs-punctuation">&#123;</span><br>  jdbc <span class="hljs-punctuation">&#123;</span><br>    jdbc_driver_library =&gt; <span class="hljs-string">&quot;/home/zs/logstash-7.17.9/mysql-connector-java-8.0.29.jar&quot;</span><br>    jdbc_driver_class =&gt; <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><br>    jdbc_connection_string =&gt; <span class="hljs-string">&quot;jdbc:mysql://116.204.76.47:3306/mydatabase&quot;</span><br>    jdbc_user =&gt; <span class="hljs-string">&quot;root&quot;</span><br>    jdbc_password =&gt; <span class="hljs-string">&quot;-----&quot;</span><br>    statement =&gt; <span class="hljs-string">&quot;SELECT * from post where updateTime &gt; :sql_last_value and updateTime &lt; now() order by updateTime desc&quot;</span><br>    tracking_column =&gt; <span class="hljs-string">&quot;updatetime&quot;</span><br>    tracking_column_type =&gt; <span class="hljs-string">&quot;timestamp&quot;</span><br>    use_column_value =&gt; <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    jdbc_default_timezone =&gt; <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>    schedule =&gt; <span class="hljs-string">&quot;*/5 * * * * *&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>output <span class="hljs-punctuation">&#123;</span><br>      elasticsearch <span class="hljs-punctuation">&#123;</span><br>        hosts =&gt; <span class="hljs-string">&quot;127.0.0.1:9200&quot;</span><br>index =&gt; <span class="hljs-string">&quot;post_v1&quot;</span><br>        document_id =&gt; <span class="hljs-string">&quot;%&#123;id&#125;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>增量bug</strong><br><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307142227318.png" alt="image.png"><br>1.多了不需要的字段：点赞数（Logstash可以处理数据）<br>2.字段全部变成了小写<br><a href="https://www.elastic.co/guide/en/logstash/7.17/output-plugins.html">https://www.elastic.co/guide/en/logstash/7.17/output-plugins.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json">input <span class="hljs-punctuation">&#123;</span><br>  jdbc <span class="hljs-punctuation">&#123;</span><br>    jdbc_driver_library =&gt; <span class="hljs-string">&quot;/Users/zs/logstash-7.17.9/config/mysql-connector-java-8.0.29.jar&quot;</span><br>    jdbc_driver_class =&gt; <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><br>    jdbc_connection_string =&gt; <span class="hljs-string">&quot;jdbc:mysql://x.x.x.:3306/mydatabase&quot;</span><br>    jdbc_user =&gt; <span class="hljs-string">&quot;root&quot;</span><br>    jdbc_password =&gt; <span class="hljs-string">&quot;----&quot;</span><br>    statement =&gt; <span class="hljs-string">&quot;SELECT * from post where updateTime &gt; :sql_last_value and updateTime &lt; now() order by updateTime desc&quot;</span><br>    tracking_column =&gt; <span class="hljs-string">&quot;updatetime&quot;</span><br>    tracking_column_type =&gt; <span class="hljs-string">&quot;timestamp&quot;</span><br>    use_column_value =&gt; <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    jdbc_default_timezone =&gt; <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>    schedule =&gt; <span class="hljs-string">&quot;*/5 * * * * *&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>filter <span class="hljs-punctuation">&#123;</span><br>    mutate <span class="hljs-punctuation">&#123;</span><br>        rename =&gt;<span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-string">&quot;updatetime&quot;</span> =&gt; <span class="hljs-string">&quot;updateTime&quot;</span><br>  <span class="hljs-string">&quot;userid&quot;</span> =&gt; <span class="hljs-string">&quot;userId&quot;</span><br>    <span class="hljs-string">&quot;createtime&quot;</span> =&gt; <span class="hljs-string">&quot;createTime&quot;</span><br>  <span class="hljs-string">&quot;isdelete&quot;</span> =&gt; <span class="hljs-string">&quot;isDelete&quot;</span>        <br>        <span class="hljs-punctuation">&#125;</span><br>        remove_field =&gt; <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;thumbnum&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;favournum&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><br>output <span class="hljs-punctuation">&#123;</span><br>      elasticsearch <span class="hljs-punctuation">&#123;</span><br>        hosts =&gt; <span class="hljs-string">&quot;127.0.0.1:9200&quot;</span><br>index =&gt; <span class="hljs-string">&quot;post_v1&quot;</span><br>        document_id =&gt; <span class="hljs-string">&quot;%&#123;id&#125;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="订阅数据局流水的同步方式Canal"><a href="#订阅数据局流水的同步方式Canal" class="headerlink" title="订阅数据局流水的同步方式Canal"></a>订阅数据局流水的同步方式Canal</h2><p>实时同步<br>3.37-3.58</p><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p><a href="https://jmeter.apache.org/">https://jmeter.apache.org</a></p><h1 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h1><hr><h1 id="JittorLLM"><a href="#JittorLLM" class="headerlink" title="JittorLLM"></a>JittorLLM</h1><p>我们已经见证了大模型的威力，例如chatGPT4.0 则近乎是在所有考试上碾压了通过者的80%以上，不过其昂贵的使用价格也使得大多数人望而却步。目前的LLM还是属于大力出奇迹的工程项目，随着技术的迭代，本地化部署也可能成为未来的一种趋势，JittorLLM就是一项实现开源LLM模型本地化部署的技术。<br><a href="https://github.com/Jittor/JittorLLMs">https://github.com/Jittor/JittorLLMs</a></p><ol><li>成本低：相比同类框架，本库可大幅降低硬件配置要求（减少80%），没有显卡，2G内存就能跑大模型，人人皆可在普通机器上，实现大模型本地部署；是目前已知的部署成本最低的大模型库；</li><li>支持广：目前支持了4种大模型：<a href="https://github.com/THUDM/ChatGLM-6B">ChatGLM大模型</a>；鹏程<a href="https://openi.org.cn/pangu/">盘古大模型</a>；BlinkDL的<a href="https://github.com/BlinkDL/ChatRWKV">ChatRWKV</a>；国外Meta的<a href="https://github.com/facebookresearch/llama">LLaMA大模型</a>；后续还将支持MOSS等国内优秀的大模型，统一运行环境配置，降低大模型用户的使用门槛。</li><li>可移植：用户不需要修改任何代码，只需要安装Jittor版torch(JTorch)，即可实现模型的迁移，以便于适配各类异构计算设备和环境。</li><li>速度快：大模型加载速度慢，Jittor框架通过零拷贝技术，大模型加载开销降低40%，同时，通过元算子自动编译优化，计算性能相比同类框架提升20%以上。</li></ol><p>部署bug</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">1.</span>命令问题 使用时去掉括号<br>python cli_demo.py <span class="hljs-punctuation">[</span>chatglm|pangualpha|llama|chatrwkv<span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.</span>找不到g++<br>sudo apt-get update<br>sudo apt-get install build-essential<br><span class="hljs-number">3.</span>x86_64-conda_cos6-linux-gnu-c++ command not found<br>conda install gcc_linux<span class="hljs-number">-64</span><br>https<span class="hljs-punctuation">:</span><span class="hljs-comment">//github.com/RcppCore/Rcpp/issues/770</span><br>无效<br><span class="hljs-number">4.</span>资源不够的话需要自行设置内存<br>(glm) PS C<span class="hljs-punctuation">:</span>\Users\zs\JittorLLMs&gt; $env<span class="hljs-punctuation">:</span>JT_SAVE_MEM=<span class="hljs-string">&quot;1&quot;</span><br>(glm) PS C<span class="hljs-punctuation">:</span>\Users\zs\JittorLLMs&gt; $env<span class="hljs-punctuation">:</span>device_mem_limit=<span class="hljs-string">&quot;7000000000&quot;</span><br>(glm) PS C<span class="hljs-punctuation">:</span>\Users\zs\JittorLLMs&gt; $env<span class="hljs-punctuation">:</span>cpu_mem_limit=<span class="hljs-string">&quot;14000000000&quot;</span><br><br></code></pre></td></tr></table></figure><p><strong>对话框前端页面初始化：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;div class=<span class="hljs-string">&quot;message-container&quot;</span>&gt;<br>      &lt;div v-for=<span class="hljs-attr">&quot;message in messages&quot;</span> <span class="hljs-punctuation">:</span>key=<span class="hljs-string">&quot;message.id&quot;</span> class=<span class="hljs-string">&quot;message&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;avatar&quot;</span>&gt;<br>          &lt;a-tooltip <span class="hljs-punctuation">:</span>title=<span class="hljs-string">&quot;message.sender&quot;</span>&gt;<br>            &lt;a-avatar <span class="hljs-punctuation">:</span>src=<span class="hljs-string">&quot;message.avatar&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.sender<span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/a-avatar&gt;<br>          &lt;/a-tooltip&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;content&quot;</span>&gt;<br>          &lt;div class=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;a-tooltip <span class="hljs-punctuation">:</span>title=<span class="hljs-string">&quot;message.sender&quot;</span>&gt;<br>              &lt;span class=<span class="hljs-string">&quot;sender&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.sender <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/span&gt;<br>            &lt;/a-tooltip&gt;<br>            &lt;span class=<span class="hljs-string">&quot;time&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.time <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/span&gt;<br>          &lt;/div&gt;<br>          &lt;div class=<span class="hljs-string">&quot;text&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.text <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;a-input-search<br>      enter-button=<span class="hljs-string">&quot;发送&quot;</span><br>      @search=<span class="hljs-string">&quot;handleSend&quot;</span><br>      v-model<span class="hljs-punctuation">:</span>value = <span class="hljs-string">&quot;inputMessage&quot;</span><br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br>import <span class="hljs-punctuation">&#123;</span> ref <span class="hljs-punctuation">&#125;</span> from <span class="hljs-string">&quot;vue&quot;</span>; <span class="hljs-comment">// 添加 ref 的引入</span><br>import myAxios from <span class="hljs-string">&quot;@/plugins/myAxios&quot;</span>;<br>const inputMessage = ref(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 将 inputMessage 定义成 ref 类型</span><br>const messages = ref(<span class="hljs-punctuation">[</span><br>  <span class="hljs-comment">// 将 messages 定义成 ref 类型，同时初始化它的值</span><br>  <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    sender<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John&quot;</span><span class="hljs-punctuation">,</span><br>    avatar<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://i.pravatar.cc/50?img=1&quot;</span><span class="hljs-punctuation">,</span><br>    time<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10:30 AM&quot;</span><span class="hljs-punctuation">,</span><br>    text<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello, how are you?&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span>);<br>const handleSend = (value<span class="hljs-punctuation">:</span> string) =&gt; <span class="hljs-punctuation">&#123;</span><br>  if (value) <span class="hljs-punctuation">&#123;</span><br>    const newMessage = <span class="hljs-punctuation">&#123;</span><br>      id<span class="hljs-punctuation">:</span> messages.value.length + <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      sender<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Me&quot;</span><span class="hljs-punctuation">,</span><br>      avatar<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://i.pravatar.cc/50?img=2&quot;</span><span class="hljs-punctuation">,</span><br>      time<span class="hljs-punctuation">:</span> new Date().toLocaleTimeString()<span class="hljs-punctuation">,</span><br>      text<span class="hljs-punctuation">:</span> value<span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span>;<br>    messages.value.push(newMessage);<br>    inputMessage.value = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 置空输入框</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.message-container <span class="hljs-punctuation">&#123;</span><br>  padding<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span>px;<br>  border<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span>px solid #e8e8e8;<br><span class="hljs-punctuation">&#125;</span><br>.message <span class="hljs-punctuation">&#123;</span><br>  display<span class="hljs-punctuation">:</span> flex;<br>  margin-top<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.avatar <span class="hljs-punctuation">&#123;</span><br>  margin-right<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.content <span class="hljs-punctuation">&#123;</span><br>  display<span class="hljs-punctuation">:</span> flex;<br>  flex-direction<span class="hljs-punctuation">:</span> column;<br><span class="hljs-punctuation">&#125;</span><br>.info <span class="hljs-punctuation">&#123;</span><br>  display<span class="hljs-punctuation">:</span> flex;<br>  align-items<span class="hljs-punctuation">:</span> baseline;<br>  margin-bottom<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.sender <span class="hljs-punctuation">&#123;</span><br>  margin-right<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span>px;<br>  font-weight<span class="hljs-punctuation">:</span> bold;<br>  font-size<span class="hljs-punctuation">:</span> <span class="hljs-number">14</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.time <span class="hljs-punctuation">&#123;</span><br>  color<span class="hljs-punctuation">:</span> #<span class="hljs-number">999</span>;<br>  font-size<span class="hljs-punctuation">:</span> <span class="hljs-number">12</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.text <span class="hljs-punctuation">&#123;</span><br>  word-break<span class="hljs-punctuation">:</span> break-word;<br>  white-space<span class="hljs-punctuation">:</span> pre-wrap;<br><span class="hljs-punctuation">&#125;</span><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>通过post请求访问后段：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;div class=<span class="hljs-string">&quot;message-container&quot;</span>&gt;<br>      &lt;div v-for=<span class="hljs-attr">&quot;message in messages&quot;</span> <span class="hljs-punctuation">:</span>key=<span class="hljs-string">&quot;message.id&quot;</span> class=<span class="hljs-string">&quot;message&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;avatar&quot;</span>&gt;<br>          &lt;a-tooltip <span class="hljs-punctuation">:</span>title=<span class="hljs-string">&quot;message.sender&quot;</span>&gt;<br>            &lt;a-avatar <span class="hljs-punctuation">:</span>src=<span class="hljs-string">&quot;message.avatar&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.sender<span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/a-avatar&gt;<br>          &lt;/a-tooltip&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;content&quot;</span>&gt;<br>          &lt;div class=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;a-tooltip <span class="hljs-punctuation">:</span>title=<span class="hljs-string">&quot;message.sender&quot;</span>&gt;<br>              &lt;span class=<span class="hljs-string">&quot;sender&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.sender <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/span&gt;<br>            &lt;/a-tooltip&gt;<br>            &lt;span class=<span class="hljs-string">&quot;time&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.time <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/span&gt;<br>          &lt;/div&gt;<br>          &lt;div class=<span class="hljs-string">&quot;text&quot;</span>&gt;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> message.text <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;a-input-search<br>      enter-button=<span class="hljs-string">&quot;发送&quot;</span><br>      @search=<span class="hljs-string">&quot;handleSend&quot;</span><br>      v-model<span class="hljs-punctuation">:</span>value=<span class="hljs-string">&quot;inputMessage&quot;</span><br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br>import <span class="hljs-punctuation">&#123;</span> ref <span class="hljs-punctuation">&#125;</span> from <span class="hljs-string">&quot;vue&quot;</span>;<br>import axios from <span class="hljs-string">&quot;axios&quot;</span>;<br><br>const inputMessage = ref(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 创建响应式变量来存储搜索框的值</span><br><br>const messages = ref(<span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    sender<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Your Sugar Daddy&quot;</span><span class="hljs-punctuation">,</span><br>    avatar<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://i.pravatar.cc/50?img=2&quot;</span><span class="hljs-punctuation">,</span><br>    time<span class="hljs-punctuation">:</span> new Date().toLocaleTimeString()<span class="hljs-punctuation">,</span><br>    text<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Your Sugar Daddy&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span>);<br><br>const handleSend = () =&gt; <span class="hljs-punctuation">&#123;</span><br>  if (inputMessage.value) <span class="hljs-punctuation">&#123;</span><br>    const Message = <span class="hljs-punctuation">&#123;</span><br>      id<span class="hljs-punctuation">:</span> messages.value.length + <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      sender<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>      avatar<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://i.pravatar.cc/50?img=5&quot;</span><span class="hljs-punctuation">,</span><br>      time<span class="hljs-punctuation">:</span> new Date().toLocaleTimeString()<span class="hljs-punctuation">,</span><br>      text<span class="hljs-punctuation">:</span> inputMessage.value<span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span>;<br>    messages.value.push(Message);<br>    const data = JSON.stringify(<span class="hljs-punctuation">&#123;</span> prompt<span class="hljs-punctuation">:</span> inputMessage.value <span class="hljs-punctuation">&#125;</span>);<br>    axios.post(<span class="hljs-string">&quot;http://10.100.35.47:8000&quot;</span><span class="hljs-punctuation">,</span> data).then((res<span class="hljs-punctuation">:</span> any) =&gt; <span class="hljs-punctuation">&#123;</span><br>      const newMessage = <span class="hljs-punctuation">&#123;</span><br>        id<span class="hljs-punctuation">:</span> messages.value.length + <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        sender<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Your Sugar Daddy&quot;</span><span class="hljs-punctuation">,</span><br>        avatar<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://i.pravatar.cc/50?img=2&quot;</span><span class="hljs-punctuation">,</span><br>        time<span class="hljs-punctuation">:</span> new Date().toLocaleTimeString()<span class="hljs-punctuation">,</span><br>        text<span class="hljs-punctuation">:</span> res.data.response<span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#125;</span>;<br>      messages.value.push(newMessage); <span class="hljs-comment">// 修改 messages 数组的值</span><br>    <span class="hljs-punctuation">&#125;</span>);<br>  <span class="hljs-punctuation">&#125;</span><br>  inputMessage.value = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 清空搜索框内容</span><br><span class="hljs-punctuation">&#125;</span>;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.message-container <span class="hljs-punctuation">&#123;</span><br>  padding<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span>px;<br>  border<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span>px solid #e8e8e8;<br><span class="hljs-punctuation">&#125;</span><br>.message <span class="hljs-punctuation">&#123;</span><br>  display<span class="hljs-punctuation">:</span> flex;<br>  margin-top<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.avatar <span class="hljs-punctuation">&#123;</span><br>  margin-right<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.content <span class="hljs-punctuation">&#123;</span><br>  display<span class="hljs-punctuation">:</span> flex;<br>  flex-direction<span class="hljs-punctuation">:</span> column;<br><span class="hljs-punctuation">&#125;</span><br>.info <span class="hljs-punctuation">&#123;</span><br>  display<span class="hljs-punctuation">:</span> flex;<br>  align-items<span class="hljs-punctuation">:</span> baseline;<br>  margin-bottom<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.sender <span class="hljs-punctuation">&#123;</span><br>  margin-right<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span>px;<br>  font-weight<span class="hljs-punctuation">:</span> bold;<br>  font-size<span class="hljs-punctuation">:</span> <span class="hljs-number">14</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.time <span class="hljs-punctuation">&#123;</span><br>  color<span class="hljs-punctuation">:</span> #<span class="hljs-number">999</span>;<br>  font-size<span class="hljs-punctuation">:</span> <span class="hljs-number">12</span>px;<br><span class="hljs-punctuation">&#125;</span><br>.text <span class="hljs-punctuation">&#123;</span><br>  word-break<span class="hljs-punctuation">:</span> break-word;<br>  white-space<span class="hljs-punctuation">:</span> pre-wrap;<br><span class="hljs-punctuation">&#125;</span><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>python后段架设（无上下文）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Request<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">import</span> uvicorn, json, datetime<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment">#add</span><br><span class="hljs-comment">#CORSMiddleware用于处理跨域问题的一个中间件</span><br><span class="hljs-keyword">from</span> fastapi.middleware.cors <span class="hljs-keyword">import</span> CORSMiddleware<br><br>DEVICE = <span class="hljs-string">&quot;cuda&quot;</span><br>DEVICE_ID = <span class="hljs-string">&quot;0&quot;</span><br>CUDA_DEVICE = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;DEVICE&#125;</span>:<span class="hljs-subst">&#123;DEVICE_ID&#125;</span>&quot;</span> <span class="hljs-keyword">if</span> DEVICE_ID <span class="hljs-keyword">else</span> DEVICE<br><br>app = FastAPI()<br><span class="hljs-comment">#add</span><br>origins = [<span class="hljs-string">&quot;*&quot;</span>] <span class="hljs-comment"># 允许所有的请求源</span><br>app.add_middleware(<br>    CORSMiddleware,<br>    allow_origins=origins,<br>    allow_credentials=<span class="hljs-literal">True</span>,<br>    allow_methods=[<span class="hljs-string">&quot;*&quot;</span>],<br>    allow_headers=[<span class="hljs-string">&quot;*&quot;</span>],<br>)<br>/*<br>asdad<br>*/<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_item</span>(<span class="hljs-params">request: Request</span>):<br>    <span class="hljs-keyword">global</span> model<br>    json_post_raw = <span class="hljs-keyword">await</span> request.json()<br>    json_post = json.dumps(json_post_raw)<br>    json_post_list = json.loads(json_post)<br>    prompt = json_post_list.get(<span class="hljs-string">&#x27;prompt&#x27;</span>)<br>    <span class="hljs-comment"># history = json_post_list.get(&#x27;history&#x27;)</span><br>    <span class="hljs-comment"># max_length = json_post_list.get(&#x27;max_length&#x27;)</span><br>    <span class="hljs-comment"># top_p = json_post_list.get(&#x27;top_p&#x27;)</span><br>    <span class="hljs-comment"># temperature = json_post_list.get(&#x27;temperature&#x27;)</span><br>    output = model.run(prompt)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(output, <span class="hljs-built_in">tuple</span>):<br>        response, history = output<br>    <span class="hljs-keyword">else</span>:<br>        response = output<br>        history = []<br>    now = datetime.datetime.now()<br>    time = now.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>    answer = &#123;<br>        <span class="hljs-string">&quot;response&quot;</span>: response,<br>        <span class="hljs-string">&quot;history&quot;</span>: history,<br>        <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-string">&quot;time&quot;</span>: time<br>    &#125;<br>    log = <span class="hljs-string">&quot;[&quot;</span> + time + <span class="hljs-string">&quot;] &quot;</span> + <span class="hljs-string">&#x27;&quot;, prompt:&quot;&#x27;</span> + prompt + <span class="hljs-string">&#x27;&quot;, response:&quot;&#x27;</span> + <span class="hljs-built_in">repr</span>(response) + <span class="hljs-string">&#x27;&quot;&#x27;</span><br>    <span class="hljs-built_in">print</span>(log)<br>    <span class="hljs-keyword">return</span> answer<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;model&quot;</span>, choices=models.availabel_models)<br>    args = parser.parse_args()<br>    model = models.get_model(args)<br>    uvicorn.run(app, host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>, workers=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="项目BUG记录"><a href="#项目BUG记录" class="headerlink" title="项目BUG记录"></a>项目BUG记录</h1><p>聚合搜索中图片业务出现错误：对子业务进行排查发现搜索图片的服务请求走了代理</p><p>ES BUG：<br>已经在kibana中确定了ES正确的对主数据库的数据进行了同步，也可以查出数据，但是使用ES提供的JAVA API无法正常取出数据，DEBUG后发现是Fitter判断帖子是否被删除的语句出现了BUG，删除标志位置反，导致所有的数据都被Fitter过滤掉了，最终返回了一个空对象。</p><p>前端BUG：<br>搜索框使用v-model进行响应式变量绑定，在触发点击事件之后，发现搜索框内容不能正常消失。使用v-model绑定变量时的写法是v-model:value&#x3D;”inputmesage”</p><p>跨域BUG：<br>在网络中，浏览器的域（也称为源）指的是一个网站的唯一标识符。一个网站的域由两个部分组成，一个是主机名（例如，<a href="http://www.example.com/">www.example.com</a>），另一个是协议（例如，<a href="http://或https/">http:&#x2F;&#x2F;或https</a>:&#x2F;&#x2F;）。<br>浏览器的域非常重要，因为它并不允许来自不同域的网站直接访问对方的资源。ChatGLM我部署在了个人电脑上进行测试，导致了前端不光对我的开发电脑进行了请求，同时还请求了另一个域的资源。在python后端对域进行了控制。</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM+mybatis笔记</title>
    <link href="/2023/07/14/SSM%20+%20mybatisplus/"/>
    <url>/2023/07/14/SSM%20+%20mybatisplus/</url>
    
    <content type="html"><![CDATA[<h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><p>以往的业务开发中，容易出现耦合度高的问题。</p><p>**example:**当BookDao发生变化时，需要对使用该对象的服务进行重构。硬编码式的对象创建带来了高耦合度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl</span> implenemts Service&#123;<br>    <span class="hljs-comment">//被丢弃</span><br>    <span class="hljs-comment">//private BookDao = new BookDaoImpl1();</span><br>    <span class="hljs-comment">//新方法</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl1</span> implenemts BookDao&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>       ;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl2</span> implenemts BookDao&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>       ;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>IoC控制反转</strong></p><p>Spring将<strong>对象创建</strong>的<strong>控制权</strong>转移到IoC容器；负责<strong>对象的创建</strong>，<strong>初始化</strong>等一系列工作;被创建或者管理的对象，在IoC容器中称之为<strong>Bean</strong>;在容器中建立bean与bean之间依赖关系的过程，称之为<strong>DI</strong>：依赖注入。</p><p><strong>TIPS</strong>：为什么需要依赖注入呢？</p><p><strong>R</strong>：使用下述代码会出现“对空对象的引用”,因为Serviece接口的实现类依赖于Dao接口实现类的方法，而下述代码并没有提供Dao接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl</span> implenemts Service&#123;<br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>IOC容器统一管理对象的创建与初始化，实现了系统的解耦。</p><h2 id="Ioc-基本入门"><a href="#Ioc-基本入门" class="headerlink" title="Ioc 基本入门"></a>Ioc 基本入门</h2><p>1.导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.将被管理的对象通过配置文件告知IoC容器</p><p>(resource创建spring配置文件【需要坐标导入插件后】)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.DaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.service.impl.ServiceImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.获取IoC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>4.通过IoC容器获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Service</span> <span class="hljs-variable">serviceImpl</span> <span class="hljs-operator">=</span> (Service) ctx.getBean(<span class="hljs-string">&quot;ServiceImpl&quot;</span>);<br>serviceImpl.text();<br></code></pre></td></tr></table></figure><h2 id="IoC-DI入门案例"><a href="#IoC-DI入门案例" class="headerlink" title="IoC DI入门案例"></a>IoC DI入门案例</h2><p>1.在存在依赖关系中的实现类中，删除使用new创建的对象，并提供给IoC容器需要创建对象的Setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    DaoImpl dao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDao</span><span class="hljs-params">(DaoImpl dao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dao = dao;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">text</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;this is in Service&quot;</span>);<br>        dao.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.指定依赖关系</p><p><del>依赖关系的指定使用property属性</del></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.DaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.service.impl.ServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ServiceImpl需要接口Dao的实现类dao；dao的路径则为DaoImpl</p><p>**name:**需要的对象(bean)的具体的引用 <strong>ref</strong>:需要的对象（bean）的ID</p><h2 id="bean的基础配置"><a href="#bean的基础配置" class="headerlink" title="bean的基础配置"></a>bean的基础配置</h2><p>可以在name中指定别名，使用空格分格。</p><p>1.在获取bean时可以使用任意一个name。</p><p>2.在ref也可以使用任意一个name但建议使用id。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.DaoImpl&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;A B C&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>bean默认为单例，使用scope可以指定为非单例。对于非单例的对象不适合用IoC容器管理，这种类往往内部会记录一些成员变量的属性值。</p><p>适合交给bean管理的对象往往常常被复用。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402170537406.png" alt="image-20230402170537406"></p><h2 id="bean的实例化"><a href="#bean的实例化" class="headerlink" title="bean的实例化"></a>bean的实例化</h2><p><strong>bean如何被创建</strong></p><p>1.本质上是对象，创建bean使用构造器对象。</p><p>2.即使私有化也不影响bean对象的创建，底层使用了反射的机制</p><p>3.spring的报错从下往上看</p><p><strong>bean的三种创建方式</strong></p><p>1.构造方法</p><p>2.静态工厂（早期）  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-number">1.</span>构建静态工厂类<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderDaoFactory</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OrderDao <span class="hljs-title function_">getOrderDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderDaoImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">2.bean配置静态工厂类并指定生产对象的方法.<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.factory.OrderDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getOrderDao&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>3.实例工厂（非静态工厂）</p><p><del>不要忘记提供setter方法，否则bean无法进行依赖注入</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>创建工厂<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactory</span>&#123;<br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getUserDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">2.bean配置<br>配置工厂bean<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;userFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.factory.UserDaoFactory&quot;</span>/&gt;</span><br>配置实例化bean <br>factory-method为工厂bean创建对象的方法<br>factory-bean 为工厂bean自身的id<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span> <span class="hljs-attr">factor-bean</span>=<span class="hljs-string">&quot;userFactory&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>4.factorBean模式 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>实现FactoryBean接口<br>方法一泛型一般为接口，返回类型一般为该接口的实现类<br>方法二返回类型一般为接口的字节码文件<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;UserDao&gt;&#123;<br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> class &lt;?&gt; getObjectType()&#123;<br>        <span class="hljs-keyword">return</span> UserDao.class<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">2.配置<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;com.zs.factory.UserDaoFactoryBean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><p>两种方法来<strong>控制</strong>生命周期（运行前 运行时 运行后）</p><p>1.在bean标签中指定init-method以及destory-method</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destory&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>2.实现InitiaLizingBean接口以及DisposableBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>, InitializingBean, DisposableBean &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Start&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;destory&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>两种方法使得destory方法在虚拟机结束之前能运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.使用ClassPathXmlApplicationContext类替代ApplicationContext接口,调用close方法（粗暴）</span><br><span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">atx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDaoImpl</span> <span class="hljs-operator">=</span> (UserDao) atx.getBean(<span class="hljs-string">&quot;UserDaoImpl&quot;</span>);<br>        userDaoImpl.say();<br>        atx.close();<br><span class="hljs-comment">//2.注册一个关闭钩子</span><br>  <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">atx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDaoImpl</span> <span class="hljs-operator">=</span> (UserDao) atx.getBean(<span class="hljs-string">&quot;UserDaoImpl&quot;</span>);<br>        userDaoImpl.say();<br>        atx.registerShutdownHook();<br></code></pre></td></tr></table></figure><h2 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h2><p>依赖注入有<strong>四种</strong>方式:</p><p>​setter引用类型数据注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    CompanyDao companyDao;<br>    UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCompanyDao</span><span class="hljs-params">(CompanyDao companyDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.companyDao = companyDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">()</span> &#123;<br>        companyDao.say();<br>        userDao.say();<br>        System.out.println(<span class="hljs-string">&quot;Service&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CompanyDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.CompanyDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.service.impl.ServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;companyDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CompanyDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>setter基本数据类型注入 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>, InitializingBean, DisposableBean &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nums;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNums</span><span class="hljs-params">(<span class="hljs-type">int</span> nums)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nums = nums;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Start&quot;</span>+name+nums);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nums&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>构造器引用数据类型注入(不用setter而是构造器)</p><p>构造器基本数据类型注入（–把ref换成value）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    Dao dao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceImpl</span><span class="hljs-params">(Dao dao_)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dao = dao_;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        dao.say();<br>        System.out.println(<span class="hljs-string">&quot;this is in Serivce&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">标签不用property而是constor<br>指定对注入的引用有三种方式：name【构造器形参的名字】，type【自动解析类型，适用于基本数据类型以及引用数据类型】，index【按构造器的形参顺序】<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.DaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.service.impl.ServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    Dao dao;<br>    <span class="hljs-comment">//set方法需要提供</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDao</span><span class="hljs-params">(Dao dao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dao = dao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        dao.say();<br>        System.out.println(<span class="hljs-string">&quot;this is in Serivce&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>autowire常用的方法是按类型，因此类型不能重复。</p><p>按名称需要保证有<strong>一个bean</strong>的<strong>id</strong>与<strong>对依赖注入的bean的引用</strong>相同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.dao.impl.DaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.service.impl.ServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h2><p>提供setter方法，以及注入的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WokerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Workder</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> array[];<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; set;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt;map;<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = array;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSet</span><span class="hljs-params">(Set&lt;String&gt; set)</span> &#123;<br>        <span class="hljs-built_in">this</span>.set = set;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Array&quot;</span>+ Arrays.toString(array));<br>        System.out.println(<span class="hljs-string">&quot;Set&quot;</span>+set);<br>        System.out.println(<span class="hljs-string">&quot;List&quot;</span>+list);<br>        System.out.println(<span class="hljs-string">&quot;Map&quot;</span>+map);<br>        System.out.println(<span class="hljs-string">&quot;Properties&quot;</span>+properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件 <property>+<type></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WorkerImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zs.service.impl.WokerImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;array&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;asd&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;asdf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;asdg&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1235&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;zxcv&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;zxcvf&quot;</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;zxcvgcz&quot;</span>&gt;</span>1236<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>asdasdc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>asdaasdassdc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>asdaasdasdsdc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="案例：对数据源进行管理"><a href="#案例：对数据源进行管理" class="headerlink" title="案例：对数据源进行管理"></a>案例：对数据源进行管理</h2><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSourse&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mydatabase&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>获取类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">atx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br><span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSourse</span> <span class="hljs-operator">=</span> (DataSource) atx.getBean(<span class="hljs-string">&quot;dataSourse&quot;</span>);<br>System.out.println(dataSourse);<br></code></pre></td></tr></table></figure><h2 id="spring加载properties"><a href="#spring加载properties" class="headerlink" title="spring加载properties"></a>spring加载properties</h2><p>创建peoperties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">jdbc.driver=com.mysql.jdbc.Driver<br>jdbc.url=jdbc:mysql:///mydatabase<br>jdbc.username=root<br>jdbc.password=123456<br></code></pre></td></tr></table></figure><p>修改命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br>-&gt;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br><br>http://www.springframework.org/schema/beans -&gt;<br>http://www.springframework.org/schema/beans/spring-beans.xsd -&gt;<br>http://www.springframework.org/schema/context<br>http://www.springframework.org/schema/context/spring-context.xsd<br></code></pre></td></tr></table></figure><p>使用context空间加载properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>加载bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSourse&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>解决与系统环境变量冲突的问题：在加载context的标签中禁用系统</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>加载多个配置文件,在location内使用逗号分隔</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>加载Model内所有propertices</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:*.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>加载所有propertices例如jar包中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath*:*.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>从文件系统下加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">pplicationContext</span> <span class="hljs-variable">atx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>(<span class="hljs-string">&quot;C:\\Users\\zs\\Pratice\\src\\main\\resources\\ApplicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>避免强转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSourse1</span> <span class="hljs-operator">=</span> atx.getBean(<span class="hljs-string">&quot;dataSourse&quot;</span>, DataSource.class);<br></code></pre></td></tr></table></figure><p>使用类型(仅限于一个bean)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DataSource</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> atx.getBean(DataSource.class);<br></code></pre></td></tr></table></figure><p>使用顶层接口BeanFactory加载bean</p><p>BeanFactory延迟加载bean，ApplicationConext立即加载。</p><p>ApplicationConext可以在bean中通过<strong>lazy-init</strong>来指定</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230403195220329.png" alt="image-20230403195220329"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230403195303511.png" alt="image-20230403195303511"></p><p><strong>总结</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230404105210465.png" alt="image-20230404105210465"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230404105232323.png" alt="image-20230404105232323"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230404105332856.png" alt="image-20230404105332856"></p><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>定义context空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br>-&gt;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br>http://www.springframework.org/schema/beans -&gt;<br>http://www.springframework.org/schema/beans/spring-beans.xsd -&gt;<br>http://www.springframework.org/schema/context<br>http://www.springframework.org/schema/context/spring-context.xsd<br></code></pre></td></tr></table></figure><p>定义搜索范围</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zs.dao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>使用注解开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;DaoImpl&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Dao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;in&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Componet(&quot;daoImpl&quot;)</span>等价于在xml文件中配置bean<br><span class="hljs-meta">@Service</span> 用于业务层bean定义<br><span class="hljs-meta">@Controller</span> 用于表现层bean定义<br><span class="hljs-meta">@Repository</span> 用于数据层bean定义<br></code></pre></td></tr></table></figure><h2 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h2><p>spring 3.0以后引入的新特性，<strong>使用类</strong>+<strong>注解</strong>的形式完成配置文件的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">创建工具类，引入两个注解<br><span class="hljs-meta">@Configuration</span> : 这是一个用于配置文件的类<br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.zs.dao&quot;,&quot;com.zs.service&quot;&#125;)</span> ：控制扫描范围<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">使用注解配置并传入配置类的字节码文件<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">atx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br></code></pre></td></tr></table></figure><h2 id="bean的管理"><a href="#bean的管理" class="headerlink" title="bean的管理"></a>bean的管理</h2><p>控制非单例 @Scope(“prototype”)    “singleton”</p><p>@PostConstruct 构造器之间：INIT</p><p>@PreDestory 销毁之前 ：非单例不会直接调用destory方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;DaoImpl&quot;)</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Dao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;in&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;asdasd&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注解开发依赖注入"><a href="#注解开发依赖注入" class="headerlink" title="注解开发依赖注入"></a>注解开发依赖注入</h2><p>对<strong>引用类型</strong>进行自动装配注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;beanID&quot;)</span><br><span class="hljs-keyword">private</span> Jdbc jdbc;<br></code></pre></td></tr></table></figure><p><strong>不需要</strong>再注入的bean中提供<strong>setter</strong>方法，多个bean被注入时使用**@Qualifier**注解指定名称</p><p>自动装配建议使用无参构造方法创建对象</p><p>对基本类型进行注入,同样不需要setter方法</p><p>多文件使用<strong>组数格式</strong>{”xxx.properties“，”xx.properties“}，不允许出现通配符*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><p>创建properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">zssssasdasdasdasd</span><br></code></pre></td></tr></table></figure><p>在配置文件加载properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="注解开发管理第三方bean"><a href="#注解开发管理第三方bean" class="headerlink" title="注解开发管理第三方bean"></a>注解开发管理第三方bean</h2><p>创建类并提供一个返回bean的对象的方法，对该方法使用@Bean修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setPassword(<span class="hljs-string">&quot;$&#123;pass&#125;&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///mydatabase&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在config文件中导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(DruidConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>依赖注入:基本类型使用@Value + @PropertySource；引用类型直接将依赖的Bean传递到使用@Bean修饰的方法的形参中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;pass&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String pass;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">(DaoImpl dao)</span>&#123;<br>        System.out.println(dao);<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setPassword(pass);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///mydatabase&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230405142554561.png" alt="image-20230405142554561"></p><h2 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h2><p>1.坐标导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        spring操作数据库相关的--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.使用注解管理配置文件</p><p>创建主配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zs&quot;)</span><br><span class="hljs-meta">@Import(JdbcConfig.class,MyBatisConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>管理jdbc-bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.userName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(userName);<br>        dataSource.setPassword(password);<br>        dataSource.setDriverClassName(driver);<br>        <span class="hljs-keyword">return</span>  dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置MyBatis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">ssfb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        ssfb.setTypeAliasesPackage(<span class="hljs-string">&quot;com.zs.pojo&quot;</span>);<br>        ssfb.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> ssfb;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">msc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        msc.setBasePackage(<span class="hljs-string">&quot;com.zs.dao&quot;</span>);<br>        <span class="hljs-keyword">return</span> msc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建user以及dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userName=&#x27;&quot;</span> + userName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from tb_user&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建service接口以及实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao.findAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">atx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><span class="hljs-type">UserImpl</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> atx.getBean(UserImpl.class);<br>List&lt;User&gt; all = bean.findAll();<br>System.out.println(all);<br></code></pre></td></tr></table></figure><h2 id="spring整合junit"><a href="#spring整合junit" class="headerlink" title="spring整合junit"></a>spring整合junit</h2><p>导入junit包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写注解以及指定配置路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserService</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(userService.findAll());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>面向切面编程，是一种<strong>编程思想</strong>，进行功能增强。</p><p>例如现在有两个方法，这两个方法经常出现卡死的状态，并且这两个方法代码量极多，依赖极多。</p><p>为了不对这两个方法进行修改，通过一个外源方法<strong>meth</strong>，使得这连个方法达到一定运行时间时自动退出。不对这两个方法进行修改。</p><p>上述思想成为无入侵式编程。</p><p>连接点：所有的方法</p><p>切入点：要进行功能增强的一个方法或者是多个方法。</p><p>通知：在切入点执行的操作，共性功能</p><p>通知类：包含通知的类</p><p>切面：描述要进行功能增强的切入点和通知之间的关系。</p><h2 id="AOP案例"><a href="#AOP案例" class="headerlink" title="AOP案例"></a>AOP案例</h2><p>1.导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建通知类以及通知方法 </p><p>3.定义切入点（坑：@Pointcut里边可以写接口或者接口实现类的方法:但调用时必须得用接口）</p><p>坑：与代理模式的运行机理有关系，使用@Scope(“prototype”)修饰代理类则可以调用时可以不用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Support</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(void com.zs.dao.Dao.say())&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-meta">@After(&quot;add()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;asdasdasd&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zs&quot;)</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP工作流程"><a href="#AOP工作流程" class="headerlink" title="AOP工作流程"></a>AOP工作流程</h2><p>1.Spring容器启动</p><p>2.读取已经被配置了的切入点：被**@Before** 或者 <strong>@After</strong>修饰的 被**@Pointcut**修饰的切入点</p><p>3.初始化bean，判定对类中的方法是否匹配到任意切入点：</p><p>​匹配失败则创建对象</p><p>​匹配成功：创建正在被初始化的bean（原始对象，目标对象）的代理对象（代理模式）</p><p>4.获取bean时代理对象时，根据代理对象的运行模式运行原始方法与增强的内容；非代理对象时则正常运行</p><h2 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h2><p>切入点：要进行增强的方法</p><p>切入点表达式：要进行增强的方法的描述方式</p><p>切入点表达式例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//按接口描述</span><br>execution(<span class="hljs-keyword">void</span> com.zs.dao.Dao.update())<br><span class="hljs-comment">//按类描述</span><br>execution(<span class="hljs-keyword">void</span> com.zs.dao.impl.DaoImpl.update())<br></code></pre></td></tr></table></figure><p>切入点表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(动作 (访问修饰符 返回类型 接口/类.方法（参数)异常名  )</span><br></code></pre></td></tr></table></figure><p>快速描述:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配如下公有方法，返回值任意，com.zs下边所有包内的 UserService中开头为find的方法，该方法只有一个参数</span><br><span class="hljs-meta">@Pointcut( execution(public * com.zs.*.UserService.find*(*))  )</span><br><span class="hljs-comment">//匹配如下公有方法，返回值为User，com下边所有包内的UserService方法中的findById，该方法接受任意参数</span><br><span class="hljs-meta">@Pointcut( execution(public User com..UserService.findById(..))  )</span><br><span class="hljs-comment">//匹配如下任意方法，返回值任意，所有包中包含Service的所有方法，该方法接受任意参数</span><br><span class="hljs-meta">@Pointcut(execution(* *..*Service+.*(..)) )</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230406161301086.png" alt="image-20230406161301086"></p><h2 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h2><p>AOP通知共有五种类型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">#前置<br><span class="hljs-meta">@Before(&quot;meth()&quot;)</span> <br>#后置<br><span class="hljs-meta">@After(&quot;meth()&quot;)</span><br>    <br>#环绕-----------常用 可以对原始操作做隔离，不使用p.proceed()则原方法不会执行<br><span class="hljs-meta">@Around(&quot;meth()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint p)</span> thows Throwable&#123;<br>    print(<span class="hljs-string">&quot;before&quot;</span>);<br>    p.proceed();<br>    print(<span class="hljs-string">&quot;after&quot;</span>); <br>&#125;<br>#当被增强的方法有返回值时，需要将方法返回值定义为Object，并原本的结果抛出<br><span class="hljs-meta">@Around(&quot;meth()&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint p)</span> thows Throwable&#123;<br>    print(<span class="hljs-string">&quot;before&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obc</span> <span class="hljs-operator">=</span> p.proceed();<br>    print(<span class="hljs-string">&quot;after&quot;</span>); <br>    <span class="hljs-keyword">return</span> obc;<br>&#125;<br># 方法成功运行以后在运行<br><span class="hljs-meta">@AfterReturning(&quot;meth()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>    print();<br>&#125;<br><br># 方法成功运行以后在运行(抛异常)<br><span class="hljs-meta">@AfterThrowing(&quot;meth()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span>&#123;<br>    print();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例-测量业务接口万次执行效率"><a href="#案例-测量业务接口万次执行效率" class="headerlink" title="案例:测量业务接口万次执行效率"></a>案例:测量业务接口万次执行效率</h2><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建容纳通知对象的对象</p><p>（1）交给容器管理</p><p>（2）声名是切面对象</p><p>（3）创建切入点，匹配需要增强的功能</p><p>（4）声名通知类型</p><p>（5）使用环绕时传入ProceedingJoinPoint接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-number">1</span>)<span class="hljs-meta">@Component</span><br>(<span class="hljs-number">2</span>)<span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectAdvice</span> &#123;<br>    (<span class="hljs-number">3</span>)<span class="hljs-meta">@Pointcut(&quot;execution(* com.zs.service.*Service.*(..))&quot;)</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">servicePt</span><span class="hljs-params">()</span>&#123;&#125;<br>    (<span class="hljs-number">4</span>)<span class="hljs-meta">@Around(&quot;ProjectAdvice.servicePt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runSpeed</span><span class="hljs-params">(<span class="hljs-comment">/*(5)*/</span>ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> pjp.getSignature();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> signature.getName();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">declaringType</span> <span class="hljs-operator">=</span> signature.getDeclaringType();<br>        System.out.println(name+<span class="hljs-string">&quot;   &quot;</span>+declaringType);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(end-start);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP获取通知数据"><a href="#AOP获取通知数据" class="headerlink" title="AOP获取通知数据"></a>AOP获取通知数据</h2><p>5种AOP类型都可以取到参数</p><p>获取的参数<strong>以Object数组</strong>形式封装，此外环绕通知方式还可以通过pjp.proceed(args)对参数进行修改后传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对于其余四种方式采用JoinPoint jp来获取参数</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectAdvice</span> &#123;<br>   <span class="hljs-meta">@Pointcut(&quot;execution(* com.zs.service.*Service.*(..))&quot;)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">servicePt</span><span class="hljs-params">()</span>&#123;&#125;<br>   <span class="hljs-meta">@Around(&quot;ProjectAdvice.servicePt()&quot;)</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">runSpeed</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>       Object[] args = pjp.getArgs();<br>       args[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;123&quot;</span>;<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed(args);<br>       <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于返回值的获取，只有<strong>环绕</strong>以及**@AfterReturning**可以获取</p><p>环绕使用**Object ret &#x3D; pjp.proceed(args);**来获取返回值，还可以通过return方法修改返回值</p><p>而对于@AfterReturning来说，需要通过Value指定需要增强的函数，returning来获取返回值，并且需要保证形参名与注解名称保持一致（Object <strong>ret</strong>，returning &#x3D; “<strong>ret</strong>“）</p><p>在实际的方法体中如果还有JoinPoint的形参，则JoinPoint必须在第一位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(Value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(Object ret)</span>&#123;<br>;<br>&#125;<br></code></pre></td></tr></table></figure><p>afterThrowing获取异常</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230407144205950.png" alt="image-20230407144205950"></p><h2 id="案例：百度网盘密码数据兼容处理"><a href="#案例：百度网盘密码数据兼容处理" class="headerlink" title="案例：百度网盘密码数据兼容处理"></a>案例：百度网盘密码数据兼容处理</h2><p>1.需要增强的方法接受两个参数</p><p>2.判断参数是不是String类型</p><p>3.处理后返回</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230407144600917.png" alt="image-20230407144600917"></p><p>AOP总结：</p><p>当你有大量的功能都需要添加某个操作时，使用AOP</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230407144905261.png" alt="image-20230407144905261"></p><h2 id="spring事务"><a href="#spring事务" class="headerlink" title="spring事务"></a>spring事务</h2><p>事务可以保证一系列操作同成功或失败，spring的事务不光支持<strong>数据层</strong>的操作，还支持<strong>业务层</strong>的操作。</p><p><strong>转账案例</strong></p><p>1.在dao层定义好修改金钱的基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from tb_user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>    <span class="hljs-meta">@Update</span> (<span class="hljs-string">&quot;update tb_user set money = money + #&#123;money&#125; where user_name = #&#123;name&#125;&quot;</span>)<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMoney</span> <span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name, <span class="hljs-meta">@Param(&quot;money&quot;)</span> Integer money)</span>;<br>    <span class="hljs-meta">@Update(&quot;update tb_user set money = money-#&#123;money&#125; where user_name=#&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deMoney</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span>String name,<span class="hljs-meta">@Param(&quot;money&quot;)</span>Integer money)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在服务层定义交易操作，调用dao层完成，使用@Transactional注解打开事务(一般不会定义在实现类上)，也可以在类或者是接口上使用该注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt;selectAll();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String username,Integer money)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(String username,Integer money)</span>;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">account_deal</span><span class="hljs-params">(String userGetMoney,String userOutMoney,Integer money)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在jdbc层声名一个新的ben，创建一个事务管理器，PlatformTransactionManager是Spring的事务管理器的标准实现类，需要更换事务管理器时可以继续做修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">transactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        transactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> transactionManager;<br>    &#125;<br></code></pre></td></tr></table></figure><p>4.在配置文件中通知spring使用注解的方式管理事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zs&quot;)</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class, MyBatisConfig.class&#125;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring如何实现事务管理"><a href="#Spring如何实现事务管理" class="headerlink" title="Spring如何实现事务管理"></a>Spring如何实现事务管理</h2><p><strong>事务局角色：</strong>事务管理员，事务协调员。</p><p>事务协调员：通常指dao层的数据操作层自己开启的事务的方法。</p><p>事务管理员：通常指将使用注解的方法的所调用到的事务协调员的事务全部统一为一个事务的方法。</p><h2 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h2><p>在注解处进行修改</p><p>readOnly：true为只读事务，默认为false</p><p>timeout：事务超时时间，永不超时默认为-1</p><p>rollbackFor：设置什么类型的事务会回滚（默认情况下Error以及runtime exception会回滚），例如在默认情况下IO异常是不会回滚</p><p>noRollbackFor：设置什么类型事务不会回滚。</p><p>propagation：事务传播行为，事务协调员对事务管理员事务的态度</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230409171740724.png" alt="image-20230409171740724"></p><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>属于web层开发技术，是一个表现层框架，与servlet技术等同，但开发更简便。</p><p><strong>入门</strong></p><p>1.导入mvc与servlet的坐标,初始化web项目并修改打包方式，注意web目录结构！！webapp在main路径下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.初始化Servlet容器，加载SpringMVC环境 继承AbstractDispatcherServletInitializer</p><p>AbstractDispatcherServletInitializer是SpringMVC提供的快速初始化Web3.0容器的抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个servlet容器启动的配置类，在里边加载spring的配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainersInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载springMVC容器配置</span><br><span class="hljs-comment">     * Tomcat在启动时会加载到SpringMVC的配置</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createServletApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringMVCConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置那些请求归属于springMVC处理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载spring容器</span><br><span class="hljs-comment">     * 是AnnotationConfigWebApplicationContext 不是AnnotationConfigApplicationContext</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createRootApplicationContext</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//---------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment">//第二种简化写法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainersInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringMVCConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**<span class="hljs-doctag">@Override</span> 过滤器</span><br><span class="hljs-comment">    protected Filter[] getServletFilters() &#123;</span><br><span class="hljs-comment">        CharacterEncodingFilter filter = new CharacterEncodingFilter();</span><br><span class="hljs-comment">        filter.setEncoding(&quot;UTF-8&quot;);</span><br><span class="hljs-comment">        return new Filter[]&#123;filter&#125;;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.配置SpringMVC（SpringMVC属于Spring技术，SpringMVC所有创建的对象都为bean）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Configuration 在加载控制时并且使用了限制访问写法时需要注释掉</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zs.controller&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.编写controller层(等同于servlet功能)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="spring工作流程分析"><a href="#spring工作流程分析" class="headerlink" title="spring工作流程分析"></a>spring工作流程分析</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230410125602293.png" alt="image-20230410125602293"></p><h2 id="SpringMVC加载控制"><a href="#SpringMVC加载控制" class="headerlink" title="SpringMVC加载控制"></a>SpringMVC加载控制</h2><p>SpringMVC只加载控制层的bean，Spring并不负责这部分，加载时需要注意这点，两种方式实现，控制spring配置文件精确加载，控制spring配置文件排除加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(value=&quot;com.zs&quot;,excludeFilters = @ComponentScan.Filter(</span><br><span class="hljs-meta">    type = FilterType.ANNOTATION,</span><br><span class="hljs-meta">    classes = Controller.class</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">              )</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">注意，在使用第二种排除加载控制时，由于Spring主配置文件会扫描所有<span class="hljs-meta">@Configuration</span>修饰的类并加载为bean，因此在此种情况下，使用了<span class="hljs-meta">@Configuration</span>定义的SpringMVC配置文件中的controller依然会被Spring主配置文件加载，加载控制失效。解决此种情况需要注释掉SpringMVC中的<span class="hljs-meta">@Configuration</span>注解。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">atx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> atx.getBean(UserController.class);<br>        System.out.println(bean);<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">atx2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringMVCConfig.class);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> atx2.getBean(UserController.class);<br>        System.out.println(bean2);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">bean3</span> <span class="hljs-operator">=</span> atx.getBean(UserController.class);<br>        System.out.println(bean3);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">bean4</span> <span class="hljs-operator">=</span> atx2.getBean(UserController.class);<br>        System.out.println(bean4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过SpringConfig bean获得的UserController</span><br>com.zs.controller.UserController@67e2d983<br><span class="hljs-comment">//通过SpringMVCConfig bean获得的UserController</span><br>com.zs.controller.UserController@40e6dfe1<br><span class="hljs-comment">//通过SpringConfig bean 二次创建获得的UserController</span><br>com.zs.controller.UserController@67e2d983<br><span class="hljs-comment">//通过SpringMVCConfig bean 二次创建获得的UserController</span><br>com.zs.controller.UserController@40e6dfe1<br></code></pre></td></tr></table></figure><h2 id="PostMan网页接口测试"><a href="#PostMan网页接口测试" class="headerlink" title="PostMan网页接口测试"></a>PostMan网页接口测试</h2><p>注册用</p><h2 id="SpringMVC请求响应路径"><a href="#SpringMVC请求响应路径" class="headerlink" title="SpringMVC请求响应路径"></a>SpringMVC请求响应路径</h2><p>团队开发，每个人设置不同的请求路径，会产生冲突问题，如何解决？</p><p>设置模块名为访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/book/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book save asdasd&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/user/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>功能较多时将@RequestMapping定义到类上设置为请求前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-Get请求-amp-Post请求"><a href="#Spring-Get请求-amp-Post请求" class="headerlink" title="Spring Get请求&amp;Post请求"></a>Spring Get请求&amp;Post请求</h2><p>普通类型发送get请求 路径后使用  ？() &#x3D; ()</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/user/</span>save?name=asdasdasd&amp;age=<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>普通类型获取get请求:直接使用形参接受</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(String name,String age)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        System.out.println(name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>普通类型发送post请求使用x-www-form-urlencoded</p><p>普通类型获取post请求:区别于servlet使用同一个方法即可</p><p>普通类型拦截post请求 在Servlet容器添加过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>       <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>       filter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;filter&#125;;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="请求参数处理"><a href="#请求参数处理" class="headerlink" title="请求参数处理"></a>请求参数处理</h2><p>绑定请求参数和形参的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 在形参上使用<span class="hljs-doctag">@RequestParam</span>注解</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String uname)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        System.out.println(uname);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接受一个对象 保证pojo对象的属性名与请求名一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save2&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save2</span><span class="hljs-params">(User user)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>       System.out.println(user);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>接受一个对象，这个对象中包含一个引用类型的数据，请求用xxx.属性名来传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//http://localhost/user/save2?name=zs&amp;age=10&amp;adress.loc=asd&amp;adress.number=12</span><br><span class="hljs-meta">@RequestMapping(&quot;/save2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save2</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接受多个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//http://localhost/user/save3?likes=game&amp;likes=vedio</span><br> <span class="hljs-meta">@RequestMapping(&quot;/save3&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save3</span><span class="hljs-params">(String [] likes)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        System.out.println(Arrays.toString(likes));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>接受多个数据存储为集合@RequestParam注解表明了把likes给List<String>而不是说List<String>是一个pojo对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//http://localhost/user/save3?likes=game&amp;likes=vedio</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/save4&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save4</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        System.out.println(likes);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="请求参数处理（传递json数据"><a href="#请求参数处理（传递json数据" class="headerlink" title="请求参数处理（传递json数据)"></a>请求参数处理（传递json数据)</h2><p>1.导入json坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在主配置文件用注解开启jason转化为java对象的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebMvc</span><br></code></pre></td></tr></table></figure><p>3.@RequestBody表明List<String>不是pojo对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save5&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save5</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>    System.out.println(likes);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用jason传递对象</p><p>1.定义好相应的jason格式文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;itcast&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">15</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>2.使用@RequestBody表明要传递的数据在请求体中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save6&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save6</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用jason传递带引用的对象</p><p>1.定义好相应的jason格式文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;itcast&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;adress&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;bj&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">13</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>2.@RequestBody表明要传递的数据在请求体中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save6&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save6</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用jason传递多个对象</p><p>1.定义好相应的jason格式文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;zs&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;zs2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">13</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>2.@RequestBody表明要传递的数据在请求体中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save6&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save6</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; user)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230410161357558.png" alt="image-20230410161357558"></p><h2 id="请求参数处理（传递日期时间）"><a href="#请求参数处理（传递日期时间）" class="headerlink" title="请求参数处理（传递日期时间）"></a>请求参数处理（传递日期时间）</h2><p>1.使用date接受</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save6&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save6</span><span class="hljs-params">(Date date)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>    System.out.println(date);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.发送格式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/user/</span>save6?date=<span class="hljs-number">2088</span><span class="hljs-regexp">/08/</span><span class="hljs-number">08</span><br></code></pre></td></tr></table></figure><p>修改接受格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save6&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save6</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span>Date date)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        System.out.println(date);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br><span class="hljs-comment">//http://localhost/user/save6?date=2088-08-08</span><br></code></pre></td></tr></table></figure><p>精确到时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save6&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save6</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span>Date date)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save asdasd&quot;</span>);<br>        System.out.println(date);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br><span class="hljs-comment">//http://localhost/user/save6?date=2088-08-08%2012:12:12</span><br></code></pre></td></tr></table></figure><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>跳转页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jump&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">jump</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;跳转页面&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index.jsp&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>响应文本数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jump&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">jump</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;跳转页面&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;asdasdasd&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>响应POJO对象(导入的josn坐标自动把对象转换为了json)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jump&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">jump</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-type">Adress</span> <span class="hljs-variable">adress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adress</span>();<br>    user.setAdress(adress);<br>    user.setAge(<span class="hljs-number">13</span>);<br>    user.setName(<span class="hljs-string">&quot;zszs&quot;</span>);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jump&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ArrayList&lt;User&gt; <span class="hljs-title function_">jump</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-type">Adress</span> <span class="hljs-variable">adress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adress</span>();<br>    user.setAdress(adress);<br>    user.setAge(<span class="hljs-number">13</span>);<br>    user.setName(<span class="hljs-string">&quot;zszs&quot;</span>);<br>    ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    users.add(user);<br>    users.add(user);<br>    users.add(user);<br>    <span class="hljs-keyword">return</span> users;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@ResponseBody</strong>注解</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">类型：方法注解<br>位置：SpringMVC控制器(controller)方法上方<br>作用：设置当前控制器返回值作为响应体（<span class="hljs-type">String</span>就返回<span class="hljs-type">String</span>，类或集合自动转换为json ,对应功能的接口为HttpMessageConverter接口，由jackson-databind坐标提供对应的功能）<br></code></pre></td></tr></table></figure><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p>表现形式状态转换 </p><hr><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230411140441975.png" alt="image-20230411140441975"></p><p>通过一个路径（<a href="http://localhost/users/1%EF%BC%89%E4%BB%A5%E5%8F%8A%E8%A1%8C%E4%B8%BA%E6%96%B9%E5%BC%8F(GET,PUT)%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E8%B5%84%E6%BA%90%E7%9A%84%E8%AE%BF%E9%97%AE%E8%A1%8C%E4%B8%BA">http://localhost/users/1）以及行为方式(GET,PUT)就可以确定一个资源的访问行为</a></p><p>根据REST风格对资源进行访问成为RESTful</p><p><strong>案例</strong>：注意访问路径的设置，以及请求方式；行为方式需要在参数部分@PathVariable声名，在value处添加一个值与形参名称保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/jump/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;User&gt; <span class="hljs-title function_">jump</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(id);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-type">Adress</span> <span class="hljs-variable">adress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adress</span>();<br>        user.setAdress(adress);<br>        user.setAge(<span class="hljs-number">13</span>);<br>        user.setName(<span class="hljs-string">&quot;zszs&quot;</span>);<br>        ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        users.add(user);<br>        users.add(user);<br>        users.add(user);<br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230411142112290.png" alt="image-20230411142112290"></p><h2 id="RESTFul快速开发"><a href="#RESTFul快速开发" class="headerlink" title="RESTFul快速开发"></a>RESTFul快速开发</h2><p>使用@RestController替代了@Controller与@ResponseBody两个注解的组合功能</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@GetMapping</span>： 是一个组合注解， 通常用来处理get请求，常用于执行查询操作。<br><br>是<span class="hljs-variable">@RequestMapping</span>(value=<span class="hljs-string">&quot;这里写的是请求的路径&quot;</span>,method = RequestMethod.GET)的缩写。<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@PostMapping</span>：是一个组合注解， 通常用来处理post请求，常用于执行添加操作。<br><br>是<span class="hljs-variable">@RequestMapping</span>(value=<span class="hljs-string">&quot;这里写的是请求的路径&quot;</span>,method = RequestMethod.POST)的缩写。写请求路径<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@PutMapping</span>：是一个组合注解，通常用来处理put请求，常用于执行更新操作。<br><br>是<span class="hljs-variable">@RequestMapping</span>(value=<span class="hljs-string">&quot;这里写的是请求的路径&quot;</span>,method = RequestMethod.PUT)的缩写。写请求路径<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@DeleteMapping</span>：是一个组合注解。通常用来处理delete请求，常用于执行删除操作。<br><br>是<span class="hljs-variable">@RequestMapping</span>(value=<span class="hljs-string">&quot;这里写的是请求的路径&quot;</span>,method = RequestMethod.DELETE)的缩写。写请求路径<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230411143326572.png" alt="image-20230411143326572"></p><p>解决MVC访问不到html路径的问题（设置对静态资源的访问权限）,1.创建一个新的类2.让spring主配置类扫描到该类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@Configuration</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringMVCSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void addResourceHandlers(<span class="hljs-type">ResourceHandlerRegistry</span> registry) &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/pages/&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><p>1.创建Maven工程，初始化web项目（别忘了修改打包方式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xml">！！打包方式<br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    ！！作用环境<br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>、<br>     ！！作用环境<br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.完善目录结构</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230412130936448.png" alt="image-20230412130936448"></p><p>dao层因为使用了mybatis自动代理的方式不需要实现类</p><p>3.创建并编写配置文件</p><p>创建Spring，Mybatis，Jdbc，properties（jdbc配置）文件</p><p><strong>spring核心配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zs.service&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>properties描述</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.userName</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql:///mydatabase</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p><strong>Jdbc核心配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-comment">/**读取properties的属性*/</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.userName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-comment">/** 指定一个用于初始化数据源的Bean，返回一个Druid数据源，使用set指定用户名密码地址驱动名*/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(userName);<br>        dataSource.setPassword(password);<br>        dataSource.setDriverClassName(driver);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>mybatis与spring整合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactoryBean</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;com.zs.pojo&quot;</span>);<br>        <span class="hljs-keyword">return</span>  sqlSessionFactoryBean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;com.zs.dao&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>spring整合springMVC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainersInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringMVCConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**<span class="hljs-doctag">@Override</span> 过滤器</span><br><span class="hljs-comment">    protected Filter[] getServletFilters() &#123;</span><br><span class="hljs-comment">    CharacterEncodingFilter filter = new CharacterEncodingFilter();</span><br><span class="hljs-comment">    filter.setEncoding(&quot;UTF-8&quot;);</span><br><span class="hljs-comment">    return new Filter[]&#123;filter&#125;;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zs.controller&quot;)</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写用于数据传输的pojo类</strong></p><p><strong>编写dao层数据操作语言</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;INSERT INTO book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;) &quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Book book)</span>;<br></code></pre></td></tr></table></figure><p><strong>编写service层的接口以及实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Book book)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Book book)</span> &#123;<br>        bookDao.save(book);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>        <span class="hljs-keyword">return</span> bookService.save(book);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>开启事务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>在主配置文件（SpringConfig）使用<span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-number">2.</span>在jdbcconfig文件加载以下bean<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>    <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>    dataSourceTransactionManager.setDataSource(dataSource);<br>    <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>&#125;<br><span class="hljs-number">3.</span>在业务层接口使用<span class="hljs-meta">@Transactional</span>注解修饰<br></code></pre></td></tr></table></figure><h2 id="表现层与前端传输协议"><a href="#表现层与前端传输协议" class="headerlink" title="表现层与前端传输协议"></a>表现层与前端传输协议</h2><p><strong>将数据封装到一个类里</strong>(在controller层)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> Object data;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Object data, Integer code, String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Object data, Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义状态码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SAVE_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20011</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">DELETE_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20021</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">UPDATE_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20031</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">GET_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20041</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SAVE_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20010</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">DELETE_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20020</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer UPDATE_ERR= <span class="hljs-number">20030</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">GET_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20040</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修改controller层的返回值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span>  bookService.save(book);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(flag?Code.SAVE_OK:Code.SAVE_ERR,flag);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230412163943737.png" alt="image-20230412163943737"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230412164210247.png" alt="image-20230412164210247"></p><p><strong>每个层都会可能出现异常，异常处理代码应该写在哪一层？</strong></p><p>把所有异常抛出到表现层进行处理</p><p><strong>在表现层处理异常，每个方法单独都要进行编写，代码量很大</strong></p><p>使用AOP思想</p><p><strong>要自己写吗？</strong></p><p>spring编写了异常处理器</p><p>注：需要确保该class被加载到</p><p>使用@RestControllerAdvice注解来声明这是一个spring的异常处理器，为Rest风格开发的控制器类做增强</p><p>使用@ExceptionHandler注解声名用来处理什么类型的异常</p><p>返回值继续使用前后端通信协议</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectExceptionAspect</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doException</span><span class="hljs-params">(Exception e)</span>&#123;<br>        System.out.println(e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">123</span>,<span class="hljs-string">&quot;asd&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="项目异常处理方案"><a href="#项目异常处理方案" class="headerlink" title="项目异常处理方案"></a>项目异常处理方案</h2><p>项目异常分类<br>    业务昇常 (BusinessException)<br>        规范的用户行为产生的异常<br>        不规范的用户行为操作产生的异常</p><p>​解决：发送对应消息传递给用户，提醒规范操作</p><p>​系统异常 (SystemException)<br>​项目运行过程中可预计且无法避免的异常</p><p>​解决：发送固定消息传递给用户，安抚用户</p><p>​发送特定消息给运维人员，提醒维护<br>​记录日志</p><p>​其他异常 (Exception)<br>​编程人员末预期到的异常</p><p>​解决：发送固定消息传递给用户，安抚用户<br>​发送特定消息给编程人员，提醒维护（纳入预期范围内）<br>​记录日志</p><p>新开一个一个异常包，创建业务异常和系统异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SystemException</span> <span class="hljs-params">(String message, Integer code)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SystemException</span><span class="hljs-params">(String message, Throwable cause, Integer code)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span> <span class="hljs-params">(String message, Integer code)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(String message, Throwable cause, Integer code)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据可能发生的异常抛出自定义异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br><span class="hljs-keyword">if</span>(id == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Busines</span> sException(Code.BUSINESS_ERR，“请不要使用你的技术挑战我的耐性！<span class="hljs-string">&quot;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">//将可能出现为异常进行包裝，转换成自定义异赏</span><br><span class="hljs-string">try&#123;</span><br><span class="hljs-string">int i = 1/0;</span><br><span class="hljs-string">&#125;catch (Exception e)&#123;</span><br><span class="hljs-string">throw new SystemException (Code.SYSTEM_TIMEOUT_ERR, &quot;</span>I wills, imid!<span class="hljs-string">&quot;,e);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">return bookDao.getById(id);</span><br><span class="hljs-string"></span><br><span class="hljs-string">   &#125;</span><br></code></pre></td></tr></table></figure><p>在controller层的异常处理器中进行分类处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectExceptionAdvice</span> &#123;<br><span class="hljs-meta">@ExceptionHandler</span> (SystemException.class)<br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doSystemException</span> <span class="hljs-params">(SystemException ex)</span>&#123;<br><span class="hljs-comment">//记灵日志</span><br><span class="hljs-comment">//发送消息纷运维</span><br><span class="hljs-comment">//发送咖件给开发人员,ex对象发送给不发人员</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(ex.getCode (), data: <span class="hljs-literal">null</span>, ex.getMessage ()) ;<br>&#125;<br><span class="hljs-meta">@ExceptionHandler</span> (BusinessExceptiqn.class)<br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doBusinessException</span> <span class="hljs-params">(BusinessException ex)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(ex.getCode (), data: <span class="hljs-literal">null</span>, ex.getMessage ());<br>&#125;<br><span class="hljs-meta">@ExceptionHandler</span> (Exception.class)<br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doException</span><span class="hljs-params">(Exception ex)</span>&#123;<br><span class="hljs-comment">//记灵日志</span><br><span class="hljs-comment">//发送消息给运维</span><br><span class="hljs-comment">//发送湖件给开发人员，ex矿杂发送给开发人员</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(Code. SYSTEM_ UNKNOW_ ERR, data: nul1，msg：“系统繁忙，请稍后再试！<span class="hljs-string">&quot;)；</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230414134015339.png" alt="image-20230414134015339"></p><p>在访问controller之前和之后添加一些操作。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230414134336584.png" alt="image-20230414134336584"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230414134355457.png" alt="image-20230414134355457"></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis入门</title>
    <link href="/2023/07/14/Redis/"/>
    <url>/2023/07/14/Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h2><p>Redis是一个非关系型（NoSql）数据库，内部的数据以<strong>Key：Value的形式存储</strong>。</p><table><thead><tr><th align="left"></th><th>SQL（关系型数据库）</th><th>NoSQL（非关系型数据库）</th></tr></thead><tbody><tr><td align="left">数据结构</td><td>结构化的二维表</td><td>非结构化（Redis[K,V类型]，elsticsearch[文档类型]）</td></tr><tr><td align="left">数据关联</td><td>可以通过外键进行关联</td><td>没有关联</td></tr><tr><td align="left">查询方式</td><td>SQL标准化查询，不同的关系型数据库语法不会相差很多</td><td>不同的数据库语法标准不同</td></tr><tr><td align="left">事务特性</td><td>ACID</td><td>基本的保证</td></tr><tr><td align="left">存储方式</td><td>存储在硬盘中</td><td>存储在内存中</td></tr><tr><td align="left">拓展性</td><td>数据的分布式存储一般需要借助第三方插件来实现</td><td>一般天然支持数据的分布式存储，例如elasticsearch每个文档都有一个唯一的ID，对应固定的节点存储。</td></tr><tr><td align="left">使用场景</td><td>数据结构固定，对数据安全性，一致性高</td><td>对性能要求高，数据结构不固定，对安全性要求不高</td></tr></tbody></table><p>原子性（Atomicity）：指事务是一个原子操作，要么全部执行，要么全部不执行，事务中的所有操作都是不可分割的整体。<br>一致性（Consistency）：指事务执行前后，数据库的状态必须保持一致，数据库约束不被破坏，如外键约束、唯一约束、默认约束等。<br>隔离性（Isolation）：指数据库系统在处理多个事务并发执行时，要保证相互之间彼此隔离，避免事务间产生相互干扰。<br>持久性（Durability）：指事务一旦提交，则数据库系统中的数据会被永久保存，并不因系统故障而丢失</p><p><strong>特征：</strong><br>键值 (key-value）型，value支持多种不同数据结构，功能丰富<br>单线程，每个命令具备原子性（只使用一个线程来执行所有的命令和操作请求）<br>低延迟，速度快(基于内存、IO多路复用、良好的编码）（创建一个线程同时监听多个客户端的请求）<br>支持数据持久化（断电不丢失）<br>支持主从集群、分片集群<br>支持多浯言客戸端</p><p>Redis 支持主从集群和分片集群，它们都是用于解决 Redis 单机容量和性能瓶颈问题的方案。</p><ol><li>主从集群</li></ol><p>Redis 主从集群是一种通过<strong>主节点</strong>与<strong>多个从节点</strong>实现<strong>数据同步</strong>和<strong>备份</strong>的方式。<strong>主节点</strong>负责<strong>接收和处理</strong>客户端的所有<strong>请求</strong>，<strong>从节点</strong>负责<strong>复制主节点的数据</strong>并<strong>提供查询服务</strong>。主从集群可以提高 Redis 的容量和性能，同时也可以保证数据的高可用性和故障恢复能力。</p><ol start="2"><li>分片集群</li></ol><p>Redis 分片集群是一种通过<strong>将大数据集</strong>分散到多个服务器上来<strong>解决 Redis 单机容量限制</strong>的方案。在 Redis 分片集群中，<strong>将数据划分为多个分片</strong>（Shard），每个分片可以在<strong>不同</strong>的物理服务器上运行，从而提高 Redis 的<strong>并发能力和处理能力</strong>。分片集群可以实现网站的横向扩展，同时也可以提供高可用性。</p><p>两者的区别：</p><p>主从集群是为了<strong>防止单点故障</strong>，提高 Redis 的高可用性和故障恢复能力；而分片集群则是为了<strong>解决单机容量和性能瓶颈</strong>问题。</p><p>一般来说，主从集群适用于读取&#x2F;写入比例比较平衡的场景，而分片集群则适用于读写比例比较悬殊的场景，例如写入操作的比例较大并且需要高吞吐量的场合。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>redis配置文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><p>启动Redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><p>查看redis</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> redis<br></code></pre></td></tr></table></figure><p>连接redis</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli -h <span class="hljs-number">116.204.76.47</span> -p <span class="hljs-number">6379</span> -a <span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><p><strong>KEY的层级结构</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">set</span> user:id:<span class="hljs-number">1</span> &#x27;&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>:<span class="hljs-string">&quot;123 &quot;</span>&#125;&#x27; <br></code></pre></td></tr></table></figure><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504153600968.png" alt="image-20230504153600968"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504153649537.png" alt="image-20230504153649537"></p><h3 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504155516438.png" alt="image-20230504155516438"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504155543108.png" alt="image-20230504155543108"></p><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>可以理解为一个双向链表，有序插入删除快，但查找慢。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504160543805.png" alt="image-20230504160543805"></p><h3 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h3><p>元素不可以重复，查找性能高</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504160959473.png" alt="image-20230504160959473"></p><h3 id="SotredSet"><a href="#SotredSet" class="headerlink" title="SotredSet"></a>SotredSet</h3><p>有序集合，在set 的基础上给每个元素多存了一个分数，类似于 vallue 类型为整型的 Hashvap。特点是有序、查找性能高，适合用于排行榜、统计 TopN。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504172347048.png" alt="image-20230504172347048"></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>redis 官网命令集：<a href="https://redis.io/commands/%EF%BC%8C%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%9Ahttp://www.redis.cn/commands.html">https://redis.io/commands/，中文版：http://www.redis.cn/commands.html</a></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p><strong>通用命令可以操作所有数据结构:help @generic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">不建议使用KEYS<br><br>KEYS *<br><br>KEYS *name*<br><br>删除<br>DEL name age<br><br>判存<br>exists name age<br><br>设置存在时间<br>expire age 20<br><br>查看存在时间-1为永久<br>ttl age<br></code></pre></td></tr></table></figure><h3 id="Redis-Java客户端"><a href="#Redis-Java客户端" class="headerlink" title="Redis Java客户端"></a>Redis Java客户端</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504173559943.png" alt="image-20230504173559943"></p><p>Jedis 的命令和原生recis 命令行的命令一致，学习成本最低（注意它是线程不安全的，通常配合连接池使用）；</p><p>Lettuce 和 Spring 兼容最好(Spring Data Redis 默认集成）、基于 Netty 实现，性能最高；</p><p>Redisson 提供了和 Java 集合用法一致的分布式集合，适用于更复杂的业务场景。</p><h4 id="SpringDataRedis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504175301101.png" alt="image-20230504175301101"></p><p><a href="https://spring.io/projects/spring-data-redis#overview">https://spring.io/projects/spring-data-redis#overview</a></p><p>开启Redis需要三件事：</p><p>1.引入依赖</p><p>2.编写配置文件</p><p>3.在spring-boot启动项注释掉一行代码</p><p>Redis Template 默认使用 JDK <strong>原生</strong>序列化器，<strong>可读性差</strong>、内存占用大，因此可以用以下两种方式来改变序列化机制：</p><ol><li>自定义 Redis Template，指定key 和value 的序列化器</li><li>使用自带的 StringRedis Template， key 和value 都默认使用 String 序列化器，仅支持写入 String 类型的key 和 value。因此需要自己将对象序列化成 String 来写入 Redis， 从Redis 读出数据时也要手动反序列化。</li></ol><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230504185545309.png" alt="image-20230504185545309"></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web笔记</title>
    <link href="/2023/07/14/java%20web/"/>
    <url>/2023/07/14/java%20web/</url>
    
    <content type="html"><![CDATA[<h2 id="html-amp-css"><a href="#html-amp-css" class="headerlink" title="html &amp; css"></a>html &amp; css</h2><p>css决定样式，html是具体内容</p><h2 id="前端的开发流程"><a href="#前端的开发流程" class="headerlink" title="前端的开发流程"></a>前端的开发流程</h2><p>美术 —–&gt;前端 （静态）—–&gt;后端动态</p><h2 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h2><p>1.内容（html）</p><p>2.表现（css）</p><p>3.行为（页面元素与输入设备交互的相应，一般使用jsp实现）</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>通过标签来显示网页中的各个部分，网页文件本身也是一种文件。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230315144951331.png" alt="image-20230315144951331"></p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h2 id="javascrirpit"><a href="#javascrirpit" class="headerlink" title="javascrirpit"></a>javascrirpit</h2><p>是弱类型语言，类型可以随意变化</p><p>js的特点：1.交互性。2.安全性。3.跨平台性。</p><p>两种使用方式，一种是使用jsp的标签,在标签内写代码。另一种是创建一个js文件，在src中引入路径，在一个标签中两种只能选一种方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">变量<br>数值类型，字符串类型，对象类型（object），布尔类型，函数类型（<span class="hljs-keyword">function</span>）<br>特殊变量 <span class="hljs-literal">undefined</span>（所有未赋值的js变量），<span class="hljs-literal">null</span>，<span class="hljs-variable constant_">NAN</span>（非数字非数值）<br><span class="hljs-keyword">var</span> i1;<br><span class="hljs-keyword">var</span> i2;<br>i1=<span class="hljs-number">13</span>;<br>i2=<span class="hljs-string">&quot;asd&quot;</span>;<br><span class="hljs-comment">//NAN</span><br><span class="hljs-title function_">alert</span>(i1*i2)<br><br>== 等于做简单的字面值比较<br>===除了字面值还要比较类型<br><br>jsp中所有变量都可以作为boolean类型的变量去使用，<br><span class="hljs-number">0</span>，<span class="hljs-literal">null</span>，<span class="hljs-literal">undefined</span>，“”都认为是<span class="hljs-literal">false</span><br><br>数组可以定义为空数组，而且可以对空数组进行动态增长<br><span class="hljs-keyword">var</span> A  = []<br><span class="hljs-keyword">var</span> A = [<span class="hljs-number">1</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-number">13</span>]<br>枚举数组时i记得用<span class="hljs-keyword">var</span><br><br>js有两种函数定义方式<br>返回值函数直接<span class="hljs-keyword">return</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-keyword">var</span> fun2 = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br>js的函数不允许重载，只会进行覆盖定义<br>js函数中存在一个隐形参数，有点像java基础的可变长参数，操作方式和java类似<br><br>js中对象的定义两种方式<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>a.<span class="hljs-property">size</span> = <span class="hljs-number">1</span>;<br>a.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-keyword">var</span> a =&#123;<br>size ： <span class="hljs-number">1</span>，<br>add： <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;;<br><br>js中的事件是电脑输入设备与页面交互的相应<br>事件的注册就是说告诉浏览器，当事件响应后要执行哪些操作代码<br>有两种方法，一种是静态注册，一种是动态注册<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316103317978.png" alt="image-20230316103317978"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">onload加载事件，页面加载自动触发<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316103557843.png" alt="image-20230316103557843"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316103609956.png" alt="image-20230316103609956"></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">onclick</span>事件<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316103846027.png" alt="image-20230316103846027"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104026216.png" alt="image-20230316104026216"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104034402.png" alt="image-20230316104034402"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">onblur失去焦点事件，常用于输入框失去焦点后验证输入内容是否合法<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104221926.png" alt="image-20230316104221926"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104326932.png" alt="image-20230316104326932"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104351177.png" alt="image-20230316104351177"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">onchange事件，内容发生改变常用于下拉列表和输入框内容发生改变后的操作<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104548187.png" alt="image-20230316104548187"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104720647.png" alt="image-20230316104720647"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316104754727.png" alt="image-20230316104754727"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">onsubmit事件，提交表单<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316105131688.png" alt="image-20230316105131688"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316105223639.png" alt="image-20230316105223639"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316105546396.png" alt="image-20230316105546396"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316105644204.png" alt="image-20230316105644204"></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">getElementsByname 可以获取所有<span class="hljs-keyword">name</span>相同的标签，实现全选全不选等<br></code></pre></td></tr></table></figure><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><p>辅助jsp开发的js类库，实现了很多浏览器兼容问题</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>可扩展的标记语言</p><p>​可以用来保存数据</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>用java语言操作数据库,同一套java代码操作不同的关系型数据库</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316112320783.png" alt="image-20230316112320783"></p><p>快速入门</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230316112603713.png" alt="image-20230316112603713"></p><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>驱动管理类：</p><p>1.注册驱动 </p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318134505645.png" alt="image-20230318134505645"></p><p>–静态代码块实现了驱动的注册，因为加载了Driver类</p><p>  <img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318134706433.png" alt="image-20230318134706433"></p><p>2.获取数据库连接</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318134931758.png" alt="image-20230318134931758"></p><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>数据库连接对象</p><p>1.获取执行SQL的对象</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318135237296.png" alt="image-20230318135237296"></p><p>2.事务管理</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318135344584.png" alt="image-20230318135344584"></p><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>执行SQL语句</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318140836807.png" alt="image-20230318140836807"></p><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>预编译SQL语句，预防SQL注入的问题</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318143413261.png" alt="image-20230318143413261"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318143844385.png" alt="image-20230318143844385"></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接池是一个容器，用来分配、释放数据库连接。</p><p>连接的建立和释放都是需要占据资源的，因此在一个容器内预先创建好一部分连接资源，在进行动态的管理和分配，降低了资源的消耗，降低了用户的一个使用时间。</p><p>数据库连接池通常是由第三方来实现的，因此以后不需要再通过Manager来创建Connection对象。</p><p>Druid使用方法</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>.导入<br><span class="hljs-number">2</span>.编写配置文件<br><span class="hljs-number">3</span>.创建Druid工厂<span class="hljs-meta">&amp;导入配置文件</span><br><span class="hljs-number">4</span>.获取连接<br></code></pre></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318162936133.png" alt="image-20230318162936133"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318163128810.png" alt="image-20230318163128810"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318163331697.png" alt="image-20230318163331697"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318163503205.png" alt="image-20230318163503205"></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>基于项目兑现模型（POM），使用少量信息来管理项目的构建报告和文档</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318164246607.png" alt="image-20230318164246607"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318164339655.png" alt="image-20230318164339655"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230318164448739.png" alt="image-20230318164448739"></p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>下载地址：<a href="https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/">https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/</a></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323123300392.png" alt="image-20230323123300392"></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323123613348.png" alt="image-20230323123613348"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323123840413.png" alt="image-20230323123840413"></p><h3 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323124343440.png" alt="image-20230323124343440"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323125518598.png" alt="image-20230323125518598"></p><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323131111267.png" alt="image-20230323131111267"></p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323131403976.png" alt="image-20230323131403976"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230323131744483.png" alt="image-20230323131744483"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>1.创建maven项目</p><p>2.导入mybatis（3.5.5）依赖，导入mysql（5.1.46）依赖，导入junit（4.13）依赖，导入log-back依赖并在resources中编写logback配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.编写mybastic核心配置文件，替换连接信息（用户名，密码）</p><p>4.编写UserMapper，修改id，以及结果类型（包+类名）</p><p>5.构建SqlSessionFactory</p><h3 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h3><p>-解决原生方式中的硬编码</p><p>-简化后期执行sql</p><p>1.在resouce目录创建与Mapper接口文件一致的目录结构，使得SQL映射文件与Mapper接口文件在同一目录，且名称保持一致</p><p>2.设置sql映射文件的namespace属性为Mapper接口全限定名</p><p>3.在Mapper接口定义方法，返回值想好是一个还是一堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><span class="hljs-comment">//List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectALL&quot;);</span><br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">usersMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>List&lt;User&gt; users = usersMapper.selectALL();<br>System.out.println(users);<br></code></pre></td></tr></table></figure><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230324163456298.png" alt="image-20230324163456298"></p><h3 id="配置文件完成增删改查"><a href="#配置文件完成增删改查" class="headerlink" title="配置文件完成增删改查"></a>配置文件完成增删改查</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327123024954.png" alt="image-20230327123024954"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327124315376.png" alt="image-20230327124315376"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327124430014.png" alt="image-20230327124430014"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327124630480.png" alt="image-20230327124630480"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327124907867.png" alt="image-20230327124907867"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327125339342.png" alt="image-20230327125339342"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327125751769.png" alt="image-20230327125751769"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327125816766.png" alt="image-20230327125816766"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327130103350.png" alt="image-20230327130103350"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327130542871.png" alt="image-20230327130542871"></p><h3 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327135102172.png" alt="image-20230327135102172"></p><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327131541412.png" alt="image-20230327131541412"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327131752370.png" alt="image-20230327131752370"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327132347233.png" alt="image-20230327132347233"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327132408499.png" alt="image-20230327132408499"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327132550680.png" alt="image-20230327132550680"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">添加时需要手动开启事务，或者在sqlsesstion对象里传入一个<span class="hljs-literal">true</span>开启事务<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327132940897.png" alt="image-20230327132940897"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327132953183.png" alt="image-20230327132953183"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327133123196.png" alt="image-20230327133123196"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327133340616.png" alt="image-20230327133340616"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327133547882.png" alt="image-20230327133547882"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327133731828.png" alt="image-20230327133731828"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327134004906.png" alt="image-20230327134004906"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327133902453.png" alt="image-20230327133902453"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327134114464.png" alt="image-20230327134114464"></p><h2 id="Java-web核心"><a href="#Java-web核心" class="headerlink" title="Java web核心"></a>Java web核心</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327135655796.png" alt="image-20230327135655796"></p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327141810268.png" alt="image-20230327141810268"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327141944833.png" alt="image-20230327141944833"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327142322534.png" alt="image-20230327142322534"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327142605155.png" alt="image-20230327142605155"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327142638989.png" alt="image-20230327142638989"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327142743781.png" alt="image-20230327142743781"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327142826759.png" alt="image-20230327142826759"></p><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327143306349.png" alt="image-20230327143306349"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327143448991.png" alt="image-20230327143448991"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327143647354.png" alt="image-20230327143647354"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327153434278.png" alt="image-20230327153434278"></p><h3 id="IDEA构建Maven-Web项目"><a href="#IDEA构建Maven-Web项目" class="headerlink" title="IDEA构建Maven Web项目"></a>IDEA构建Maven Web项目</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327155345833.png" alt="image-20230327155345833"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327155904714.png" alt="image-20230327155904714"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327160850382.png" alt="image-20230327160850382"></p><p>C+A+S+ S FACES </p><p>ADD XML</p><p>别忘了添加打包方式</p><h3 id="IDEA方便的使用Tomcat"><a href="#IDEA方便的使用Tomcat" class="headerlink" title="IDEA方便的使用Tomcat"></a>IDEA方便的使用Tomcat</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327161901579.png" alt="image-20230327161901579"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327171719393.png" alt="image-20230327171719393"></p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327170746872.png" alt="image-20230327170746872"></p><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327171018097.png" alt="image-20230327171018097"></p><p>Tomcat也有servlet，不可以在运行环境中在运行一次会冲突</p><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327172922344.png" alt="image-20230327172922344"></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327173237943.png" alt="image-20230327173237943"></p><h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327173712045.png" alt="image-20230327173712045"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327174154573.png" alt="image-20230327174154573"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327174707672.png" alt="image-20230327174707672"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327174635394.png" alt="image-20230327174635394"></p><h4 id="urlPattern配置（servlet想被访问必须配置其访问路径）"><a href="#urlPattern配置（servlet想被访问必须配置其访问路径）" class="headerlink" title="urlPattern配置（servlet想被访问必须配置其访问路径）"></a>urlPattern配置（servlet想被访问必须配置其访问路径）</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327174854056.png" alt="image-20230327174854056"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327175133490.png" alt="image-20230327175133490"></p><p>当某个匹配同时满足精确匹配以及目录匹配时，优先访问精确匹配目录</p><p>&#x2F;*的优先级高于&#x2F;</p><p>如果配置了两者任意其一，所有静态资源都无法被访问，因为tomcal中的默认（defaultServlet）被覆盖掉了</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327175851092.png" alt="image-20230327175851092"></p><h4 id="XML配置方式编写Servlet"><a href="#XML配置方式编写Servlet" class="headerlink" title="XML配置方式编写Servlet"></a>XML配置方式编写Servlet</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327184035405.png" alt="image-20230327184035405"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327184050333.png" alt="image-20230327184050333"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327184109149.png" alt="image-20230327184109149"></p><h4 id="request-amp-respond"><a href="#request-amp-respond" class="headerlink" title="request &amp; respond"></a>request &amp; respond</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327184417395.png" alt="image-20230327184417395"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327184529947.png" alt="image-20230327184529947"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327184734803.png" alt="image-20230327184734803"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327185116094.png" alt="image-20230327185116094"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327185407839.png" alt="image-20230327185407839"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327185425150.png" alt="image-20230327185425150"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327185623549.png" alt="image-20230327185623549"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230327185848027.png" alt="image-20230327185848027"></p><p>可以使用模板创建serlvelt</p><p>Request请求表单乱码问题解决</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328105414918.png" alt="image-20230328105414918"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328105946272.png" alt="image-20230328105946272"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328110045039.png" alt="image-20230328110045039"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328110417287.png" alt="image-20230328110417287"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328110546805.png" alt="image-20230328110546805"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328110727629.png" alt="image-20230328110727629"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328110926016.png" alt="image-20230328110926016"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328111046690.png" alt="image-20230328111046690"></p><p>重定向需要写虚拟路径</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328111223033.png" alt="image-20230328111223033"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328111451121.png" alt="image-20230328111451121"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328111510811.png" alt="image-20230328111510811"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328112013163.png" alt="image-20230328112013163"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328112036862.png" alt="image-20230328112036862"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328112257937.png" alt="image-20230328112257937"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230328112322170.png" alt="image-20230328112322170"></p><h3 id="案例用户登录和注册"><a href="#案例用户登录和注册" class="headerlink" title="案例用户登录和注册"></a>案例用户登录和注册</h3><p>1.创建项目并修改打包方式为war</p><p>2.ctrl+shift+alt+s 进行web项目初始化（目录补全）</p><p>3.数据库的创建</p><p>4.在java工程目录创建pojo包，web包以及mapper包，在web包里创建request包以及response包</p><p>5.创建数据接受的对象类</p><p>6.导入MyBatis，Mysql，severlet（狗把东西设置访问范围<scope>provided</scope>）,tomcat驱动坐标</p><p>7.创建mybatis-config的核心配置文件到resources目录中；配置别名的包目录，以及mapper目录</p><p>8.在resources使用目录的方式创建与mapper包目录结构一致的目录，并创建usermapper xml文件，修改命名空间(具体到接口)</p><p>9.在html文件中的表单项中的action指定相对路径 &#x2F;Login_resiger&#x2F;loginServlet</p><p>10.右键使用模板创建servelet，并修改路径为9的路径，在servelt中的doPost调用doGet方法</p><p>11.使用request的方法获取用户名和密码</p><p>12.编写servelt</p><h2 id="jsp-Java-Server-Pages"><a href="#jsp-Java-Server-Pages" class="headerlink" title="jsp(Java Server Pages)"></a>jsp(Java Server Pages)</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329145317459.png" alt="image-20230329145317459"></p><h3 id="jsp入门"><a href="#jsp入门" class="headerlink" title="jsp入门"></a>jsp入门</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329145439871.png" alt="image-20230329145439871"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329150546484.png" alt="image-20230329150546484"></p><h3 id="jsp脚本"><a href="#jsp脚本" class="headerlink" title="jsp脚本"></a>jsp脚本</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329150816690.png" alt="image-20230329150816690"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329151912223.png" alt="image-20230329151912223"></p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329152535621.png" alt="image-20230329152535621"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329152657366.png" alt="image-20230329152657366"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329152744551.png" alt="image-20230329152744551"></p><h3 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h3><h2 id="MVC模式和三层架构"><a href="#MVC模式和三层架构" class="headerlink" title="MVC模式和三层架构"></a>MVC模式和三层架构</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329153154450.png" alt="image-20230329153154450"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329153450631.png" alt="image-20230329153450631"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329153538004.png" alt="image-20230329153538004"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>补充maven插件</p><p>设置自动导包</p><p>完成品牌数据的增删改查</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.创建maven项目，修改打包方式为war，补齐目录结构，web-INF拖到webapp里<br><span class="hljs-number">2</span>.坐标的补充 mysql mybitas serverlet（provided） <span class="hljs-keyword">jsp（provided） </span><span class="hljs-keyword">jstl </span>standard tomcat插件<br></code></pre></td></tr></table></figure><p><strong>目录结构</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329162701795.png" alt="image-20230329162701795"></p><p><strong>坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MVC_demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.数据库表的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_brand(<br>id int primary key auto_increment,<br>brand_name varchar(20),<br>company_name varchar(20),<br>ordered int,<br>description varchar(100),<br>status int<br>);<br>insert into tb_brand (brand_name,company_name,ordered,description,status) values (&#x27;小米辣条&#x27;,&#x27;小米&#x27;,3,&#x27;are you ok&#x27;,1);<br></code></pre></td></tr></table></figure><p>4.在pojo下创建实体类</p><p>5.mybatices核心配置文件，为mapper代理开发配置目录（com.zs.mapper）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--起别名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zs.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mydatabase?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--mapper代理开发路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zs.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.在com.zs.mapper（资源）中配置xml文件，在mapper（com.zs.mapper）中配置接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zs.mapper.BrandMapper&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>需求一:查询所有</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230329165709167.png" alt="image-20230329165709167"></p><p>构建工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionFactoryUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getSqlSessionFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.在mapper层编写sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BrandMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from tb_brand&quot;)</span><br>    <span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span><br>    List&lt;Brand&gt; <span class="hljs-title function_">selectALL</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在service层创建调用mapper层的方法（首先创建类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrandService</span> &#123;<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();<br>    <span class="hljs-keyword">public</span> List&lt;Brand&gt; <span class="hljs-title function_">sellectALL</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>        <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>        List&lt;Brand&gt; brands = mapper.selectALL();<br>        sqlSession.close();<br>        <span class="hljs-keyword">return</span> brands;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在web层编写servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/selectAllServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectAllServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//调用service层服务查询</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BrandService</span> <span class="hljs-variable">brandService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrandService</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//封装查询数据</span><br>        List&lt;Brand&gt; brands = brandService.sellectAll();<br>        System.out.println(brands);<br>        <span class="hljs-comment">//存入request域中</span><br>        request.setAttribute(<span class="hljs-string">&quot;brands&quot;</span>,brands);<br>        <span class="hljs-comment">//转发到Brand.jsp中</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/brand.jsp&quot;</span>).forward(request,response);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-built_in">this</span>.doGet(request,response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.index层构建查询按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/MVC_demo/selectAllServlet&quot;</span>&gt;</span>查询所有<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.jsp展示页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: zs<br>  Date: <span class="hljs-number">2023</span>/<span class="hljs-number">3</span>/<span class="hljs-number">29</span><br>  Time: <span class="hljs-number">17</span>:<span class="hljs-number">19</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%--&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jstl/core&quot;</span> %&gt;--%&gt;<br>&lt;%@ taglib uri=<span class="hljs-string">&quot;http://java.sun.com/jstl/core_rt&quot;</span> prefix=<span class="hljs-string">&quot;c&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Tittle&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>items=$&#123;brands&#125;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span> cellspacing=<span class="hljs-string">&quot;0&quot;</span> width=<span class="hljs-string">&quot;800&quot;</span>&gt;<br>    &lt;tr align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>    &lt;td&gt;order name&lt;/td&gt;<br>    &lt;td&gt;brandname&lt;/td&gt;<br>    &lt;td&gt;companyname&lt;/td&gt;<br>    &lt;td&gt;order&lt;/td&gt;<br>    &lt;td&gt;descptrion&lt;/td&gt;<br>    &lt;td&gt;statuss&lt;/td&gt;<br>    &lt;/tr&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;brands&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;brand&quot;</span> varStatus=<span class="hljs-string">&quot;status&quot;</span>&gt;<br>    &lt;tr align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;brand.brandName&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;brand.companyName&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;brand.ordered&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;brand.description&#125;&lt;/td&gt;<br>        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;brand.status==1&#125;&quot;</span>&gt;<br>            &lt;td&gt;启用&lt;/td&gt;<br>        &lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br>        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;brand.status!=1&#125;&quot;</span>&gt;<br>            &lt;td&gt;禁用&lt;/td&gt;<br>        &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;/tr&gt;<br>&lt;/c:forEach&gt;<br>&lt;/table&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>需求2添加商品</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230330143719855.png" alt="image-20230330143719855"></p><p>1.在dao层（mapper）编写添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;INSERT INTO tb_brand values(null,#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;))</span><span class="hljs-string">&quot;)</span><br><span class="hljs-string">    void add(Brand brand);</span><br></code></pre></td></tr></table></figure><p>2.在service层调用dao（mapper）的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Brand brand)</span>&#123;<br>      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>      <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>      mapper.add(brand);<br>    <span class="hljs-comment">//修改数据库记得提交事务</span><br>      sqlSession.commit();<br>      sqlSession.close();<br>  &#125;<br></code></pre></td></tr></table></figure><p>3.编写页面代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--添加按钮--&gt;<br>&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;新增&quot;</span> id=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>&lt;!--通过jsp绑定单击事件--&gt;<br>&lt;script&gt;<br>    document.getElementById(<span class="hljs-string">&quot;add&quot;</span>).onclick=function ()&#123;<br>        location.href =<span class="hljs-string">&quot;/MVC_demo/addBrand.jsp&quot;</span>;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>4.编写addBrand.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;h3&gt;添加品牌&lt;/h3&gt;<br>&lt;form action=<span class="hljs-string">&quot;/MVC_deom/addServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    品牌名称:&lt;input name=<span class="hljs-string">&quot;brandName&quot;</span>&gt;&lt;br&gt;<br>    企业名称:&lt;input name=<span class="hljs-string">&quot;companyName&quot;</span>&gt;&lt;br&gt;<br>    排序:&lt;input name=<span class="hljs-string">&quot;ordered&quot;</span>&gt;&lt;br&gt;<br>    描述信息:&lt;textarea rows=<span class="hljs-string">&quot;5&quot;</span> clos=<span class="hljs-string">&quot;20&quot;</span> name=<span class="hljs-string">&quot;description&quot;</span>&gt;&lt;/textarea&gt;&lt;br&gt;<br>    状态:<br>    &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span>&gt; 禁用<br>    &lt;<span class="hljs-type">input</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;禁用 &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>5.在web层编写AddServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BrandService</span> <span class="hljs-variable">brandService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrandService</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;brandName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;companyName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;ordered&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;description&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;status&quot;</span>);<br><br>        <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brand</span>();<br>        brand.setBrandName(brandName);<br>        brand.setDescription(description);<br>        brand.setCompanyName(companyName);<br>        brand.setOrdered(Integer.parseInt(ordered));<br>        brand.setStatus(Integer.parseInt(status));<br>        brandService.add(brand);<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/selectAllServlet&quot;</span>).forward(request,response);<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-built_in">this</span>.doGet(request,response);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>需求三:修改商品</strong></p><p>  —–回显数据</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230330161345027.png" alt="image-20230330161345027"></p><p>1.dao层编写sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from tb_brand where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span><br>Brand <span class="hljs-title function_">selectById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>编写service层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Brand <span class="hljs-title function_">selectById</span><span class="hljs-params">(Integer id)</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> mapper.selectById(id);<br>    sqlSession.close();<br>    <span class="hljs-keyword">return</span> brand;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.处理servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/selectByIdServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectByIdServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BrandService</span> <span class="hljs-variable">brandService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrandService</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> brandService.selectById(Integer.parseInt(id));<br>        request.setAttribute(<span class="hljs-string">&quot;brand&quot;</span>,brand);<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/update.jsp&quot;</span>).forward(request,response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-built_in">this</span>.doGet(request,response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在jsp预览数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: zs<br>  Date: <span class="hljs-number">2023</span>/<span class="hljs-number">3</span>/<span class="hljs-number">30</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">50</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ taglib uri=<span class="hljs-string">&quot;http://java.sun.com/jstl/core_rt&quot;</span> prefix=<span class="hljs-string">&quot;c&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;修改品牌&lt;/h3&gt;<br>&lt;form action=<span class="hljs-string">&quot;/MVC_demo/addServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    品牌名称:&lt;input name=<span class="hljs-string">&quot;brandName&quot;</span> value=<span class="hljs-string">&quot;$&#123;brand.brandName&#125;&quot;</span>&gt;&lt;br&gt;<br>    企业名称:&lt;input name=<span class="hljs-string">&quot;companyName&quot;</span>value=<span class="hljs-string">&quot;$&#123;brand.companyName&#125;&quot;</span>&gt;&lt;br&gt;<br>    排序:&lt;input name=<span class="hljs-string">&quot;ordered&quot;</span> value=<span class="hljs-string">&quot;$&#123;brand.ordered&#125;&quot;</span>&gt;&lt;br&gt;<br>    描述信息:&lt;textarea rows=<span class="hljs-string">&quot;5&quot;</span> clos=<span class="hljs-string">&quot;20&quot;</span> name=<span class="hljs-string">&quot;description&quot;</span>&gt;$&#123;brand.description&#125;&lt;/textarea&gt;&lt;br&gt;<br>    状态:<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;brand.status==0&#125;&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span> checked&gt;禁用<br>        &lt;<span class="hljs-type">input</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;启用 &lt;br&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;brand.status==1&#125;&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span> &gt;禁用<br>        &lt;<span class="hljs-type">input</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span> checked&gt;启用 &lt;br&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>—-修改数据</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230330164512544.png" alt="image-20230330164512544"></p><p>1.编写dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Update(&quot;update tb_brand set brand_name=#&#123;brandName&#125;,companyName=#&#123;companyName&#125;,ordered=#&#123;ordered&#125;,description=#&#123;description&#125;,status=#&#123;status&#125; where id = #&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure><p>2.编写service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Brand brand)</span>&#123;<br>      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>      <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>      mapper.update(brand);<br>      sqlSession.commit();<br>      sqlSession.close();<br>  &#125;<br></code></pre></td></tr></table></figure><p>3.修改页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: zs<br>  Date: <span class="hljs-number">2023</span>/<span class="hljs-number">3</span>/<span class="hljs-number">30</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">50</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ taglib uri=<span class="hljs-string">&quot;http://java.sun.com/jstl/core_rt&quot;</span> prefix=<span class="hljs-string">&quot;c&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;修改品牌&lt;/h3&gt;<br>&lt;form action=<span class="hljs-string">&quot;/MVC_demo/updateServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>&lt;%--    隐藏域传参--%&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;id&quot;</span> value=<span class="hljs-string">&quot;$&#123;brand.id&#125;&quot;</span>&gt;<br>    品牌名称:&lt;input name=<span class="hljs-string">&quot;brandName&quot;</span> value=<span class="hljs-string">&quot;$&#123;brand.brandName&#125;&quot;</span>&gt;&lt;br&gt;<br>    企业名称:&lt;input name=<span class="hljs-string">&quot;companyName&quot;</span>value=<span class="hljs-string">&quot;$&#123;brand.companyName&#125;&quot;</span>&gt;&lt;br&gt;<br>    排序:&lt;input name=<span class="hljs-string">&quot;ordered&quot;</span> value=<span class="hljs-string">&quot;$&#123;brand.ordered&#125;&quot;</span>&gt;&lt;br&gt;<br>    描述信息:&lt;textarea rows=<span class="hljs-string">&quot;5&quot;</span> clos=<span class="hljs-string">&quot;20&quot;</span> name=<span class="hljs-string">&quot;description&quot;</span>&gt;$&#123;brand.description&#125;&lt;/textarea&gt;&lt;br&gt;<br>    状态:<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;brand.status==0&#125;&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span> checked&gt;禁用<br>        &lt;<span class="hljs-type">input</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;启用 &lt;br&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;brand.status==1&#125;&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span> &gt;禁用<br>        &lt;<span class="hljs-type">input</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;status&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span> checked&gt;启用 &lt;br&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>4.编写servelet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zs.web;<br><br><span class="hljs-keyword">import</span> com.zs.pojo.Brand;<br><span class="hljs-keyword">import</span> com.zs.service.BrandService;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/updateServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BrandService</span> <span class="hljs-variable">brandService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrandService</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;brandName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;companyName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;ordered&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;description&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;status&quot;</span>);<br><br>        <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brand</span>();<br>        brand.setId(Integer.parseInt(id));<br>        brand.setBrandName(brandName);<br>        brand.setDescription(description);<br>        brand.setCompanyName(companyName);<br>        brand.setOrdered(Integer.parseInt(ordered));<br>        brand.setStatus(Integer.parseInt(status));<br>        brandService.update(brand);<br><span class="hljs-comment">//        System.out.println(brand);</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/selectAllServlet&quot;</span>).forward(request,response);<br><span class="hljs-comment">//        System.out.println(&quot;asdasd&quot;);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-built_in">this</span>.doGet(request,response);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331144946884.png" alt="image-20230331144946884"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span>协议是无状态的，也就是说服务器每次都会把请求视为新的请求。这对于例如购物车添加，保持用户的登陆啊都会造成困难。<br></code></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331153428805.png" alt="image-20230331153428805"></p><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331153856012.png" alt="image-20230331153856012"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331154300738.png" alt="image-20230331154300738"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331154323786.png" alt="image-20230331154323786"></p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p> <img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331154644571.png" alt="image-20230331154644571"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331155334879.png" alt="image-20230331155334879"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331161143788.png" alt="image-20230331161143788"></p><h3 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230331162014891.png" alt="image-20230331162014891"></p><h2 id="Fiter"><a href="#Fiter" class="headerlink" title="Fiter"></a>Fiter</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402123420741.png" alt="image-20230402123420741"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">访问所有资源都需要的操作可以一次性在过滤器里完成<br>例如登陆时，如果不判断用户是否登录，则登录功能没有必要<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402123639794.png" alt="image-20230402123639794"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402123912327.png" alt="image-20230402123912327"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402124148165.png" alt="image-20230402124148165"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402124311978.png" alt="image-20230402124311978"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402124420861.png" alt="image-20230402124420861"></p><p>1.在web下创建filter包，并创建Filter实现Filter接口</p><p>2.使用@WebFilter注解指定拦截范围</p><p>3.重写doFiter的放行逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>       <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span>(HttpServletRequest)request;<br>       String urs[] =&#123;<span class="hljs-string">&quot;/login.jsp&quot;</span>,<span class="hljs-string">&quot;/loginServlet&quot;</span>,<span class="hljs-string">&quot;/register.jsp&quot;</span>,<span class="hljs-string">&quot;/registerServlet&quot;</span>&#125;;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURI().toString();<br>       <span class="hljs-keyword">for</span> (String ur : urs) &#123;<br>           <span class="hljs-keyword">if</span>(url.contains(ur))&#123;<br>               chain.doFilter(request, response);<br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>       <span class="hljs-keyword">if</span>(user!=<span class="hljs-literal">null</span>)<br>           chain.doFilter(request, response);<br>       <span class="hljs-keyword">else</span>&#123;<br>           req.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>,<span class="hljs-string">&quot;没登陆&quot;</span>);<br>           req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="Lister"><a href="#Lister" class="headerlink" title="Lister"></a>Lister</h2><p>基本不用了</p><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402130753479.png" alt="image-20230402130753479"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span><span class="hljs-selector-class">.AJAX</span>可以直接解析？？？的数据，不需要再依赖于jsp。<span class="hljs-selector-tag">HTML</span>+AJAX有利于前后端的分离<br><span class="hljs-number">2</span><span class="hljs-selector-class">.AJAX</span>的异步使得不需要等待服务器端的响应而继续执行<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402131326813.png" alt="image-20230402131326813"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402141019111.png" alt="image-20230402141019111"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402141150768.png" alt="image-20230402141150768"></p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402141403204.png" alt="image-20230402141403204"></p><p>​                                                                                                                                                                                                                         </p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402141532795.png" alt="image-20230402141532795"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230402141646264.png" alt="image-20230402141646264"></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Avaj!</title>
    <link href="/2023/07/14/JAVA%E9%B1%BC%E7%9A%AE%E8%B7%AF%E7%BA%BF/"/>
    <url>/2023/07/14/JAVA%E9%B1%BC%E7%9A%AE%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="JDK的安装与配置"><a href="#JDK的安装与配置" class="headerlink" title="JDK的安装与配置"></a>JDK的安装与配置</h2><p>1.下载jdk-8并安装</p><p><a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">https://www.oracle.com/java/technologies/downloads/#java8-windows</a></p><p>在安装过程中程序会提醒是否安装jre，jre是运行字节码文件的<strong>运行环境</strong>，jdk是<strong>开发环境</strong>。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230126132016921.png" alt="image-20230126132016921"></p><p>2.在系统变量里新建两个<strong>系统</strong>变量</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(1)</span><br>JAVA_HOME<br>jkd路径<br><br><span class="hljs-comment">(2)</span> JAVA<span class="hljs-number">5</span>以后可以缺省<br>CLASSPATH<br>.;<span class="hljs-meta">%</span>JAVA_HOME<span class="hljs-meta">%</span>\lib\dt.jar;<span class="hljs-meta">%</span>JAVA_HOME<span class="hljs-meta">%</span>\lib\tools.jar;<br><br></code></pre></td></tr></table></figure><p>3.在<strong>系统变量</strong>里的<strong>Path</strong>新建三个<strong>环境</strong>变量</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haml">(1)<br><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\bin<br>(2)<br><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\jre\bin<br>(3)<br>jdk路径定位到bin<br></code></pre></td></tr></table></figure><p>4.在shell里验证环境配置</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">javac -<span class="hljs-built_in">version</span> 编译器<br>java  -<span class="hljs-built_in">version</span> 解释器<br></code></pre></td></tr></table></figure><h2 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h2><p>java的源代码文件不可以直接执行，需要编译器将其转换为字节码文件（Class），java解释器才可以运行。</p><p>在查看里可以设置显示文件后缀名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>          <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>          System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行时使用解释器运行（无需带后缀）</p><p>java HelloWorld</p><p>java的字节码文件并不会直接被操作系统所识别，而是运行在java的虚拟机（JVM）上的。虚拟机主要是一个翻译的工作，承担了跨平台的翻译工作。java在不同平台生成的字节码文件是一致的，可以被jre环境识别。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>1.java一个源文件中<strong>只能</strong>有<strong>一个</strong>使用<strong>public 修饰的类</strong>，<strong>其他的类数目不限</strong>，且<strong>每一个类</strong>经过<strong>编译</strong>后都会生成<strong>对应的字节码文件</strong>。</p><p>2.源文件中<strong>如果包含public类</strong>，那么文件名<strong>必须</strong>按照<strong>该类名进行命名</strong>。</p><p>3.主方法<strong>不一定</strong>非要<strong>定义在public类</strong>中，如定义在其他类中，入口方法就是<strong>非public类的main方法</strong>。</p><h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zs</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span>    <br></code></pre></td></tr></table></figure><p>使用eclipse生成文档注释时使用project -&gt; Generate -&gt; javadoc</p><p> 指定编码 -encoding UTF-8 -charset UTF-8</p><h3 id="java代码规范"><a href="#java代码规范" class="headerlink" title="java代码规范"></a>java代码规范</h3><ol><li>类，方法的注释使用javadoc的方式来写。</li><li>shift + Tab 可实现整体代码左移</li><li>运算加一个空格</li></ol><h3 id="java-变量"><a href="#java-变量" class="headerlink" title="java 变量"></a>java 变量</h3><p><strong>+运算：</strong></p><p>​当左右两边为数值时为加法运算；</p><p>​当左右有一个字符串时则做拼接运算；</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>​<strong>基本数据类型</strong></p><p>​1.数值型</p><p>​整数型：byte1，short2，int4，long8</p><p>​浮点数：float4，double8</p><p>​2.字符型：char2 采用unicode作为编码方式</p><p>​3.布尔型：boolean1：true，false</p><p>​<strong>引用数据类型</strong></p><p>​类：class</p><p>​接口：interface</p><p>​数组：[]</p><p><strong>tips：</strong></p><p>​java各整数，浮点数类型的表示范围是固定的，无关于操作系统</p><p>​定义long末尾加L，定义float末尾加f</p><p>​int型由一个符号位+31个表示位组成</p><p>​float由一个符号位+指数位+尾数位构成，尾数位可能丢失（小数都是近似数）</p><p>​<strong>不要对两个运算过后的小数进行相等判断</strong>，应该以两个数差值的绝对值的范围内进行判断</p><p>​unicode编码所有的语言，ascii编码范围更小一些（128个字符）。</p><p>​boolean不可以为空，不可以初始化为1或0</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230212161607125.png" alt="image-20230212161607125"></p><h4 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h4><p>混合精度运算时，低精度自动向最高精度转换</p><p>byte -&gt; short -&gt;int -&gt;long -&gt;float -&gt;double</p><p>char-&gt;int -&gt;long -&gt;float -&gt;double</p><p>当加减运算中存在short，byte，char时，会自动转化为int类型</p><p>boolean不参加转换 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</p><p>char可以在初始化时为整数类型，但不能被初始化为int变量类型，需要强制转换</p><p>​int a &#x3D; 10;</p><p>​char c &#x3D; (char)a;</p><h4 id="基本数据类型与String类型的相互转换"><a href="#基本数据类型与String类型的相互转换" class="headerlink" title="基本数据类型与String类型的相互转换"></a>基本数据类型与String类型的相互转换</h4><p>​基本数据类型转换为String：s+” “</p><p>​String类型转换为基本数据类型：使用包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> Byte.parseByte(<span class="hljs-string">&quot;11&quot;</span>);<br><span class="hljs-type">short</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> Short.parseShort(<span class="hljs-string">&quot;11&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">dd</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;11&quot;</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">ee</span> <span class="hljs-operator">=</span> Long.parseLong(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-type">float</span> <span class="hljs-variable">ff</span> <span class="hljs-operator">=</span> Float.parseFloat(<span class="hljs-string">&quot;3.14&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">gg</span> <span class="hljs-operator">=</span> Double.parseDouble(<span class="hljs-string">&quot;3.14&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">hh</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(<span class="hljs-string">&quot;true&quot;</span>);<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;asdasd&quot;</span>.charAt(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="java-API"><a href="#java-API" class="headerlink" title="java API"></a>java API</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230212160547954.png" alt="image-20230212160547954"></p><p>类里还有枚举</p><h3 id="java运算符"><a href="#java运算符" class="headerlink" title="java运算符"></a>java运算符</h3><p><strong>tips:</strong></p><p>​取模的运算为 a%b &#x3D; a-a&#x2F;b*b</p><p>​^为<strong>异或</strong>操作，ab不同时为真，否则为假</p><p>​短路运算（）&amp;（）  （）|（） 会在第一个条件为false或true时继续执行后边的条件</p><p>​复合运算会进行自动类型转换，byte b+&#x3D;2不报错，byte b；b&#x3D;b+2 报错，</p><p><strong>三目运算符</strong>：</p><p>​（ 【关系运算】 ？【表达式1】：【表达式2】）</p><p>​返回的是一个表达式，要求表达式是可以赋值给接受变量的类型（或者可以自动转换）；</p><p>​        &lt;&lt; ，&gt;&gt;移位运算，左移是乘2，右移是除2</p><pre><code class="hljs">   \&gt;\&gt;\&gt; 无符号移位运算，例如颜色的+ - 不代表数值类型</code></pre><h3 id="java-标识符"><a href="#java-标识符" class="headerlink" title="java 标识符"></a>java 标识符</h3><p>所有的包名全部小写加点</p><p>所有的类名首字母大写</p><p>所有的方法名首字母小写后边的字母大写</p><p>所有常量名全部大写</p><h3 id="java-键盘输入"><a href="#java-键盘输入" class="headerlink" title="java 键盘输入"></a>java 键盘输入</h3><p>使用scanner类来实现，表示简单的文本扫描器</p><p>1.导包 import java.util.Scanner</p><p>2.创建实例化对象 Scanner mysc &#x3D; new Scanner(System.in)</p><p>3.接受 String s &#x3D; mysc.netx();</p><h3 id="java进制"><a href="#java进制" class="headerlink" title="java进制"></a>java进制</h3><p>二进制使用0b或者0B开头</p><p>八进制使用0开头</p><p>十进制正常</p><p>十六进制使用0x或0X表示，且A-F不区分大小写</p><p><strong>其他进制到10进制的转换</strong>：<br>$$<br>\sum_{i&#x3D;low} s_i*(c)^{i-1},c&#x3D;2,8,16<br>$$<br><strong>10进制向其他进制转换</strong>：<br>$$<br>for \ 除以进制c ,记录余数与商<br>\直到无法相除时，将余数倒着串起来<br>$$<br><strong>2进制向8进制和16进制转换</strong>：<br>$$<br>从低位到高位开始进行划分\八进制使用3，十六进制时用4，一次划分，并转换为对应进制的数<br>$$<br><strong>8进制和16进制向2进制进行转换：</strong><br>$$<br>从低位到高位开始\<br>把每一个低位转成对应的3，或4的二进制数<br>$$</p><h4 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h4><p>1.二进制的最高位是符号位，0正1负</p><p>2.正数的原码，反码，补码都一样</p><p>3.负数的反码符号位不变，其他按位取反</p><p>4.负数的补码等于它的反码加1，负数的反码等于负数的补码减1</p><p>5.0的反码补码都是0</p><p>6.java没有无符号数</p><p>7.计算机运算时<strong>都是以补码</strong>的方式来运算</p><p>8.看计算结果时需要看原码</p><p><a href="https://blog.csdn.net/qq_48052049/article/details/125994544">https://blog.csdn.net/qq_48052049/article/details/125994544</a></p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p><strong>switch</strong>细节：</p><p>​表达式的数据类型应和case后的常量保持一致，或者是可以自动转化成相互比较的类型</p><p>​表达式中的返回值必须是（byte，short，int，char，enum，String)</p><p>​case中的值必须是常量</p><p>​别忘记default和break</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//数组的动态初始化 -- 直接创建到内存</span><br><span class="hljs-type">int</span> a[] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">// new时才会分配内存 --不直接创建到内存</span><br><span class="hljs-type">int</span> a[];<br>a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>]<br><span class="hljs-comment">//数组的静态初始化</span><br><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br><br><span class="hljs-comment">//-------------------------------------</span><br>java中的数组可以创建为引用类型<br>数组属于引用类型，数组型数据是对象<br><br><span class="hljs-comment">//-------------------------------------</span><br>基本数据类型赋值，如<span class="hljs-type">int</span> a = <span class="hljs-number">1</span>，这个值就是具体的数据（值拷贝，例如再另b=a，修改a的值时b不会受到影响）<br>数组在 默认 情况下是引用传递，赋的值是地址<br><br><span class="hljs-comment">//二维数组第一维中存放的不是具体的值而是地址</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>java数组常用<br><span class="hljs-regexp">//</span>获取长度<br>n = a.length<br></code></pre></td></tr></table></figure><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">类：对现实的抽象<br>对象：类的实例化<br><span class="hljs-section">属性（字段，成员变量，filed【字段】）：还是变量，但是可以由修饰符进行修饰，public，protected，默认，private</span><br><span class="hljs-section">-----------------</span><br>拷贝对象时要拷贝每一个属性<br><br>使用对象.hashCode()来查看地址（实际上是把对象的实际地址转化为了一个整数）<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">同一个类里的方法可以直接调用不需要创建对象<br>方法的返回值可以为任意类型（基本，引用）<br>引用类型传递的是地址，因此可以通过形参影响实参<br></code></pre></td></tr></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">java允许同一个类中存在名称相同的方法，但是要求形参不同。（形参类型，形参个数，形参顺序）<br></code></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">当存在多个方法名称相同，功能相同，单参数个数不同，可可以使用可变参数优化<br>在定义方法时， <span class="hljs-built_in">int</span>...nums  <br>将其视为一个数组来访问其中的元素<br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">局部变量不可以加修饰符<br></code></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs wren">构造器用来在类创建的时候对成员变量进行初始化<br>构造器由修饰符 类名 形参组成<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>int <span class="hljs-variable">age</span>;<br><span class="hljs-title class_">String</span> <span class="hljs-variable">name</span>;<br><span class="hljs-variable">public</span> <span class="hljs-title function_">student</span>(_<span class="hljs-params">age</span>,_<span class="hljs-params">name</span>)&#123;<br><span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-variable">_age</span>;<br><span class="hljs-variable">name</span><span class="hljs-operator">=</span> <span class="hljs-variable">_name</span>;<br>&#125;<br>&#125;<br>构造器可以看作一种特殊的方法，因此可以通过重载定义多个构造器。<br>一旦显示定义构造器，则默认的构造器会被覆盖掉，除非使用  类名()&#123;&#125;  再次显示定义<br>任何一个构造器都默认带有一个<span class="hljs-variable language_">super</span>()<br></code></pre></td></tr></table></figure><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">java虚拟机给每一个对象分配一个<span class="hljs-keyword">this</span>，代表当前对象<br><span class="hljs-number">1.</span><span class="hljs-keyword">this</span>关键字可以用来访问本类的属性，方法，构造器；<br><span class="hljs-keyword">this</span>可以用于区分本类的属性以及在同一作用域内的局部变量<br><span class="hljs-keyword">this</span>访问成员方法时 <span class="hljs-keyword">this</span>.meth(int <span class="hljs-number">1</span>,int <span class="hljs-number">2.</span>..)<br><span class="hljs-keyword">this</span>访问构造器时必须放在第一条语句，且后边的写法只能在构造器中使用，<span class="hljs-keyword">this</span>(parter1,parter2...)<br><span class="hljs-keyword">this</span>不能再类定义的外部使用<br><span class="hljs-number">2.</span><span class="hljs-keyword">this</span>访问本类的属性或者方法不存在时，会寻找父类中可以访问的属性或方法<br></code></pre></td></tr></table></figure><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xl">菜单字体的调整：<span class="hljs-function"><span class="hljs-title">file</span> -&gt;</span><span class="hljs-function"><span class="hljs-title">setting</span> -&gt;</span>Appearence (外观) <br>编辑器字体的调整 :<span class="hljs-function"><span class="hljs-title">file</span> -&gt;</span><span class="hljs-function"><span class="hljs-title">setting</span> -&gt;</span>E<span class="hljs-function"><span class="hljs-title">ditor</span> -&gt;</span>font<br><br>ctrl + D 删除整行<br>alt + / 自动补全<br>ctrl + alt + ⬇ 复制这一行<br><span class="hljs-function"><span class="hljs-title">alt</span> + enter 自动导入（在 setting-&gt;</span><span class="hljs-function"><span class="hljs-title">edito</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">general</span>-&gt;</span>autoimport 中选中）<br>ctrl+alt+L 自动格式化<br>ctrl+shift + F10  运行<br>alt + insert 生成构造器<br>ctrl + H 查看继承关系<br>ctrl + B 定位到相应的方法<br>.var 自动生成变量<br>自定义模板 <span class="hljs-function"><span class="hljs-title">setting</span> -&gt;</span>E<span class="hljs-function"><span class="hljs-title">ditor</span> -&gt;</span>Live Templates<br></code></pre></td></tr></table></figure><h3 id="java包"><a href="#java包" class="headerlink" title="java包"></a>java包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">包具有三大作用<br><span class="hljs-number">1.</span>可以控制访问范围<br><span class="hljs-number">2.</span>可以使得区分类名相同的类<br><span class="hljs-number">3.</span>便于管理<br>包的本质就是创建不同的文件夹管理不同的类,<span class="hljs-keyword">package</span>需要放在类的最上边，一个类最多只允许有一句<span class="hljs-keyword">package</span><br>包的命名规范<br>com.公司名.项目名.业务模块名<br>常用的包<br>java.lang基本包默认引入<br>java.util 系统提供的工具包<br>java.net 网络包<br>java.awt gui界面开发<br>包的引入:<br><span class="hljs-keyword">import</span> java.util.Scanner<br><span class="hljs-keyword">import</span> java.util.*  导入包下所有的类<br>常用的包:<br>java.util.Scanner() 键盘输入<br>java.util.Arrays 数组相关<br><br></code></pre></td></tr></table></figure><h3 id="java访问修饰符"><a href="#java访问修饰符" class="headerlink" title="java访问修饰符"></a>java访问修饰符</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">用于控制方法和属性的访问权限（范围）<br><span class="hljs-keyword">public</span> 不同的包 ，同一个包，本类，子类<br><span class="hljs-keyword">protected</span> 同一个包 ，本类，子类<br>默认 同一个包，本类<br>私有 本类<br></code></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">封装的实现<br>1.将属性私有化，使得外部无法直接对属性进行修改<br>2.提供一个公共的方法实现对属性的赋值（可以在内部加入判断流程）<br>3.提供一个公共的方法实现对属性的获取<br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript">子类可以直接使用父类所有的属性和方法，但私有的属性需要提供一个公开的方法进行访问或修改（封装）<br>初始化子类时，父类的构造器会被调用。<br>创建子类对象时，默认情况总会调用父类的无参构造器，如果父类没有提供午餐构造器，则必须在子类的构造器中用<span class="hljs-variable language_">super</span>区指定使用父类的哪个构造器完成对父类的初始化工作<br>spuer必须在构造器的第一行调用，且只能在构造器中使用，因此<span class="hljs-variable language_">this</span>和spuer在一个构造器中只能二选一执行，即显示调用父类的某个构造器，或显示调用自身类中的某个构造器<br>java所有类都是<span class="hljs-title class_">Object</span>类的子类<br>父类构造器的调用不限于直接父类，将一直向上追溯到<span class="hljs-title class_">Object</span>类，并从上往下执行<br>java是单继承机制，一个子类只能有一个父类<br>访问子类的属性时，从该子类开始，按照继承树从下向上寻找该属性，直到<span class="hljs-built_in">object</span>类截至<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230216183353858.png" alt="image-20230216183353858"></p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">super代表父类的引用，用于访问父类的属性，方法，构造器<br>在一个类中，如果<span class="hljs-built_in">cal</span>()方法是可以访问的，使用this<span class="hljs-selector-class">.cal</span>() 和<span class="hljs-built_in">cal</span>()是一样的效果 。当需要访问父类的方法时，使用super访问，如果直接父类没有该方法，则由继承关系自下向上寻找该方法。<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230217125556158.png" alt="image-20230217125556158"></p><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">方法的重写也叫方法的覆盖<br><br>需要满足以下三个条件<br><span class="hljs-number">1</span>.子类方法的参数，方法名称和父类方法的参数，方法名称完全一样<br><span class="hljs-number">2</span>.子类返回的类型《<span class="hljs-operator">=</span>父类返回类型<br><span class="hljs-number">3</span>.子类方法不能缩小父类方法的访问权限<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230217131429896.png" alt="image-20230217131429896"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">方法或属性具有多种形态<br>为了提高代码的复用性<br>方法的重写和方法的重载体现了多态<br>重载：传入参数的不同，调用了不同的方法<br>重写：对象的不同，调用了不同的方法<br><br>对象的多态<br>一个对象的编译类型和运行类型可以不一致，例如令一个父类指向一个子类 A <span class="hljs-keyword">a</span> = <span class="hljs-built_in">new</span> B()，即可以定义一个父类对象接受所有子类对象<br>编译类型看定义时 = 的左边 ，运行类型看 = 的右边<br>运行类型是可以变化的 如 A <span class="hljs-keyword">a</span> = <span class="hljs-built_in">new</span> B(), <span class="hljs-keyword">a</span> = <span class="hljs-built_in">new</span> C()<br>编译类型不可以变化<br>多态的向上转型(可以提高代码的复用性，具体来说就是定义方法时定义为父类，传入参数时可以传入子类作为参数)<br>父类的引用指向了子类的对象<br>A <span class="hljs-keyword">a</span> = <span class="hljs-built_in">new</span> B() ;   B extends A<br>编译类型为A，运行类型为 B<br>可以调用父类所有的成员（访问权限）<br>不能调用子类中的特有成员（可以调用子类中重写的父类的方法）【因为在编译阶段，编译类型决定了能调用哪些成员，例如 A <span class="hljs-keyword">a</span>的编译类型是A，B的特有成员与方法无法访问】<br><br>多态的向下转型（访问子类的成员方法和属性）<br>B b = (B) <span class="hljs-keyword">a</span> <br>只能强转父类的引用，不能强转父类的对象         <span class="hljs-comment">---  向上或向下转型的双方必须存在继承关系</span><br>要求父类的引用必须指向的是当前目标类型的对象    <span class="hljs-comment">---</span><br>可以调用子类类型中所有的成员<br></code></pre></td></tr></table></figure><h3 id="属性的重写机制"><a href="#属性的重写机制" class="headerlink" title="属性的重写机制"></a>属性的重写机制</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">属性没有重写这个概念，属性的值看编译类型 A <span class="hljs-keyword">a</span> = <span class="hljs-built_in">new</span> B（）;其中A是B的父类<br>使用<span class="hljs-keyword">a</span>.<span class="hljs-keyword">a</span>访问A与B同名的属性时，不会像方法的重写一样去访问B中的属性，而是去访问了A中的属性<br><br><span class="hljs-keyword">a</span> instanceof b ：判断<span class="hljs-keyword">a</span>对象的运行类型是否为B类型的子类型<br></code></pre></td></tr></table></figure><h3 id="java的动态绑定机制"><a href="#java的动态绑定机制" class="headerlink" title="java的动态绑定机制"></a>java的动态绑定机制</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">当调用对象的方法的时候，该方法会和该对象的内存地址/运行类型绑定<br>当调用对象的属性时，没有动态绑定机制，哪里声明，哪里使用<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">多态数组<br>    数组定义为父类类型，里边保存的元素为子类类型 <br>    需要访问子类的特有方法时，可以用<span class="hljs-keyword">instanceof</span>判断是哪个子类，并通过向下转型访问<br><span class="hljs-keyword">package</span> com.zs.poly_.Array_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Person person[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">5</span>];<br>        person[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">13</span>,<span class="hljs-number">100</span>);<br>        person[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小张&quot;</span>,<span class="hljs-number">14</span>,<span class="hljs-number">60</span>);<br>        person[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;人&quot;</span>,<span class="hljs-number">13</span>);<br>        person[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;傻老师&quot;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">5</span>);<br>        person[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;特老师&quot;</span>,<span class="hljs-number">47</span>,<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; person.length;i++)&#123;<br>            System.out.println(person[i].say());<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; person.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(person[i] <span class="hljs-keyword">instanceof</span> Student)<br>                ((Student)person[i]).Learn();<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(person[i] <span class="hljs-keyword">instanceof</span> Teacher)<br>                ((Teacher)person[i]).Teach();<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(person[i] <span class="hljs-keyword">instanceof</span> Person)<br>                System.out.println(person[i].say());<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Wrong&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java多态参数"><a href="#java多态参数" class="headerlink" title="java多态参数"></a>java多态参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jade">//形参为父类类型，实参为父类的子类，好处就是可以通过重写父类的方法，来提高代码可用性<br>package com.zs.poly_.Partmes;<br><br>public class Test &#123;<br>    public double showEmpannal(Employee employee)&#123;<br>       return employee.GetAnnual();<br>    &#125;<br>    public void testWork(Employee employee)&#123;<br>        if(employee instanceof Nomral)<br>            ((Nomral)employee).work();<br>        else<br>            System.out.println(&quot;你不是打工人&quot;);<br>    &#125;<br>    public static void main(String[] args) &#123;<br>        Manner manner = new Manner(&quot;经理&quot;,99,100);<br>        Nomral nomral = new Nomral(&quot;张三&quot;,100);<br>        Test test = new Test();<br>        System.out.println(&quot;经理的工资是:&quot;+test.showEmpannal(manner));<br>        System.out.println(&quot;打工人的工资是&quot;+test.showEmpannal(nomral));<br>        test.testWork(manner);<br>        test.testWork(nomral);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">equals</span><span class="hljs-params">()</span></span><br><br>== 和 equals<br>== 既可以判断基本类型，也可以判断引用类型<br>判断基本类型时，判断的是指向的值是否相等<br>判断引用类型时，判断的是指向的地址是否相等<br>equals是object类的方法，只能判断引用类型，equals默认判断引用类型是否相同<br><br><span class="hljs-function"><span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span><br><span class="hljs-number">1</span>. 提高具有哈希结构容器的效率<br><span class="hljs-number">2</span>. 两个引用，如果指向同一个对象，则哈希值肯定是一样的<br><span class="hljs-number">3</span>. 两个引用，如果指向不同的对象，哈希值可能不一样（碰撞）<br><span class="hljs-number">4</span>. 哈希值通过地址得到，不能完全将哈希值等价于地址【把地址映射为整数】<br><br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br>返回对象的全类名+@+哈希值的<span class="hljs-number">16</span>进制<br>当直接输出一个对象时，toString会被默认调用<br><br><span class="hljs-function"><span class="hljs-title">finalize</span><span class="hljs-params">()</span></span><br>当对象被回收时，系统自动调用该对象的finalize方法<br>当某个对象没有任何引用时，jvm就会认为这个对象是一个垃圾，就会使用垃圾回收机制来销毁对象，在销毁对象前，会先调用finalize方法<br>可以通过System.gc（）主动出发垃圾回收机制，但不一定会直接回收<br></code></pre></td></tr></table></figure><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">F7 跳入方法内 S<span class="hljs-function"><span class="hljs-title">etting</span> -&gt;</span>B<span class="hljs-function"><span class="hljs-title">uild</span>,Execution,Deployment -&gt;</span>D<span class="hljs-function"><span class="hljs-title">ebugger</span> -&gt;</span>Stepping,取消勾选java,javax<br>F8 逐行执行<br>F9 执行到下一个断点<br>shitf + F8 跳出方法<br>调试时按运行类型来定位<br>断点支持动态的下断点<br></code></pre></td></tr></table></figure><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">使用<span class="hljs-keyword">static</span>来修饰，在类中定义<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> age;<br>&#125;<br>可以使用实例化的对象来访问<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.age<br>可以使用对象名来访问<br>A.age<br>所有通过A实例化的对象，其类变量共享一块存储空间，jkd7以前时，静态变量放在方法区中的静态域中，以后的版本静态变量存放在堆中【每个类对应一个class实例，在class实例的尾部，class实例在堆中】<br><br>类变量在类加载的时候就生成了，因此可以不需要实例化任何对象就可以访问<br><br>类变量同样受访问修饰符的约束<br><br>类变量以外的变量成为实例变量，普通变量，非静态变量<br><br>类变量生命周期随着类加载开始，随着类消亡而销毁<br><br></code></pre></td></tr></table></figure><h3 id="类方法（静态方法）"><a href="#类方法（静态方法）" class="headerlink" title="类方法（静态方法）"></a>类方法（静态方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">使用<span class="hljs-keyword">static</span>来修饰，在类中定义<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>&#125;;<br>&#125;<br>同样支持使用类名来直接访问<br>    <br>一些通用的方法比较适合设计成静态方法，比如计算任务，打印数组等，当希望不需要实例化类就可以调用方法时就可以创建类方法<br>    <br>类方法没有<span class="hljs-built_in">this</span>属性，<span class="hljs-built_in">super</span>属性<br>    <br>静态方法不能访问非静态方法，不能直接在方法体内访问非静态变量<span class="hljs-comment">//，但形参可以传入非静态成员或是类</span><br></code></pre></td></tr></table></figure><h3 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">main</span>方法是java虚拟机在调用<br><br>public保证了虚拟机可以调用<span class="hljs-selector-tag">main</span>方法<br><br>static保证了不需要创建对象就可使用<span class="hljs-selector-tag">main</span>方法<br><br>args以字符串数组的形式，传入形参。在执行时传入<br><br>在<span class="hljs-selector-tag">main</span>方法中可以访问该类中的所有静态方法和静态属性<br><br>IDEA中，选择运行小绿按钮的下拉，选择Edit configurations，可以进行动态传参到<span class="hljs-selector-tag">main</span>方法<br></code></pre></td></tr></table></figure><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">【修饰符】&#123;<br><br>&#125;；<br>只能使用<span class="hljs-keyword">static</span>修饰<br>又称为初始化块，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或者类显示调用，在加载类时 或 创建对象时隐式调用<br><br>可以对构造器做补充，例如多个构造器有重复的语句<br><br>代码块的调用优先于构造器<br><br>使用<span class="hljs-keyword">static</span>修饰的代码块随着类的加载而执行，而且只会执行一次，普通代码块每创建一个对象就会被隐式调用而执行<br>类什么时候会被加载<br><span class="hljs-number">1.</span>创建对象实例时<br><span class="hljs-number">2.</span>创建子类对象实例时，父类也会被加载<br><span class="hljs-number">3.</span>使用类的静态成员时<br><br>使用类的静态成员时，普通代码块不会执行，因为静态代码块只会在加载类时执行一次。<br><br>创建一个对象时，静态代码块和静态属性的初始化优先级一样，有多个静态代码块和多个静态属性初始化时，按照定义顺序执行。<br>紧接着在调用普通代码块和普通属性的初始化，有多个时同样按照定义顺序执行<br><br>构造器中有两个隐藏的代码，<span class="hljs-keyword">super</span>（）以及普通代码块<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220111724731.png" alt="image-20230220111724731"></p><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle">静态方法和属性的经典使用<br>在大量实践中总结和理论化之后优选的代码结构，编程风格，解决问题的思考模式(java中一共有<span class="hljs-number">23</span>种)<br>采取一定的方法，使得某个类只能存在一个对象实例，且只提供一个取得对象实例的方法（对于重资源的类，我们也许只需要一个就够了）<br><br>饿汉式:用不用都创建<br>首先私有化构造器，<br>在类内私有化实例对象<br>提供一个静态的公开的方法暴露出来<br>懒汉式：不用不创建<br>首先私有化构造器，<br>在类内私有化实例对象<br>提供一个静态的公开的方法暴露出来<br>饿汉式不存在线程安全问题，但存在资源浪费问题<br>懒汉式节省资源，但可能存在线程安全问题<br>java.lang.<span class="hljs-keyword">Runtime</span>是经典的单例模式<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220124039292.png" alt="image-20230220124039292"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220124319432.png" alt="image-20230220124319432"></p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs fin">final class A&#123;&#125;<br>使得A无法被继承<br><br>final public void()&#123;&#125;<br>使得父类的某个方法无法被重写<br><br>public final int a = 0.001<br>使得类中的某个属性无法被修改<br><br>final double = 1.0<br>用于修饰局部变量，使得其无法被修改 <br><br>final修饰的属性一般叫常量，用XX_XX_XX<br><br>final修饰的变量必须被初始化（直接初始化，在构造器中，在代码块中）<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220142913319.png" alt="image-20230220142913319"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220143215912.png" alt="image-20230220143215912"></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">当父类中的某些方法不知道怎么实现，或者没必要实现时，将该方法声明为抽象方法，将上边的类声明为抽象类。方法的实现通常由子类通过继承来实现。<br><br>抽象类更多的作用是在于设计，在设计者设计好后，由子类来设计实现<br><br>抽象类不能被实例化<br><br>抽象类可以没有抽象方法，还可以有实现的方法<br><br><span class="hljs-keyword">abstract</span>只能修饰类或者方法<br><br>抽象类可以有任意成员，本质还是一个类<br><br>如果一个类继承了抽象类，则它必须实现抽象类所有的抽象方法，除非它自己也声明为抽象类。<br><br>抽象类不能使用<span class="hljs-keyword">private</span>，<span class="hljs-keyword">final</span>，<span class="hljs-keyword">static</span>来修饰方法，因为这三个关键字都会使得方法无法被重写<br></code></pre></td></tr></table></figure><h3 id="模板设计模式"><a href="#模板设计模式" class="headerlink" title="模板设计模式"></a>模板设计模式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">将多个类中共有的东西抽象出来，可以实现的部分直接实现，无法实现的部分使用抽象方法来实现。<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220154045460.png" alt="image-20230220154045460"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">定义接口<br>接口中的方法体都是抽象方法且不需要<span class="hljs-keyword">abstract</span>来修饰<br>定义接口的实现类<br>定义使用接口的类将接口作为形参<br>可以通过形参直接访问实现类的方法<br>接口不能被实例化<br>接口的所有方法都是<span class="hljs-keyword">public</span>方法，且默认都有<span class="hljs-keyword">abstract</span>来修饰<br>一个类实现接口，接口的所有方法都需要被实现<br>抽象类实现接口时可以不实现接口的抽象方法<br>一个类同时可以实现多个接口<br>接口中的属性只能是<span class="hljs-keyword">final</span>的，且前边默认由<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> 来修饰<br>接口中属性的访问使用 接口名.属性名来访问，或者是实现类.属性名 ，或者是实现类对象.属性名来访问<br>一个接口不能继承其他的类，但是可以继承多个别的接口<br>接口的修饰符只能是<span class="hljs-keyword">public</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220162739078.png" alt="image-20230220162739078"></p><h3 id="接口VS继承类"><a href="#接口VS继承类" class="headerlink" title="接口VS继承类"></a>接口VS继承类</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">接口是对<span class="hljs-keyword">java单继承的一种补充（同时使用extedns和implement）</span><br><span class="hljs-keyword"></span>接口实现了代码的解耦<br></code></pre></td></tr></table></figure><h3 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">多态参数的体现，将接口变量作为形参，则该方法可以接受任意实现了该接口的类的对象。接口不能被实例化，但接口变量可以指向任意实现类的实例化对象。<br><br>接口也可以创建动态数组，内部可以存放不同的实现类<br><br>接口的多态传递现象，当某个实现类的接口<span class="hljs-selector-tag">B</span>继承了另一个接口<span class="hljs-selector-tag">A</span>时，则该实现类也实现了接口<span class="hljs-selector-tag">A</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230220170459381.png" alt="image-20230220170459381"></p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">在类里再次定义一个类<br><br>内部类构成类的第五大成员，属性，方法，构造器，代码块，<br><br>内部类最大的特点是可以直接访问私有属性，并且可以体现类与类之间的包含关系 <br><br>局部内部类：<br>通常定义在外部类的方法中<br>可以直接访问外部类的其他所有成员，包括私有的属性<br>不能添加访问修饰符，但可以使用final修饰<br>作用域仅仅在方法体内或者代码块中，就相当于一个局部变量<br>访问局部内部类的方法为在 外部类 的 方法内 实例化一个 局部内部类 的 对象 ，然后在该方法内调用局部内部类的方法<br>外部其他类不能访问内部类，因为内部类就相当于一个局部变量<br>如果内部类的成员和外部类的成员重名时，遵守就近原则，需要在内部类访问外部类的崇明成员时，使用外部类名.this.成员名，外部类名.this本质就是外部类的对象，如 A a = <span class="hljs-built_in">new</span> A（）,A.this.x 就是 a.x<br><br>匿名内部类:<br>通常定义在外部类的方法中<br>本质还是类<br>不需要定义名字（外部类+<span class="hljs-meta">$1</span>）<br>同时还是一个对象<br>存在的意义是，对于某些接口或者类，只需要用一次后边不再使用，额外定义一个类给开发添加了不必要的麻烦，因此使用匿名内部类简化了开发<br>//基于接口的 底层自动生成了一个接口的实现类，类的名称为外部类+<span class="hljs-meta">$1</span>，运行类型为匿名内部类<br>IA tiger = <span class="hljs-built_in">new</span> IA()&#123;<br>@override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> cry()&#123;<br><span class="hljs-keyword">system</span>.<span class="hljs-keyword">out</span>.println(&quot;asdasd&quot;);<br>&#125;<br>&#125;<br>在外部类使用tiger.cry()就可以直接访问而不需要实例化对象<br>//基于类的 底层自动生成了一个外部类的继承类，类的名称为外部类+<span class="hljs-meta">$2</span>，运行类型为匿名内部类，IA还可以为抽象类<br>IA tiger = <span class="hljs-built_in">new</span> IA()&#123;<br>@override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> cry()&#123;<br><span class="hljs-keyword">system</span>.<span class="hljs-keyword">out</span>.println(&quot;asdasd&quot;);<br>&#125;<br>&#125;<br><br>调用匿名内部类有两种方法，可以通过指向匿名内部类的引用访问（对象），也可以在创建时直接访问<br><br>匿名内部类最常用的场景就是作为实参传递到方法中<br><br>成员内部类:<br>通常直接定义在类中，而不是类中的方法<br>作用域只在外部类体内，因此访问时需要在外部类创建并访问<br>可以直接访问外部类的属性和方法（私有也可以）<br>外部类也可以直接访问内部类的属性和方法（私有也可以）<br>外部其他类可以访问和使用成员内部类 <br>（<span class="hljs-number">1</span>）<span class="hljs-keyword">Outer</span> <span class="hljs-keyword">outer</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>() ; <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">inner</span> = <span class="hljs-keyword">outer</span>.<span class="hljs-built_in">new</span> <span class="hljs-keyword">Inner</span>();<br>（<span class="hljs-number">2</span>）<span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> inner2 = <span class="hljs-keyword">outer</span>.getInner(); //在外部类定义一个返回内部类的方法<br>如果外部类和内部类的成员重名，则在内部类或外部类访问该重名成员时遵守就近原则，需要在内部类访问外部类成员时使用this<br>静态内部类:<br>通常直接定义在类中，而不是类中的方法<br>使用static修饰<br>可以使用访问修饰符来控制访问权限<br>作用域为整个类体<br>可以访问外部类所有静态成员<br>外部类访问静态内部类时，先创建静态内部类的对象，再访问<br>外部其他类访问内部类时，先创建 <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">inner</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span>()；可以直接创建 【满足访问权限】，或是写一个返回对象的方法【可以声明为静态】<br>如果外部类和静态内部类成员重名时，遵守就近原则，需要访问范围之外的重名成员时，使用类名.x来访问<br>成员内部类和静态内部类本质还是一个成员<br></code></pre></td></tr></table></figure><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">当对象为有限个对象属性的组合时，可以定义枚举类<br>枚举类实际上对类的对象数量做了限制<br>自定义方法：<span class="hljs-number">1</span>.私有化构造器<span class="hljs-number">2</span>.设置getter方法<span class="hljs-number">3</span>.在类内实例化固定对象，使用final和static来优化<span class="hljs-number">4</span>.在类外通过类名.对象名.x来访问属性或者方法<br>使用关键字：enum替代class<br>使用细节:使用 类名(” “，” “)来实例化对象,并且只能放在第一行。<br>有多个对象时，使用逗号进行分隔。<br>enum类继承了java<span class="hljs-selector-class">.lang</span>.Enum类，且被final所修饰,使用enum创建的枚举类不可以继承其他任何类，但是可以实现接口<br>枚举类常用的方法:<br><span class="hljs-selector-class">.name</span>() 返回创建枚举对象时定义的对象名（Enunm重写了tosTring方法）<br><span class="hljs-selector-class">.ordinal</span>() 返回创建枚举对象时的次序<br><span class="hljs-selector-class">.values</span>() 返回一个包含所有枚举对象的数组<br><span class="hljs-selector-class">.valuesOf</span>(<span class="hljs-string">&quot; &quot;</span>) 根据给定的字符串去匹配枚举对象，找不到就报错<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.compareTo</span>(enum b) 返回<span class="hljs-selector-tag">a</span>.ordianl（）-<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.ordianl</span>()<br>枚举可以和switch一起使用<span class="hljs-built_in">switch</span>(枚举对象)<br></code></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230222143027226.png" alt="image-20230222143027226"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Override</span> 的意义在于语法检查，如果方法没有重写却加了注解，则会报错 <span class="hljs-variable">@interface</span>是注解类不是接口 jdk1.<span class="hljs-number">5</span>之后加入 只能修饰方法 <span class="hljs-variable">@Target</span>是修饰注解的注解，称为元注解<br><br><span class="hljs-variable">@Deprecated</span> 代表过时的，用来修饰类，方法，字段，包 还可以用但不推荐使用<br><br><span class="hljs-variable">@SuppressWarnings</span> 抑制警告,作用范围与该注解位于的位置有关，一般放在类上<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230222144937786.png" alt="image-20230222144937786"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230222145021606.png"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230222145049673.png" alt="image-20230222145049673"></p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php">在可能的地方做异常处理，保持程序的健壮性<br><span class="hljs-keyword">try</span>&#123;&#125; <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> e)&#123;&#125;<br>java的异常分为:<br><span class="hljs-built_in">Error</span>(错误) JVM内部错误，资源耗尽，栈溢出，OOM内存耗尽<br>以及<span class="hljs-built_in">Exception</span>(异常),访问空指针，读取不存在的文件，网络连接中断<br><span class="hljs-built_in">Exception</span>又分为运行时异常以及编译时异常<br><br>运行时异常可以不做处理（编译器检查不出来），编译时异常是编译器要求必须处置的异常<br><br>常见的运行时异常:<br>NullpointerException 对一个指向空对象的引用进行操作<br>ArithmeticException 数学算数异常<br>ArrayIndexOutofBoundsException 数组越界异常<br>ClassCastException 转型异常<br>NumberFormalException 数字转换异常<br>常见的编译异常<br>SQLExceptioon 操作数据库时可能发生异常<br>IOException 操作文件时可能发生异常<br>FileNotFoundException 操作一个不存在的文件发生异常<br>ClassNotFoundException 加载类，但该类不存在时发生异常<br>EOFexception 操作文件，到文件末尾发生异常<br>IllegalArguementException 参数异常<br><br>异常处理机制有两种：<br>一种是使用<span class="hljs-keyword">try</span>-<span class="hljs-keyword">catch</span>-<span class="hljs-keyword">finally</span>来处理，捕获异常后自行处理，<span class="hljs-keyword">finally</span>无论有没有捕获到异常都会执行，通常用来进行资源的释放。<br>一种是使用throws来处理，将异常抛出到上一个方法中，上一个方法可以选择继续抛出或者使用<span class="hljs-keyword">try</span>-cath-<span class="hljs-keyword">finally</span>来处理。顶端为JVM机，JVM机会抛出异常并中止运行。<br>两种方案只能二选一，默认为throws 即throws <span class="hljs-built_in">Exception</span><br><br><span class="hljs-keyword">try</span>-<span class="hljs-keyword">catch</span>-<span class="hljs-keyword">finally</span> 可以进行多重匹配，每次只有一个异常会被捕获，父类<span class="hljs-built_in">Exception</span>必须在最后被捕获<br><span class="hljs-keyword">try</span>-<span class="hljs-keyword">finally</span>用法，执行完<span class="hljs-keyword">finally</span>直接中断程序<br><span class="hljs-keyword">throw</span>后边可以是异常列表，也可以抛出方法中产生异常类型的父亲<br>在进行方法的重写时，子类抛出的异常需要与父类异常类型一致或者是父类的异常的子类<br><br>自定义异常：<br><span class="hljs-number">1</span>.编写一个类继承异常类，创建构造器<br><span class="hljs-number">2</span>.在方法中使用<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> 类名(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-number">3</span>.一般是继承运行类异常，可以使用默认处理机制，如果是编译异常则还需要在调用方法抛出异常或者<span class="hljs-keyword">try</span>手动处理<br>    <span class="hljs-number">4</span>.<span class="hljs-keyword">throw</span>定义在方法体中，用于抛出一个异常对象 thow <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>,throws定义在方法后，用于指定抛出的异常类<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223143226189.png" alt="image-20230223143226189"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230222191453174.png" alt="image-20230222191453174"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223143354747.png" alt="image-20230223143354747"></p><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Wrapper</span> 包装类<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223152530454.png" alt="image-20230223152530454"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223152845558.png" alt="image-20230223152845558"></p><p><img src="C:\Users\zs\AppData\Roaming\Typora\typora-user-images\image-20230223152938396.png" alt="image-20230223152938396"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">包装类就是对基本数据类型的一种扩展<br>jdk5前为手动装箱（基本类型-&gt;包装类型）和拆箱(包装类型-&gt;基本数据类型)<br>自动装箱底层调用的是valueOf方法<br><span class="hljs-comment">//手动装箱</span><br><span class="hljs-built_in">int</span> n1 = <span class="hljs-number">100</span>;<br>Integer integer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(<span class="hljs-params">n1</span>)</span><br>Integer integer1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">n1</span>)</span><br><span class="hljs-comment">//手动拆箱</span><br><span class="hljs-built_in">int</span> i = integer.<span class="hljs-built_in">int</span><span class="hljs-constructor">Value(<span class="hljs-params">n1</span>)</span>;<br><br>自动装/拆箱<br><span class="hljs-built_in">int</span> n2 = <span class="hljs-number">100</span>;<br>Integer integer2 = n2; <span class="hljs-comment">//底层仍然是手动装</span><br><span class="hljs-built_in">int</span> n3 = integer2； <span class="hljs-comment">//底层仍然是手动拆箱</span><br><br>包装类型和String类型的相互转换<br>    Integer i = <span class="hljs-number">100</span>;<br>    <span class="hljs-number">1.</span>String str1 = i+ <span class="hljs-string">&quot;&quot;</span> （i没有变化）<br><br>    <span class="hljs-number">2.</span>String str2 = i.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br><br>    <span class="hljs-number">3.</span>String str3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">i</span>)</span><br>    <br>    <span class="hljs-number">1.</span>. Integer i2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">str3</span>)</span><br>    <br>    <span class="hljs-number">2.</span>. Integer i3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(<span class="hljs-params">str3</span>)</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223154321023.png" alt="image-20230223154321023"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223155649766.png" alt="image-20230223155649766"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223160332559.png" alt="image-20230223160332559"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223160812868.png" alt="image-20230223160812868"></p><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-type">String</span>类<br>    字符使用unicode字符编码，一个字符占两个字节（不区分英汉）<br>    Serializable 串行化：可以在网络传输<br>    Comparable:对象可以相互比较<br>    Charsequence:字符串序列<br>    使用<span class="hljs-keyword">final</span>修饰不能被继承<br>    保存时还是保存到<span class="hljs-type">char</span>数组 pravie <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[] ,地址不可修改，里边的值可以修改（专有方法）<br>    <span class="hljs-type">String</span>有很多构造器<br><span class="hljs-type">String</span>两种创建方式的区别：<br><span class="hljs-type">String</span> s1 = <span class="hljs-string">&quot;asdasd&quot;</span>；<br>查看常量池是否有<span class="hljs-string">&quot;asdasd&quot;</span>,没有的话在常量池创建常量，直接将地址引用返回到栈中<br><span class="hljs-type">String</span> s2 = new <span class="hljs-title function_ invoke__">String</span>(<span class="hljs-string">&quot;asdasd&quot;</span>)<br>在堆中创建空间，维护一个指向value的常量池属性，如果有<span class="hljs-string">&quot;asdasd&quot;</span>，则其value指向常量池中常量的地址，如果没有的话则创建常量并将地址返回给value，随后在堆中创建一个指向value的引用。所以对于相同的字符串常量，两个引用指向的地址是不同的<br><br><span class="hljs-type">String</span>的方法：<br>equals比较的是字符串的值是否一一对应<br>intern（）最终会返回的是常量池的地址<br><br><span class="hljs-type">String</span> 的特性：<br><span class="hljs-type">String</span>是一个<span class="hljs-keyword">final</span>类，其存放字符串的属性也是<span class="hljs-keyword">final</span>属性，因此字符串不可修改<br>        <span class="hljs-type">String</span> s = new <span class="hljs-title function_ invoke__">String</span>(<span class="hljs-string">&quot;asd&quot;</span>)<br>        s = <span class="hljs-string">&quot;bcx&quot;</span><br>        <span class="hljs-comment">//创建了两个对象</span><br>        <br>        <span class="hljs-type">String</span> s = “hello<span class="hljs-string">&quot;+”abc “ </span><br><span class="hljs-string">        //编译器会优化，等于String s = ”helloabc&quot;</span> 创建了一个对象<br>        <br>        <br>        <span class="hljs-type">String</span> a = <span class="hljs-string">&quot;hello&quot;</span><br>        <span class="hljs-type">String</span> b = <span class="hljs-string">&quot;abc&quot;</span><br>        <span class="hljs-type">String</span> c = a+b<br>        创建了三个对象，首先 a指向常量池，b指向常量池。<br>        其次调用StringBuilder 创建一个对象，并调用两次append方法将a与b拼接到一起存放在常量池中<br>        最后调用StringBuilder的toString方法返回给c的引用<br>        <br>        <span class="hljs-comment">//两个String常量相加看池，两个String变量相加看堆</span><br>        <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223165055065.png" alt="image-20230223165055065"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223170719129.png" alt="image-20230223170719129"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230223171626073.png" alt="image-20230223171626073"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230224145059366.png" alt="image-20230224145059366"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230224150623253.png" alt="image-20230224150623253"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">String 常用方法<br>String是保存字符串常量的，每次更新都需要重新开辟空间，效率低<br>因此提供了StringBuilder和StringBuffer来增强String的功能<br><br>用这些方法看下是返回的新对象还是直接进行了修改<br><span class="hljs-regexp">//</span>equalsIgnoreCase()忽略大小写<br><span class="hljs-regexp">//i</span>ndexof(<span class="hljs-string">&quot;s&quot;</span>)查找该字符串s（字符也可以）在字符串对象中第一次出现的索引<br><span class="hljs-regexp">//</span>lastindexof(<span class="hljs-string">&#x27;a&#x27;</span>)查找该字符在字符串对象中最后一次出现的索引<br><span class="hljs-regexp">//</span>substring截取指定范围的子串  (n)从索引n后截取所有内容  （l，r）截取l到r-<span class="hljs-number">1</span>的内容<br><span class="hljs-regexp">//</span>toUpperCase 把字符串全部换为大写<br><span class="hljs-regexp">//</span>toLowerCase 把字符串全部换为大写<br><span class="hljs-regexp">//</span>s.concat(<span class="hljs-string">&quot;&quot;</span>).concat(<span class="hljs-string">&quot;&quot;</span>).concat(<span class="hljs-string">&quot;拼接&quot;</span>)<br><span class="hljs-regexp">//</span>s.replace(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>)把s中所有的a全部换为b<br><span class="hljs-regexp">//</span>String s[] = S.split(<span class="hljs-string">&quot;,&quot;</span>) 以逗号为间隔进行分割 注意特殊字符的转义字符<br><span class="hljs-regexp">//</span>s.toCharArray()转化为字符数组<br><span class="hljs-regexp">//</span>s1.compareTo(s2) 如果s1和s2完全相同，则返回零，如果一个长一个短，返回s1-s2的长  如果长度相同，则返回第一个不同的字符之间的ascii的差值<br><span class="hljs-regexp">//</span>String.formal() 格式化输出 String formatStr = <span class="hljs-string">&quot;%d %s %.2f %c&quot;</span>;String info = String.format(formalStr,age,name,money,sex) !!!<span class="hljs-string">&quot;参数是个String 对象，”asdasd“也是String对象！ &quot;</span><br></code></pre></td></tr></table></figure><h3 id="StringBuffer-类"><a href="#StringBuffer-类" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dart">StringBUffer 是对<span class="hljs-built_in">String</span>常量无法进行修改所存在的一个类<br>是一个容器，长度可变，可以对字符串内容进行增删<br>被<span class="hljs-keyword">final</span>修饰，不可被继承<br>存放字符串的变量定义在抽象父类中的valu数组中，没有被<span class="hljs-keyword">final</span>修饰所以可以修改，具体的位置在堆中存放<br>实现了序列化接口以及charSequence接口<br><span class="hljs-built_in">StringBuffer</span>增加或删除时不用每次都更换对象（地址，创建新的对象）<br><br><span class="hljs-built_in">StringBuffer</span>构造器:<br>无参构造器：vlue[]数组被初始化为<span class="hljs-number">16</span>个长度<br><span class="hljs-built_in">StringBuffer</span>（<span class="hljs-built_in">int</span> a）:指定缓存区大小<br><span class="hljs-built_in">StringBuffer</span>(<span class="hljs-built_in">String</span> s)：长度为s的长度再加<span class="hljs-number">16</span><br><br><span class="hljs-built_in">StringBuffer</span>和<span class="hljs-built_in">String</span>的相互转换<br><span class="hljs-built_in">StringBuffer</span>通过<span class="hljs-keyword">new</span>来将<span class="hljs-built_in">String</span>转化为<span class="hljs-built_in">StringBuffer</span>对象<br>    <br>    <span class="hljs-built_in">StringBuffer</span>通过toString或者是将<span class="hljs-built_in">StringBuffer</span>传入<span class="hljs-built_in">String</span>的构造器中来转化为<span class="hljs-built_in">String</span>对象<br>    <br><span class="hljs-built_in">StringBuffer</span>的常见方法<br><span class="hljs-comment">//s.append( * ) 可以是字符，字符串，数字，boolean等各种东西 </span><br><span class="hljs-comment">//s.delete(  [a,b) ):删除字符串，前闭后开</span><br><span class="hljs-comment">//s.replace( [a,b)  )：替换，前闭后开</span><br><span class="hljs-comment">//s.indexOf( ” “ ) ：定位第一次出现的位置</span><br><span class="hljs-comment">//s.insert(a,&quot; &quot;):在索引为n的位置插入</span><br><br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230226160417550.png" alt="image-20230226160417550"></p><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">不是线程安全的，用于字符缓冲区被单个线程使用的，如果可以建议优先使用这个类<br>与buffer的继承关系相同<br>也是<span class="hljs-keyword">final</span>类<br>字符序列也是存在堆里<br>方法没有实现线程安全，没有互斥处理，synchronied关键字<br></code></pre></td></tr></table></figure><h3 id="三种字符串对比"><a href="#三种字符串对比" class="headerlink" title="三种字符串对比"></a>三种字符串对比</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span> 不可变字符序列，修改效率低，但是复用率高<br>StringBuffer 可变字符序列，效率高，线程安全<br>StringBuilder 可变字符序列，效率最高，线程不安全<br><br><span class="hljs-type">String</span>每次修改时 s+=‘a<span class="hljs-number">&#x27;</span>会有大量的副本留存在内存中，使得效率降低，如果需要对<span class="hljs-type">String</span>做大量修改，不要使用<span class="hljs-type">String</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230227185829121.png" alt="image-20230227185829121"></p><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">包含了一系列静态方法<br><span class="hljs-built_in">round</span>四舍五入<br><span class="hljs-built_in">sqrt</span>开方<br><span class="hljs-built_in">random</span>()随机数 int(<span class="hljs-keyword">a</span>+f*(b-<span class="hljs-keyword">a</span>+<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">包含了一些列静态放啊，用于管理和操作数组<br><span class="hljs-regexp">//</span>toString 转换为一个String类型，并添加双括号<br><span class="hljs-regexp">//</span>sort排序算法 有两个参数，第一个参数是个类（不可以是基本数据类型），第二个类型是个匿名内部类，实现了Comparator接口中的compare方法。<br><span class="hljs-regexp">//</span>binarySearch 找不到时返回元素应该在的位置乘以负<span class="hljs-number">1</span>（不是索引，而是从一开始计算）<br><span class="hljs-regexp">//</span>copyOf(arr,length)拷贝length个元素到新数组，要求length&gt;=<span class="hljs-number">0</span>，当超出最大长度时，int型在末尾添加<span class="hljs-number">0</span>，Integer型在末尾添加null，该方法底层用的是System.arraycopy()<br><span class="hljs-regexp">//</span>fill使用指定数字替换数组所有元素<br><span class="hljs-regexp">//</span>equals 比较两个数组是否完全相同<br><span class="hljs-regexp">//</span>asList 将数组转化为List 运行类型是Arrays类的一个静态内部类，编译类型是一个asList编译类型（List接口）<br></code></pre></td></tr></table></figure><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>System.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>) 表示正常退出<br><span class="hljs-regexp">//</span>System.arraycopy（arr1,a,arr2,b,n）; arr1原数组，a从哪开始拷贝，arr2接受拷贝元素的数组，b从哪开始拷贝，n拷贝几个<br><span class="hljs-regexp">//</span>Systyem.currentTimeMillents 返回从当前时间到某个时间的差异，以毫秒为单位<br></code></pre></td></tr></table></figure><h3 id="Biglnteger类-和-BigDecimal类"><a href="#Biglnteger类-和-BigDecimal类" class="headerlink" title="Biglnteger类 和 BigDecimal类"></a>Biglnteger类 和 BigDecimal类</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">add</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">subtract</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">multiply</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">divide </span>对于<span class="hljs-keyword">BigDecimal可能出现异常，无限循环小数，使用Bigdecimal.ROUND_CEILING </span>保留到分子的精度<br></code></pre></td></tr></table></figure><h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Data 精确到毫秒，代表特定的时间 ，在java.util包里<br>Data d1 = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>() 获取当前系统时间 <br>SimpleDateFormat sdf = <span class="hljs-built_in">new</span> SimpledateFormat(&quot;yyyy年MM月dd日 hh时：mm分：ss秒 E星期几&quot;)<br>String <span class="hljs-keyword">format</span> = sdf.format(d1)<br>Data d1 = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>(<span class="hljs-number">1234567</span>) 将毫秒数转化为时间<br><span class="hljs-type">Date</span> parse = sdf.parse(s) 将字符串按照指定的格式转化为时间 （抛出一个异常）<br><br>Calendar类<br>是一个抽象类，并且构造器是私有化的，使用getInstance()来获取实例<br>Calendar c = Calendar.getInstance();<br>c.<span class="hljs-keyword">get</span>(Calendar.YEAR)<br>c.<span class="hljs-keyword">get</span>(Calendar.MONTH)+<span class="hljs-number">1</span> //默认从<span class="hljs-number">0</span>开始<br>c.<span class="hljs-keyword">get</span>(Calendar.DAY_OF_OMNTH)<br>c.<span class="hljs-keyword">get</span>(Calendar.HOUR)<br>c.<span class="hljs-keyword">get</span>(Calendar.MINUTE)<br>c.<span class="hljs-keyword">get</span>(Calendar.SECOND)<br>自己组合日期<br>默认是<span class="hljs-number">12</span>小时进制，HOUR_OF_DAY <span class="hljs-number">24</span>小时进制<br>也有一些问题。例如日期和时间这样的类应该是不可变的<br>月份从<span class="hljs-number">0</span>开始<br>不能使用格式化<br>线程不安全；不能处理闰秒（每隔两天，多出<span class="hljs-number">1</span>s）<br><br><br>LocatDateTime类<br>获取当前时间 LocalDataTime lc = <span class="hljs-built_in">new</span> LocalDateTime.now()<br>lc.getYear(),lc.getMonthValue()返回值，lc.getMonth()返回英文月<br>LocalDate（只能获取年月日）<br><span class="hljs-built_in">LocalTime</span>(只能获取时分秒)<br>使用DateTimeFromatter 对象来进行格式化<br>LocalDataTime ldt = LocalDateTime.now()<br>DateTimeFormat dtf = DatetimeFormatter.ofPattern(&quot;yyyy年MM月dd日HH小时mm分钟ss秒&quot;)<br>String strdate =  dtf.format(ldt)<br><br>Instant时间戳<br>通过静态方法now()获取表示当前时间戳的对象<br>Instant now = Instant.now()<br>转换成第一代时间对象<br><span class="hljs-type">Date</span> <span class="hljs-type">date</span> = <span class="hljs-type">Date</span>.<span class="hljs-keyword">from</span>(now)<br>转换成Instant<br>instant instant = <span class="hljs-type">date</span>.toInstant()<br></code></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">数组的扩容比较麻烦，存储必须保存同一类型的元素，增加删除元素比较复杂<br><br>集合可以动态保存任意多个对象<br>提供了一系列方便的操作对象的方法，元素的添加删除方便<br><br>如何选取集合类？<br><span class="hljs-number">1.</span>先判断存储类型<br>一组对象：<span class="hljs-variable">Collention</span>接口<br> 允许重复：<span class="hljs-built_in">List</span><br> 增删多：<span class="hljs-variable">LinkedList</span><br> 改查多：<span class="hljs-variable">ArrayList</span><br> 不允许重复：<span class="hljs-variable">set</span><br> 无序：<span class="hljs-variable">HashSet</span><br> 排序：<span class="hljs-variable">TreeSet</span><br> 插入和取出顺序一致：<span class="hljs-variable">LinkedHashSet</span><br>一组键值对：<span class="hljs-built_in">Map</span><br> 键无需：<span class="hljs-variable">HashMap</span><br> 键排序：<span class="hljs-variable">TreeMap</span><br> 键插入和去除顺序一致：<span class="hljs-variable">LinkedHashMap</span><br> 读取文件：<span class="hljs-built_in">Properties</span><br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230227194059987.png" alt="image-20230227194059987"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230227194342121.png" alt="image-20230227194342121"></p><h4 id="单列集合collection（放单个对象）"><a href="#单列集合collection（放单个对象）" class="headerlink" title="单列集合collection（放单个对象）"></a>单列集合collection（放单个对象）</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">collection是个接口,实现子类可以存放多个元素，每个元素可以是对象<br>有些实现类可以存放重复元素，有些不可以<br>有些实现类是有序的（list），有些不是有序的（<span class="hljs-keyword">set</span>）<br>collection接口没有直接的实现子类，是通过它的子接口<span class="hljs-keyword">set</span>和list来实现的<br><br>collection常用方法<br>List list = <span class="hljs-keyword">new</span> ArrayList（）<br>list.add() 添加元素 只要是对象就可以添加<br>list.remove() 可以指定索引，可以指定某个对象<br>list.contains（)返回布尔类型<br>list.size（）获取元素的个数<br>list.isempty（）空<span class="hljs-number">1</span>非空<span class="hljs-number">0</span><br>list.clear（）清空所有元素<br>list.addAll()添加多个元素 接受一个集合<br>list.removeAll()删除多个元素 接受一个集合<br>list.containsAll() 查找多个元素 接受一个集合<br><br><span class="hljs-keyword">Iterator</span><br>调用<span class="hljs-keyword">iterator</span>.next()方法之前必须要调用<span class="hljs-keyword">iterator</span>.hasNext()进行检测，若不调用，且下一条记录无效，会抛出NoSuchElementException异常<br>    <span class="hljs-keyword">Iterator</span> <span class="hljs-keyword">iterator</span> = col.iterator()；<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">iterator</span>.haxNext())<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    Object obj = iterator.next();</span><br><span class="hljs-comment">    &#125;</span><br>    快捷键 itit <span class="hljs-comment">//ctrl+j显示所有快捷键</span><br>    当退出<span class="hljs-keyword">while</span>循环后，it已经指向最后一个元素，如果需要遍历，需要重置迭代器 <span class="hljs-keyword">iterator</span> = col.iterator()<span class="hljs-punctuation">;</span><br>    <br>    增强<span class="hljs-keyword">for</span> 底层仍然是迭代器<br>    <span class="hljs-keyword">for</span>(Object obj:实例对象的引用)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    System.out.println(obj);</span><br><span class="hljs-comment">    &#125;</span><br>    快捷键 I<br></code></pre></td></tr></table></figure><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vim">List集合类中元素有序（添加顺序和取出顺序一致，元素可重复）<br>List集合类中的每个元素都有对应元素的顺序索引 <span class="hljs-keyword">list</span>.<span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>)<br>返回obj在当前集合中首次出现的位置List.indexOf()<br>返回obj在当前集合中最后一次出现的位置List.lastIndexOf()<br>移除索引为<span class="hljs-built_in">index</span>的元素List.<span class="hljs-built_in">remove</span>(<span class="hljs-number">0</span>)<br>替换索引为<span class="hljs-built_in">index</span>的元素List.<span class="hljs-keyword">set</span>(<span class="hljs-number">1</span>,obj) 必须得存在<br>返回子集合<span class="hljs-keyword">list</span>.subList(<span class="hljs-keyword">a</span>,<span class="hljs-keyword">b</span>) 前闭后开<br><br>ArrayList类<br>ArrayList可以存放空值，是由数组实现存储的，ArrayList基本等于同于Vector，但是线程不安全，效率高<br><br>ArrayList中维护了一个Object类型的数组，elementData<br>首次创建时，如果使用的是无参构造器，则初始容量为<span class="hljs-number">0</span><br>第一次添加扩容到<span class="hljs-number">10</span>，再次扩容时扩容<span class="hljs-number">1.5</span>倍<br>使用指定大小的构造器时，扩容为已有大小的<span class="hljs-number">1.5</span>倍<br><br>Vector类<br>底层也是一个对象数组，是线程安全的，基本所有操作都被synchronized修饰<br>如果是无参初始化，默认十个空间，满了就<span class="hljs-number">2</span>倍扩容，如果指定了大小，则每次扩容时按照两倍扩容<br><br>LinkedList类<br>实现了双向链表和双端队列特点<br>可以添加任意元素（元素可以重复），包括null<br>线程不安全<br>LinkedList中维护了两个属性<span class="hljs-keyword">first</span>和<span class="hljs-keyword">last</span>分别指向首节点和尾节点<br>每个节点（Node对象【内部类】）又维护了<span class="hljs-keyword">prev</span>、<span class="hljs-keyword">next</span>、item三个属性，通过<span class="hljs-keyword">prev</span>指向前一个，<span class="hljs-keyword">next</span>指向后一个节点<br><br></code></pre></td></tr></table></figure><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">set</span>接口对象-----<span class="hljs-built_in">set</span>接口实现类的对象<br>无序，添加和取出的顺序不一样，但取出的顺序是固定的<br>重复元素不存在，但可以反复添加重复元素<br>常用方法和Collection接口一样<br>可以使用迭代器或者是增强<span class="hljs-keyword">for</span>来进行遍历，不可以使用索引的方式<br><br>HashSet类<br>底层是<span class="hljs-built_in">HashMap</span>，<span class="hljs-built_in">HashMap</span>底层是数组加链表加红黑树 <br>存储效率会很高<br>HashSet添加元素过程：<br>首先将通过哈希函数得到hash值，再转换为索引值<br>找到存储数据tabel对应的位置<br>如果没有元素直接存进去<br>如果有调用equals比较，相同就放弃添加，不同则添加到最后（所以值相同的string对象无法重复存储）<br>如果某条链表的长度大于把，总table大小大于<span class="hljs-number">64</span>，则转化为红黑树存储<br>HashSet添加元素源码分析<br><span class="hljs-number">1.</span>首先执行构造器<br><span class="hljs-number">2.</span> 从<span class="hljs-built_in">add</span>方法跳到<span class="hljs-built_in">map</span>的put方法<br><span class="hljs-number">3.</span>put方法接受<span class="hljs-built_in">key</span> 和 value（hashmap） value被一个使用<span class="hljs-keyword">final</span>以及<span class="hljs-keyword">static</span>空对象占位<br>返回 <span class="hljs-title function_">putVal</span>(hash（<span class="hljs-built_in">key</span>),<span class="hljs-built_in">key</span>,value,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>) 即跳入putVal方法<br><span class="hljs-number">4.</span><span class="hljs-title function_">hash</span>(<span class="hljs-built_in">key</span>) 如果<span class="hljs-built_in">key</span>非空的话，返回 其hashcode与 hashcode无符号位移<span class="hljs-number">16</span>位后的异或 <span class="hljs-type">int</span>型变量<br><br>LinkedHashSet:HashSet的子类<br>底层是一个数组加一个双向链表，LinkedHashMap<br>同样根据元素的hashCode计算出hash值<br>与hashset的区别在于，每个节点多了一个前驱，遍历时可以按照插入顺序进行遍历<br>LinkedHashSet存放的节点类型是LinkedHashMap$Entry<br>数组是Hashmap$Node[] 存放的数据是LinkedHashMap$Entry Entry是一个内部类继承了Node类型，拥有前后指针<br><br>TreeSet可以排序，底层还是TreeMap<br>使用无参构造器创建TreeSet时，仍然是无序的<br>    使用TreeSet的一个构造器 ，可以传入一个比较器<span class="hljs-title function_">Comparator</span>(匿名内部类)，比较器传递给TreeMap<br>    <br></code></pre></td></tr></table></figure><h4 id="双列集合-放两个对象"><a href="#双列集合-放两个对象" class="headerlink" title="双列集合(放两个对象)"></a>双列集合(放两个对象)</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">map</span>接口实现类特点<br><span class="hljs-built_in">map</span>中的<span class="hljs-built_in">key</span>和value可以是任何引用类型的数据（基本数据类型会被装箱）<br><span class="hljs-built_in">map</span>中的<span class="hljs-built_in">key</span>不允许重复<br>常用<span class="hljs-built_in">string</span>作为<span class="hljs-built_in">map</span>中的<span class="hljs-built_in">key</span><br>Map中的数据存放在Hashmap中的内部类Node中。<br>一对k-v也可以是一个Entry，但Entry并不存储数据,也称之为EntrySet集合，为了方便程序员的遍历，EntrySet&lt;Entry&lt;K,V&gt;&gt;<br><br><span class="hljs-built_in">map</span>接口常用方法<br><span class="hljs-built_in">put</span>添加<br><span class="hljs-built_in">remove</span>根据键删除映射关系<br>size获取元素个数<br>isEmpty判断是否空<br>clear清除<br>containKey查找键是否存在<br><br><span class="hljs-built_in">map</span>接口遍历方法<br>(<span class="hljs-number">1</span>)先取出<span class="hljs-built_in">key</span>，通过<span class="hljs-built_in">key</span>取出相应的value<br>Set keyset = <span class="hljs-built_in">map</span>.keySet();<br><span class="hljs-keyword">for</span>(object <span class="hljs-built_in">key</span>:keyset)&#123;<br>sout(<span class="hljs-built_in">key</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">key</span>));<br>&#125;<br>Iterator iterator = keyset.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>Object next = iterator.next();<br>sout(next+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(next));<br>&#125;<br>(<span class="hljs-number">2</span>)把所有的value取出<br>Collection <span class="hljs-built_in">values</span> = <span class="hljs-built_in">map</span>.<span class="hljs-built_in">values</span>();<br><span class="hljs-keyword">for</span>(Object obj:<span class="hljs-built_in">values</span>)&#123;<br>sout(obj);<br>&#125;<br>Iterator iterator = <span class="hljs-built_in">values</span>.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>Object value = iterator.next();<br>sout(value)<br>&#125;<br>(<span class="hljs-number">3</span>)听过EntrySet来获取<span class="hljs-built_in">key</span><br>Set entryset = <span class="hljs-built_in">map</span>.entrySet();<br><span class="hljs-keyword">for</span>(Object entry:entrySet)&#123;<br>Map.entry m =(Map.Entry) entry;<br>sout(m.getKey()+m.getValue)<br>&#125;<br>Iterator iterator = entryset.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>Object obj = iterator.next();<br>Map.Entry m = (Map.Entry)entry;<br>sout(m.getKey(),m.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230302135646652.png" alt="image-20230302135646652"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//拿到key.<span class="hljs-keyword">Set</span>() 里边都是key<br><span class="hljs-keyword">Set</span> set1 = hashMap.keySet();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">Object</span> key :set1) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.<span class="hljs-keyword">get</span>(key));<br>&#125;<br><br>Iterator iterator = hashMap.keySet().iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    <span class="hljs-keyword">Object</span> key =  iterator.next();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.<span class="hljs-keyword">get</span>(key));<br>&#125;<br>//拿到EntrySet 里边是一个一个Entry 一个Entry都有返回key的方法<br><span class="hljs-keyword">Set</span> set2 = hashMap.entrySet();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">Object</span> o :set2) &#123;<br>    Map.Entry entry = (Map.Entry) o;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.<span class="hljs-keyword">get</span>(entry.getKey()));<br>&#125;<br>Iterator iterator1 = set2.iterator();<br><span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>    <span class="hljs-keyword">Object</span> next =  iterator1.next();<br>    Map.Entry entry = (Map.Entry)next;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.<span class="hljs-keyword">get</span>(entry.getKey()));<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h5><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sas">与hashset一样，不保证映射的顺序<br>允许键或者为空<br>没有实现线程同步，线程不安全，没有使用关键字修饰<br>底层数组加链表加红黑树<br>扩容机制和hashset完全一样<br>1.HashMap底层维护了Node类型的数组<span class="hljs-keyword">table</span>，默认为<span class="hljs-keyword">null</span><br>2.创建对象时通过加载因子loadfactor初始化为0.75<br>3.添加<span class="hljs-keyword">key</span>-value时，首先通过<span class="hljs-keyword">key</span>的哈希值得到再<span class="hljs-keyword">table</span>的索引，在判断索引是否有元素，没有元素直接添加，铀元素判断两个元素的<span class="hljs-keyword">key</span>是否相同，如果相等则直接替换val；不等判断是树还是链表，并继续向下进行比较，容量不够时进行扩容。<br>4.第一次添加时，默认<span class="hljs-keyword">table</span>容量为16，临界值（threshold）为12<br>5.在扩容时，需要扩容的<span class="hljs-keyword">table</span>容量为原来的2倍，临界值为原来的2倍，依次类推<br>6.Java8中，单链子元素超过TREEIFY_THRESHOLD（8）<span class="hljs-variable">&amp;&amp;</span> <span class="hljs-keyword">table</span> &gt;=MIN_TREEIFY_CAPACITY时，就会进行树化。<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230302152255292.png" alt="image-20230302152255292"></p><h5 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">和hashmap使用方法基本和hashmap一致<br>与hashmap一样，不保证映射的顺序<br>但hashtable实现了线程安全 <br>hashtabel键和值都不允许为空，否则抛出空指针异常<br>底层数组为Hashtable%Entry[] 初始大小为<span class="hljs-number">11</span> <br>临界值为threshould <span class="hljs-number">8</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>*<span class="hljs-number">0.75</span> ，超过<span class="hljs-number">8</span>才扩容<br><br></code></pre></td></tr></table></figure><p>properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">通常用来作为配置文件<br>是hashtable的子类<br>与hashtable一样，不保证映射的顺序<br>使用特点和Hashtable类似，存储键值对，不允许为空<br>可以从xxx.properties文件中加载某些数据到Properties类对象，并进行读取和修改<br>增加/修改 put<br>删除remove<br><br><span class="hljs-comment">//读取</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">fileReader</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>properties.list(System.out)<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>)<br><br><span class="hljs-comment">//创建,保存时使用的unicode码，修改就使用set方法</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>p.setProperty(key,value);<br>p.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">fileOutputStream</span>(<span class="hljs-string">&quot;src\\mysel2.properties&quot;</span>),<span class="hljs-literal">null</span>)<br></code></pre></td></tr></table></figure><h5 id="treemap"><a href="#treemap" class="headerlink" title="treemap"></a>treemap</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">默认构造器创建<span class="hljs-meta">map</span>是无序的<br>使用构造器传递一个实现了compator的匿名内部类进行key的比较<br>底层的put方法传入的是一个<span class="hljs-meta">Entry</span>，第一次添加把k-v封装到<span class="hljs-meta">Entry</span>对象，调用比较方法，判断放入的数据是否为空，然后放入root，以后添加走比较器。<br></code></pre></td></tr></table></figure><h3 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collection</span>.</span></span>reverse(<span class="hljs-built_in">list</span>)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collection</span>.</span></span>shuffle(<span class="hljs-built_in">list</span>)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collection</span>.</span></span>sort(<span class="hljs-built_in">list</span>)可以传入比较器<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collection</span>.</span></span>swap(<span class="hljs-built_in">list</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collection</span>.</span></span>max(<span class="hljs-built_in">list</span>)可以传入比较器 .min<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collection</span>.</span></span>frequency(<span class="hljs-built_in">list</span>,<span class="hljs-string">&quot;Tom&quot;</span>)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collection</span>.</span></span>copy(newlist,formaerlist) newlist的长度需要和<span class="hljs-built_in">list</span>保持一致 newlist=formaerlist<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collections</span>.</span></span>replace<span class="hljs-constructor">All(<span class="hljs-params">list</span>,<span class="hljs-params">former</span>,<span class="hljs-params">new</span>)</span> former=<span class="hljs-keyword">new</span><br></code></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">传统方法不能对加入到集合中的数据类型进行约束（不安全）<br>遍历的时候需要进行类型转换，影响效率<br><br>ArrayList&lt;Dog&gt; <span class="hljs-built_in">array</span>List = new ArrayList&lt;dog&gt;() <br>集合中的元素是Dog类型以及其子类型<br>遍历的时候可以直接取出dog类型<br><br>泛型可以表示多种数据类型（Integer，String，Dog）的数据类型<br>在类声名或者实例化的时候制定好具体的数据类型<br>泛型可以保证如果程序在编译时没有发出警告，运行时就不会出现类型转换异常<br>泛型可以在类声名时通过一个标识表示类中某个属性的类型，或者是某个方法返回值的类型，或者是参数类型<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Person</span>&lt;<span class="hljs-symbol">E</span>&gt;&#123;<br>E s;<span class="hljs-comment">//E表示s的数据类型，该数据类型在定义Person对象的时候指定，即在编译期间就确定了E是什么类型</span><br><span class="hljs-keyword">public</span> E f()&#123;<span class="hljs-comment">//E可以是返回类型</span><br><span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">public</span> Person(E s)&#123; <span class="hljs-comment">//E 可以是参数类型</span><br><span class="hljs-keyword">this</span>.s = s;<br>&#125;<br>&#125;<br><br>泛型的声明<br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">student</span>&lt;<span class="hljs-symbol">Q</span>,<span class="hljs-symbol">K</span>,<span class="hljs-symbol">V</span>&gt;&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">student</span>&lt;<span class="hljs-symbol">Q,<span class="hljs-symbol">K</span>,<span class="hljs-symbol">V</span></span>&gt;<br><br>泛型只能指定为引用类型<br>再给泛型指定具体类型后，可以传入该类型或该类型的子类<br><br>没有给泛型指定具体的类别，那么泛型的类型默认为<span class="hljs-symbol">Object</span><br><br>自定义泛型类的细节（使用 &lt;&gt;修饰的类）<br>普通成员（属性，方法）可以使用泛型<br>使用泛型的数组，不能初始化<br>静态方法中不能使用类的泛型（静态是和类相关的，在类加载时可能对象还没有创建，也就不知道泛型的具体类型是什么）<br>创建对象时，如果没有指定类型默认为<span class="hljs-symbol">object</span><br><br>自定义泛型接口细节<br>接口中，静态成员也不能使用泛型（<span class="hljs-symbol">U</span> <span class="hljs-symbol">name</span>也不行，接口内的变量默认被<span class="hljs-symbol">static</span>修饰）<br>泛型接口的类型，在继承接口或者实现接口时确定<br>没有指定类型，则默认为<span class="hljs-symbol">object</span><br><br>自定义泛型方法细节<br><span class="hljs-symbol">public</span> &lt;<span class="hljs-symbol">AAA</span>&gt; <span class="hljs-symbol">void</span> <span class="hljs-symbol">f</span>(<span class="hljs-symbol">AAA</span> <span class="hljs-symbol">a</span>)&#123;&#125;<br>泛型方法可以定义在泛型类中，也可以定义在普通类中<br>当泛型类被调用时类型必须被确定<br>泛型方法也可以使用泛型类中的泛型，注意区分泛型方法和方法使用泛型<br><br>泛型的继承和通配<br>泛型不允许向上向下转型（继承）<br>通配意思是：原本在使用&lt;&gt;时，泛型的类型是确定的，但现在可以通过添加修饰符来扩大其范围<br>&lt;?&gt;支持任意类型泛型  <br>&lt;? extends A&gt;支持A类以及A类的子类  <br>&lt;? <span class="hljs-keyword">super</span> A&gt;支持A类以及A类的父亲<br></code></pre></td></tr></table></figure><h3 id="单元测试junit"><a href="#单元测试junit" class="headerlink" title="单元测试junit"></a>单元测试junit</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">@<span class="hljs-keyword">Test</span>修饰方法<br>alt+<span class="hljs-keyword">enter</span>引入<span class="hljs-number">5.4</span><br></code></pre></td></tr></table></figure><h3 id="线程进程"><a href="#线程进程" class="headerlink" title="线程进程"></a>线程进程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java">创建线程有两种方式<br>继承Thread类，重写run方法，使用start（）运行【不调用star不会真正启动一个线程】<br><span class="hljs-keyword">package</span> thread_.simple_example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">job1</span> <span class="hljs-variable">job1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">job1</span>();<br>        job1.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;asdasd&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">job1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(count&gt;=<span class="hljs-number">10</span>)<br>                <span class="hljs-keyword">break</span>;<br>            System.out.println(<span class="hljs-string">&quot;----&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            count++;<br>        &#125;<br>    &#125;<br>&#125;<br>使用jconsole查看线程情况<br>主线程（main）不会被阻塞，一个进程不会因为主线程结束便直接消亡<br>star（）方法会调用star0方法，而star0时本地方法，由JVM调用，底层是c/c++实现，star0才是真正的多线程实现方法<br><br>实现Runnable接口，重写run方法（弥补单继承带来的问题 ）<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Job2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(count&gt;=<span class="hljs-number">60</span>)<br>                <span class="hljs-keyword">break</span>;<br>            System.out.println(<span class="hljs-string">&quot;bbbb&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            count++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(job2);<br>thread.start();<br>实例化一个thred对象，传入一个实现了Runable接口的类，这里使用了设计模式（代理模式）<br>无论是使用runable接口方式创建线程还是使用Thread重写run方法创建线程本质上没有区别，底层都是run0方法。使用runable接口方式更适合多个线程共享一个资源的情况，如创建多个线程接受实现了Runable的接口实现类<br>    <br>线程的中止<br>线程完成任务后会自动退出<br>在线程中定义一个flag，使得主线程可以修改，在主线程修改该flag即可实现提前中止线程<br>     <br>线程常用方法<br>setName：设置线程名称<br>getName:返回该线程名称<br>start:使线程开始执行<br>run：调用线程对象的run方法<br>setPriority：更改线程的优先级<br>getPriority：获取线程的优先级  <br>sleep：阻塞线程<br>interrupt:中断线程，但没有真正的结束线程，常用来中断sleep，wait，join等方法<br>yield：让不一定礼让成功<br>join：假设两个线程t1 t2 ，t2调用join,代表放弃资源。插入一但成功时，则会一直持续到执行完毕<br>    <br>守护线程<br>当所有的用户线程结束，守护线程自动结束，例如垃圾回收机制就是常见的守护线程<br>在run方法中设置为无限循环，在主线程中设置为job2.setDatmon(<span class="hljs-literal">true</span>),然后再启动<br>    <br>线程的生命周期<br>使用thread.State枚举表示了线程的几种状态<br>NEW 尚未启动的线程<br>RUNNABLE 在java虚拟机中执行的线程<br>BLOCKED 被阻塞的线程<br>WAITING 等待另一个线程的线程<br>TIMED_WAITING 正在等待另一个线程执行动作达到指定等待时间的线程<br>TERMINATED 已退出的线程<br>    <br><br>互斥锁：<br>java中引入了对象互斥锁的概念，来保证共享数据操作的完整性<br>每个对象都对应于一个可称为互斥锁的标记，保证在任一时刻，只能由一个线程来访问该对象<br>同步方法（非静态）的锁可以是<span class="hljs-built_in">this</span>，也可以是其他对象<br>同步方法（静态）的锁为当前类本身<br>    <br>线程同步：保证数据在任何同一时刻，最多只有一个线程访问<br>Synchronized两种用法<br><span class="hljs-number">1.</span>同步代码块（优先选用）<br>    <span class="hljs-number">2.</span>在方法上使用<span class="hljs-keyword">synchronized</span><br>    <br>线程的死锁<br>多个线程都占用了对方的锁资源，导致双方都无法继续往下运行<br>    <br>释放锁的操作：<br>    <span class="hljs-number">1.</span>当前线程的同步方法，同步代码块执行结束<br>    <span class="hljs-number">2.</span>当前线程的同步方法，同步代码块遇到<span class="hljs-keyword">break</span>，<span class="hljs-keyword">return</span><br>    <span class="hljs-number">3.</span>当前线程的同步方法，同步代码块出现了未处理的异常或者Error<br>    <span class="hljs-number">4.</span>当前线程的同步方法，同步代码块中执行了线程对象的wait方法，当前线程暂停并释放锁<br>不会释放锁的操作：<br>    <span class="hljs-number">1.</span>sleep(),yield()<br>    <span class="hljs-number">2.</span>线程执行同步代码块时，其他线程调用了该线程的suspend（）方法将该线程挂起<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230306110408471.png" alt="image-20230306110408471"></p><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">文件在程序中是以流的形式来操作的<br>流：数据在数据源（文件）和程序（内存）之间经历的路径<br>输入流：数据从数据源（文件）到程序（内存的路径）<br>输出流：数据从程序（内存）到数据源（文件）的路径<br>File的创建有三种方法（三种构造器）<br><span class="hljs-number">1.</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(String file)</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file1.createNewFile();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-number">2.</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(String floder,String file)</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(floder,file);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file1.createNewFile();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><span class="hljs-number">3.</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(File parentFile,String fileName)</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile, fileName);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file1.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;文件创建成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>常用文件操作<br>file.getName()获取文件的名字<br>file.getAbsolutepath()文件绝对路径<br>file.getParent()文件的父级别目录<br>file.length()文件的大小<br>file.exists()文件是否存在<br>file.isFile()是不是一个文件<br>file.isDirectory是不是一个目录<br>file.mkdir 创建一级目录<br>file.mkdirs创建多级目录<br>file.delete删除空目录或者文件<br>    <br>IO流原理和分类<br>java中，对于数据的输入输出以流的方式进行<br>按照操作数据的单位不同可以分为字节流（效率更低，操作二进制文件时保证无损操作）以及字符流（一个字符多少个字节要看具体的编码，效率更高）；按照数据流向可以分为输入流以及输出流；按照流的角色不同分为节点流以及处理流（包装流）<br>字节流输入流的顶级父类为InputStream，输出流的顶级父类为OutputStream<br>字符流输入流的顶级父类为Reader，输出流的顶级父类为Writer<br>Java的IO流共涉及<span class="hljs-number">40</span>多个子类，都是从上述的四个抽象基类派生出的，后续的子类名称都是以其父类名作为子类名后缀<br>    <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307095007372.png" alt="image-20230307095007372"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">InputStream常用类<br>FileInputStream有三个常用的构造器（String name） （File file） （fdob文件描述符）<br>read() 方法每次读取一个字节，返回<span class="hljs-type">int</span>类型，读取结束时返回-<span class="hljs-number">1</span> ，碰到汉字会乱码，因此文本文件最好用字符流<br> <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\zs\\Desktop\\game\\SBeacnm478.TXT&quot;</span>;<br>        FileInputStream fileInputStream=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            <span class="hljs-type">int</span> r_=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>( (r_=fileInputStream.read())!=-<span class="hljs-number">1</span>)<br>                System.out.println((<span class="hljs-type">char</span>)r_);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>使用read(<span class="hljs-type">char</span> a[])方法，读取成功时返回实际读取的字节数，形参表明了一次读取多少个<span class="hljs-type">byte</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span> r[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>        FileInputStream fileInputStream1=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            <span class="hljs-keyword">while</span>((len=fileInputStream1.read(r))!=-<span class="hljs-number">1</span>)<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(r));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream1.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307150912629.png" alt="image-20230307150912629"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">FileOutputStream有二个常用的构造器（String name） （File file，<span class="hljs-type">boolean</span> append） （fdob文件描述符）<br>当需要写入的文件不存在时，会创建文件（目录需要存在），当append为<span class="hljs-literal">true</span>时，则写入文件已存在不会覆盖而是在末尾追加<br> String file=<span class="hljs-string">&quot;D:\\a.txt&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>            <span class="hljs-comment">//写入一个字符</span><br>            fileOutputStream.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            <span class="hljs-comment">//写入字符串</span><br>            fileOutputStream.write(<span class="hljs-string">&quot;asdasdaasd&quot;</span>.getBytes());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br><br>例如输入流和输出流可以实现文件拷贝，参找use包实现的文件拷贝的练习<br>    <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307153657851.png" alt="image-20230307153657851"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307154150767.png" alt="image-20230307154150767"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">字符流的操作<br>FileReader<br>通过File对象或者传入绝对路径创建一个FileReader对象<br>通过read方法来实现文件的读取：<br>重载方法有read()单个字符读取，到文件末尾返回-<span class="hljs-number">1</span><br>read（<span class="hljs-type">char</span>[]）一次读取多个，返回读取的字符数，到末尾返回-<span class="hljs-number">1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[]) <span class="hljs-type">char</span>-&gt;String,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[],a,b) 指定部分转化为String<br>    <br>    <br><br>FileWriter<br>通过File对象或者绝对路径来创建一个FileWriter对象，通过指定一个<span class="hljs-type">boolean</span>=True来实现文件的追加模式<br>write(<span class="hljs-type">int</span>)写入单个字符<br>write(<span class="hljs-type">char</span>[])写入指定数组<br>write(<span class="hljs-type">char</span>[],a,b)写入指定部分<br>write(string) 写入string文件<br>    write(string,a,b)写入string指定部分<br>filewrite使用后必须要关闭或者刷新（flush），否则写入不到指定的文件<br></code></pre></td></tr></table></figure><h4 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">节点流可以从一个特定的数据读写数据，入FileReader，FileWriter<br>包装流（处理流）封装了所有的Reader子类。<br>节点流直接与数据源相连，处理流可以消除不同节点流的实现差异，也可以提供更为方便的方法来完成输入输出。<br>包装流使用了修饰器设计模式，不会与数据直接相连。<br>数据流的主要功能是（性能的提高），操作的便捷（提供了一系列便捷的方法来一次输入大批量的数据，使用更加灵活方便）<br><br>BufferReader和BufferWriter属于字符流 ，关闭时只需要关闭外层循环即可。<br><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BUfferedreader</span>（<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>（filePath））;<br><span class="hljs-keyword">while</span>((line=bufferedReader.readLine())!=<span class="hljs-literal">null</span>)<br>bufferedReader.close();<br><span class="hljs-comment">//Buffer在实现添加数据时实际上是在节点流部分的构造器添加</span><br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath,<span class="hljs-literal">true</span>))<br>bufferedWriter.write(<span class="hljs-string">&quot;hello&quot;</span>)<br>bufferedWriter.newLine();<br>bufferedWrite.close();<br><br>BufferedInputStream 和BufferedOutputStream属于字节流 用于操作二进制文件<br>需要注意写出时要指定长度<br>    <br><br><br>    <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307180556141.png" alt="image-20230307180556141"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307180648187.png" alt="image-20230307180648187"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">对象流（属于处理流）<br>将基本数据类型或者对象进行序列化（保存数据的值以及类型）或者反序列化操作（恢复数据的值以及类型）<br>需要序列化的对象必须实现Serializable（一般选这个）接口或者Externalizable（有方法）接口<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath))<br><span class="hljs-comment">//数据类型一定要写清楚</span><br>o.writeInt(<span class="hljs-number">100</span>) --自动装箱<br>o.writeBoolean(<span class="hljs-literal">true</span>)<br>o.writeUTF(<span class="hljs-string">&quot;asdasd&quot;</span>)<br>o.writrObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-number">10</span>)) <span class="hljs-comment">//需要实现Serializable接口</span><br>    <br><span class="hljs-comment">//反序列化</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath))<br><span class="hljs-comment">//读取顺序需要和你保存数据的顺序一致,需要调用该对象时，需要确保该对象在可以引用的位置</span><br><span class="hljs-comment">//反序列化调用该对象时，要确保和序列化时的包相同</span><br>o.readInt()<br>o.readBoolean()<br>o.readUTF()<br><span class="hljs-type">Objuct</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> o.readObject()<br>o.close()<br><span class="hljs-comment">//序列化时默认会把所有的属性全部序列化，除了static和transient修饰的成员</span><br><span class="hljs-comment">//序列化对象时，要求里边属性的类型也需要实现序列化接口</span><br><span class="hljs-comment">//序列化具备可继承性，父类如果实现了序列化，则其所有子类也默认实现了序列化</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">标准输入输出流（）<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>(输入流：编译类型InputStream，运行类型BufferedInpoutStream，从键盘接受)<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>（输出流：编译类型PrintStream，运行类型PrintStream<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307193250756.png" alt="image-20230307193250756"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307193456970.png" alt="image-20230307193456970"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">转换流 字节流包装为字符流<br>字节流可以指定编码，这样可以指定读入文件的编码类型而避免乱码问题<br>InputeStreamReader（inputStream，charset） 传入一个字节流，并且指定编码方式<br>OutputeStreamReader（OutputStream，charset） 传入一个字节流，并且指定编码方式 <br>处理纯文本数据时，使用字符流效率更高，且有效解决中文问题<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307193936897.png" alt="image-20230307193936897"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230307194041872.png" alt="image-20230307194041872"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">打印流(只有输出流没有输入流)<br>PrintStream 也可以打印到文件里 字节流<br>PrintWriter 也可以打印到文件里 字符流<br></code></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">前提：根据propoties文件中记录的信息，来创建一个新的类<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.setProperty(<span class="hljs-string">&quot;class_name&quot;</span>,<span class="hljs-string">&quot;com.zs.tools.Dog&quot;</span>);<br>properties.setProperty(<span class="hljs-string">&quot;meth&quot;</span>,<span class="hljs-string">&quot;say&quot;</span>);<br>properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src\\in_.properties&quot;</span>),<span class="hljs-literal">null</span>);<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties1.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src\\in_.properties&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">namee</span> <span class="hljs-operator">=</span> properties1.getProperty(<span class="hljs-string">&quot;class_name&quot;</span>).toString();<br><span class="hljs-type">String</span> <span class="hljs-variable">methh</span> <span class="hljs-operator">=</span> properties1.getProperty(<span class="hljs-string">&quot;meth&quot;</span>).toString();<br><br><span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(namee);<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance();<br><span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> cls.getMethod(methh);<br>method1.invoke(o);<br><br>反射机制允许程序在执行期间，借助于其提供的API访问任何类的内部信息（成员变量，属性，构造器，方法等），并可以操作对象的属性以及方法<br><br>加载完类之后，在堆中就产生了一个class类型的对象（一个类只有一个Class对象），这个对象包含了类完整的结构信息。通过这个对象得到类的结构，这个Class对象就像一面镜子，透过这个镜子看到类的结构，所以称之为反射。<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308152710207.png" alt="image-20230308152710207"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">在运行时判断任意一个对象所属的类<br>在运行时构造任意一个类的对象<br>在运行时得到任意一个类所有具有的成员变量和方法<br>在运行时调用任意一个对象的成员变量和方法<br>生成动态代理<br>java.lang.Class代表一个类，Class对象表示某个类加载后在堆中的对象<br>java.lang.reflect.Method代表类的方法<br>java.lang.reflect.Field 代表类的成员变量<br>java.lang.reflect.Constructor代表类的构造方法<br><br><span class="hljs-comment">//获取类中的字段</span><br><span class="hljs-type">Filed</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> cls.getField(<span class="hljs-string">&quot;age&quot;</span>)<br>nameField.get(o)<br><span class="hljs-comment">//获取类中的构造器</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cls.getConstructor() <br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> cls.getConstructor(String.class) <br><br>反射的优点和缺点<br>优点：可以动态的创建和使用对象<br>缺点：反射基本是解释执行，对执行速度有影响，可以使用需要获取的对象.setAccessible（<span class="hljs-literal">true</span>）取消访问检查提高访问效率<br><br>Class类<br>Class类对象不是<span class="hljs-keyword">new</span>出来的（<span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>（）），而是由系统创建的<br>对于某个类的class对象，在内存中只有一份，因为类只加载一次（老韩演示失败）<br>每个类的实例都会记得自己是由哪个class类对象创建的<br>通过class对象可以完整的得到一个类的完整结构<br>Class类对象是存放在堆的<br>类的字节码二进制数据是放在方法区的<br><br>    <br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">class</span>类常用方法<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308160614934.png" alt="image-20230308160614934"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308160730014.png" alt="image-20230308160730014"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">获取<span class="hljs-keyword">class</span>类对象的不同方法<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308161037503.png" alt="image-20230308161037503"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308161147129.png" alt="image-20230308161147129"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308161257802.png" alt="image-20230308161257802"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308161918707.png" alt="image-20230308161918707"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308162028584.png" alt="image-20230308162028584"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308162121741.png" alt="image-20230308162121741"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308162253838.png" alt="image-20230308162253838"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">类加载<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308162800356.png" alt="image-20230308162800356"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308162819032.png" alt="image-20230308162819032"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308163155057.png" alt="image-20230308163155057"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308163620862.png" alt="image-20230308163620862"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308163811640.png" alt="image-20230308163811640"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308164054801.png" alt="image-20230308164054801"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308164248602.png" alt="image-20230308164248602"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308164926219.png" alt="image-20230308164926219"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">通过反射获取类的结构信息<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308165525421.png" alt="image-20230308165525421"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308165726085.png" alt="image-20230308165726085"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308165903537.png" alt="image-20230308165903537"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308170301832.png" alt="image-20230308170301832"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">通过反射创建对象<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308170544818.png" alt="image-20230308170544818"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308171004686.png" alt="image-20230308171004686"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308171032935.png" alt="image-20230308171032935"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">通过反射访问类中的成员属性<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308171242896.png" alt="image-20230308171242896"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308171528597.png" alt="image-20230308171528597"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">通过反射访问类中的成员方法<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308171749624.png" alt="image-20230308171749624"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308171904364.png" alt="image-20230308171904364"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308172021707.png" alt="image-20230308172021707"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230308172100437.png" alt="image-20230308172100437"></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">处理文本的工具<br>用某种模式去匹配字符串的一个公式<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310131809083.png" alt="image-20230310131809083"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">group（<span class="hljs-built_in">n</span>）代表匹配到的pattern中的第<span class="hljs-built_in">n</span>个子模式<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">元字符，匹配的模板。例如\\d代表一位数字<br>元字符分为限定符，选择匹配符，分组组合和反向引用符，特殊字符，字符匹配符，定位符<br>java中的两个\\代表其他语言中的一个转义字符\，常见的有.*+()<span class="hljs-variable">$/</span>\<span class="hljs-string">?[</span>]^&#123;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310133924829.png" alt="image-20230310133924829"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310134000533.png" alt="image-20230310134000533"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310134722434.png" alt="image-20230310134722434"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310134452302.png" alt="image-20230310134452302"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310135016771.png" alt="image-20230310135016771"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310135054751.png" alt="image-20230310135054751"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310135328004.png" alt="image-20230310135328004"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">java默认是贪婪匹配，例如<span class="hljs-string">&quot;a&#123;3,4&#125;&quot;</span>会优先匹配四个<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310140455097.png" alt="image-20230310140455097"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310140823243.png" alt="image-20230310140823243"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310141113137.png" alt="image-20230310141113137"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310141048955.png" alt="image-20230310141048955"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310141549480.png" alt="image-20230310141549480"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310144335070.png" alt="image-20230310144335070"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310145637138.png" alt="image-20230310145637138"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310145747141.png" alt="image-20230310145747141"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310150027423.png" alt="image-20230310150027423"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310150225585.png" alt="image-20230310150225585"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310150316299.png" alt="image-20230310150316299"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310150345632.png" alt="image-20230310150345632"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/image-20230310150416327.png" alt="image-20230310150416327"></p><h3 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Lamabda表达式<br>lambda是作为接口的实例。例如某个接口只有一个抽象方法，那就没有必要知道方法的名字了<br> -&gt; 右边就相当于重写的抽象方法的方法体，左边就是抽象方法的形参列表<br> lambda表达式的本质：作为函数式接口（只声明了一个抽象方法，该方法就叫函数式接口）的实例<br> <br>    <br> 函数式接口：<br> 函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。<br> <span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">GreetingService</span> <br>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayMessage</span><span class="hljs-params">(String message)</span>;<br>&#125;<br>使用Lambda表达式来表示该接口的一个实现<br><span class="hljs-type">GreetingService</span> <span class="hljs-variable">greetService1</span> <span class="hljs-operator">=</span> message -&gt; System.out.println(<span class="hljs-string">&quot;Hello &quot;</span> + message);<br>传统的情况再调用函数式接口时需要传入一个匿名内部类并且重写该函数式接口的方法，现在只需要使用lambda表达式即可<br>    <br><br></code></pre></td></tr></table></figure><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs abnf">jvm 内存管理：堆，栈，方法区，值拷贝，值传递，常量池<br>java中的栈一般存放基本数据类型（局部变量）；堆存放对象，数组等；方法区：常量池【常量，字符串】，类加载信息<br>java创建对象基本流程：<br>首先加载类信息（方法区，只加载一次），其次在堆中分配空间并进行默认初始化，然后进行显示的初始化，最后进行构造器的初始化，把对象在堆中的地址返回给对象的引用（对象名）<br>java方法调用内存简单分析： <br>首先加载类信息，其次在堆中分配空间并进行默认初始化，然后返回对象的引用（把地址赋值给对象名），调用方法时，会单独为方法在栈中创建一个独立的空间，在其中完成计算后，return会返回到调用方法的主方法中，将值传递过去。<br><br>一个对象在jvm中的存在形式<br><br>在使用extends关键字时，需要注意到类名在前边，实例化时别把继承的父类实例化，然后调用不存在的方法<br><br>在静态主方法中，没有办法直接调用一个类的方法，需要实例化，或者将静态方法转化为非静态方法<br><br>float a <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>f <span class="hljs-operator">=</span><span class="hljs-operator">=</span> int b <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ；  float a<span class="hljs-operator">=</span><span class="hljs-number">1.1</span>f ！<span class="hljs-operator">=</span>int b <span class="hljs-operator">=</span> <span class="hljs-number">1</span>  ；float a <span class="hljs-operator">=</span> <span class="hljs-number">1.1</span>f  ，（int）a <span class="hljs-operator">=</span><span class="hljs-operator">=</span> b  ； char a <span class="hljs-operator">=</span><span class="hljs-number">12</span>，a <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">12</span><br><br>实例化一个对象的过程<br>首先进行类的加载<br>加载子类之前首先要加载父类<br>运行完父类的静态代码块和静态变量初始化<br>然后运行子类的静态代码块和静态变量初始化<br>接下来开始对象的创建<br>首先进入子类的构造器中<br>通过super进入到父类对应的构造器<br>将父类的普通代码块和普通变量进行初始化<br>将子类的普通代码块和普通变量进行初始化<br>结束<br>三元运算符会进行自动类型转换<br><br>每调用一个方法，都会在栈中分配一块空间，执行完后销毁，<br><br>.<span class="hljs-number">2</span>f会进行四舍五入<br><br>某个成员被transient修饰时不会被序列化<br><br>CRUD增删改查<br><br>哈希值不等同于hashcode（参加集合类）<br><br>别拿BufferReader ，writer操作二进制文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu18.04 搭建图床</title>
    <link href="/2023/07/13/ubuntu18.04-%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/07/13/ubuntu18.04-%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来想着拿雨雀当图床使，github是正常加载的，但很不幸的，个人博客是不行的，大致检索了一下，要备案<del>你可真甜蜜的是个小机灵鬼啊</del></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>下载PicGo</li><li>配置PicGo上传服务</li></ul><h1 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h1><p>地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>安装后出现了App损坏的提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo xattr -d com.apple.quarantine <span class="hljs-string">&quot;/Applications/PicGo.app&quot;</span><br></code></pre></td></tr></table></figure><p>这条命令的作用是删除应用程序的 “com.apple.quarantine” 扩展属性，以便绕过 macOS 的安全限制。在 macOS 上，当你下载并安装一个应用程序时，系统会自动为该应用程序添加 “com.apple.quarantine” 扩展属性，以确保应用程序的来源可信。如果你信任该应用程序，但是系统仍然给出警告，你可以使用这个命令来删除该扩展属性。请注意，使用这个命令需要管理员权限（sudo），并且需要替换命令中的 “&#x2F;Applications&#x2F;PicGo.app” 为你要删除扩展属性的应用程序的路径。确保你了解应用程序的来源，并且信任该应用程序，因为删除扩展属性可能会带来安全风险。</p><h1 id="配置PicGo上传服务"><a href="#配置PicGo上传服务" class="headerlink" title="配置PicGo上传服务"></a>配置PicGo上传服务</h1><h2 id="使用Github"><a href="#使用Github" class="headerlink" title="使用Github"></a>使用Github</h2><p>主要参照这篇文章：<a href="https://zhuanlan.zhihu.com/p/553533337">https://zhuanlan.zhihu.com/p/553533337</a></p><ul><li>创建一个新的仓库</li><li>设置开发者key</li><li>填信息即可</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131431872.png"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/block/DALL.png"></p><p>typora可以设置图床服务</p><h2 id="使用个人服务器"><a href="#使用个人服务器" class="headerlink" title="使用个人服务器"></a>使用个人服务器</h2><p>github很简单了，还免费，为啥还要搞捏，这要讨论到一片有趣的博文了。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/block/20230713092541.png"></p><p>基本上要做两件事</p><ul><li><p>配置图片存储服务端</p></li><li><p>配置PicGo配置文件</p><h2 id="图片存储服务器端"><a href="#图片存储服务器端" class="headerlink" title="图片存储服务器端"></a>图片存储服务器端</h2><p>想象一下别人家的图床开头一般都是http:&#x2F;&#x2F;啥的，很明显所谓的图床服务其实就是架设了一个<strong>web服务器</strong>。因此我们需要做两件事情</p><ul><li><p>创建一个物理存储目录</p></li><li><p>使用Nginx做一个路径转发</p><h3 id="物理存储目录的创建"><a href="#物理存储目录的创建" class="headerlink" title="物理存储目录的创建"></a>物理存储目录的创建</h3><p>别在root用户里搞，只有root账户的话创建一个新的用户&lt;username&gt;，放到sudo组里,然后登陆这个用户开始下一步；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG sudo &lt;username&gt;<br></code></pre></td></tr></table></figure><p>创建实际存储文件的文件夹，一般就是在你home&#x2F;user下创建；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /home/zs/blog/BlogImage/img2<br>chown -R zs:zs blog<br>chmod -R 777 blog<br></code></pre></td></tr></table></figure><h3 id="使用Nginx做路径转发"><a href="#使用Nginx做路径转发" class="headerlink" title="使用Nginx做路径转发"></a>使用Nginx做路径转发</h3><p>坑主要就在这了，很多博客都假定你是有域名和ssl的，但我觉得大多数人应该没兴趣去备案啥的…</p><p>这个部分也有两部组成</p><ul><li><p>安装Nginx</p></li><li><p>修改配置文件</p><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ubuntu 18.04哈</span><br>sudo apt update<br>sudo apt install nginx<br></code></pre></td></tr></table></figure><p>安装完后会自启动，直接开始下一步，修改配置文件</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p><del>我们没有域名，没有ssl，配置起来很简单。</del></p><p>它的逻辑就是当你请求<a href="http://host/figname%E6%97%B6%EF%BC%8CNginx%E4%BC%9A%E8%BF%9B%E8%A1%8C%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%99%E4%BD%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD/home/zs/blog/BlogImage/img2/figname%E7%9A%84%E8%B5%84%E6%BA%90">http://host/figname时，Nginx会进行重定向，并返回给你服务器中/home/zs/blog/BlogImage/img2/figname的资源</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在http块里加一个server块</span><br>server &#123;<br>                listen 80;<br>                server_name x.x.x.x;<br>                location / &#123; <br>                        alias /home/zs/blog/BlogImage/img2/;<br>                        autoindex on;<br>                        autoindex_exact_size off;<br>                &#125;<br>        &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="配置PicGo配置文件"><a href="#配置PicGo配置文件" class="headerlink" title="配置PicGo配置文件"></a>配置PicGo配置文件</h1><p>具体而言你需要准备如下一个json。如果你和我一样没有域名，那我觉得这件事情，泰酷辣！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;pool1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://x.x.x.x&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&#123;fullName&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;uploadPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/zs/blog/BlogImage/img2/&#123;fullName&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;x.x.x.x&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导致师弟被喷的比赛小项目</title>
    <link href="/2023/06/25/%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84AI%E6%AF%94%E8%B5%9B/"/>
    <url>/2023/06/25/%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84AI%E6%AF%94%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学校这次似乎承办省人工智能大赛，本来这种勾儿东西我一贯不感兴趣，然鹅老师非要我们碰一碰，所以我们就碰了一碰，然后师弟答辩被某学术大牛喷了，大牛说了一句很有水平的话，<del>“人家准确率都是90好几，你们七十八是个啥玩意？,就这也好意思来参加比赛啊？”</del>我初衷就是想玩一波视觉角度的few- shoot，那确实我们就训练了<strong>一</strong>轮得到一个78的<strong>top1</strong>验准率挺低的，你说的都对。也怪我不该让师弟一个人去答辩，毕竟代码是我一拍脑袋写的。本着虚心请教的想法看了看这位某防科大的高知的学术成果，一堆EI，挺<strong>厉害</strong>的。</p><h1 id="答辩前一天给师弟画的图"><a href="#答辩前一天给师弟画的图" class="headerlink" title="答辩前一天给师弟画的图"></a>答辩前一天给师弟画的图</h1><p>1.这个项目在做什么？</p><p>根据图片判断肺炎严重程度</p><p>2.怎么量化一个人肺炎严不严重</p><p>病灶的数量+肉眼不可见<strong>某种抽象特征</strong></p><p>3.MAE流程（预训练+训练分类器）</p><p>3.1<strong>预训练</strong>时结构为ENCODER+DECODER，通过一张图片的<strong>随机子块</strong>重建<strong>整张图片</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131601385.jpeg" alt="IMG_C4753C658AE6-1"></p><p>ENCODER<strong>只接受</strong>图片的<strong>随机子块</strong>，所以ENCODER可以训练的很大。</p><p>DECODER<strong>只接受</strong>ENCODER的输出，DECODER会输出一个和输入<strong>一摸一样大小</strong>的输出，这个输出按照如下方式构建：</p><ul><li>按照输入随机子块的位置，把ENCODER对应的输出放上去（两块粉的）</li><li>其余灰色的位置，初始化一块变量，复制到所有其他位置（10块灰的）</li></ul><p>最后计算DECODER的输出和ENCODER的输入之间的均方误差MSE</p><p>3.2<strong>训练分类器</strong>时只要ENCODER，然后在后边加个全连接</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131601246.jpeg" alt="IMG_8409BB4122B8-1"></p><p>4.我们做了什么</p><p>4.1收集肺炎数据集，对肺炎数据集进行大小的调整</p><p>4.2构建MAE模型，加载在imagenet上预训练的<strong>编码器</strong>权重，自己构造了一个小的解码器，并在肺炎数据集上进行了微调</p><p>4.3拿掉解码器，添加分类器，只训练一次（单张3090训练MAE非常慢，尽管MAE相较于传统的模型已经很小了）</p><p>4.4在训练集以及测试集上达到了很好的准确率</p><p>5.详细的结构</p><p>说白了就是transformer堆叠而成的编码器和解码器</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131601749.png" alt="image-20230625222951972"></p><p>一摸一样，一点不带差的，这个Input Embedding接受的就是那两块粉的，位置编码就是ViT的位置编码，他要问问位置编码，你就说是ViT架构的位置编码就行，他在问咋实现的，你就说用可学习的变量和随机子块相加。</p><p>那一块一块粉的，叫patches，就这么切的。一张图有由三个通道组成，说白了就每个图像的通道（矩阵）扣一块出来，所以一个patches的大小就是n*m*3,一般n和m相等。然后在reshape成一个（n*m*3&#x2F;k,k）的向量组，标准化一下，就可以直接扔到transformer里边了。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131602215.jpeg" alt="IMG_C3BE92416F0F-1"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 载入需要的库 </span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTImageProcessor, ViTModel,AutoFeatureExtractor,ViTMAEForPreTraining<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, ResNetForImageClassification<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTForImageClassification<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> data<br><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> transforms<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> AdamW<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler<br><span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-comment"># 至今也不理解为啥装两块不一样的卡 用3090</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-string">&quot;0&quot;</span><br>train = <span class="hljs-string">&quot;/home/temp2/train&quot;</span><br>test = <span class="hljs-string">&quot;/home/temp2/test&quot;</span><br>LABEL = <span class="hljs-string">&quot;/home/temp2/train.csv&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据集是图片，封装成dataset</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomImageDataset</span>(data.Dataset):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, transform=<span class="hljs-literal">None</span></span>):<br>        self.root_dir = root_dir<br>        self.transform = transform<br>        self.image_paths = []<br>        labEl = pd.read_csv(LABEL,header=<span class="hljs-literal">None</span>)<br>        <br>        self.my_dict = &#123;k: v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">list</span>(labEl[<span class="hljs-number">0</span>]), <span class="hljs-built_in">list</span>(labEl[<span class="hljs-number">1</span>]))&#125;<br>        <span class="hljs-keyword">for</span> subdir, _, files <span class="hljs-keyword">in</span> os.walk(root_dir):<br>            <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>                <span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">&#x27;.jpg&#x27;</span>) <span class="hljs-keyword">or</span> file.endswith(<span class="hljs-string">&#x27;.png&#x27;</span>):<br>                    self.image_paths.append(os.path.join(subdir, file))<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.image_paths)<br><span class="hljs-comment"># 这数据也挺搞得，放一个目录里，标签也没给，不然不需要自定义Dataset类的    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        image_path = self.image_paths[index]<br>        label = os.path.basename(image_path)<br>        label = self.my_dict[<span class="hljs-built_in">int</span>(label[:-<span class="hljs-number">4</span>])]<br>        image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>        <span class="hljs-keyword">if</span> self.transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            image = self.transform(image)<br>        <span class="hljs-keyword">return</span> image, label<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">Dir</span>):<br>    <span class="hljs-comment"># Define the root directory of the custom image dataset</span><br>    root_dir = Dir<br>    <span class="hljs-comment"># Create a CustomImageDataset object</span><br>    <span class="hljs-comment"># 按照VIT的标准化范式调整</span><br>    custom_dataset = CustomImageDataset(root_dir, transform=transforms.Compose([<br>        transforms.Resize((<span class="hljs-number">224</span>, <span class="hljs-number">224</span>)),<br>        <span class="hljs-comment">#transforms.CenterCrop(224),</span><br>        transforms.ToTensor(),<br>        transforms.Normalize((<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>), (<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>))<br>    ]))<br><br><span class="hljs-comment"># Use DataLoader to load the custom image dataset</span><br>    dataloader = data.DataLoader(custom_dataset, batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">return</span> dataloader<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">processor = ViTImageProcessor.from_pretrained(<span class="hljs-string">&#x27;facebook/vit-mae-base&#x27;</span>)<br>model = ViTForImageClassification.from_pretrained(<span class="hljs-string">&#x27;facebook/vit-mae-base&#x27;</span>,num_labels=<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 当时做了下梦</span><br><span class="hljs-comment"># processor = ViTImageProcessor.from_pretrained(&#x27;google/vit-base-patch16-224-in21k&#x27;)</span><br><span class="hljs-comment"># model = ViTModel.from_pretrained(&#x27;google/vit-base-patch16-224-in21k&#x27;,num_labels=5)</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">dataloader = get_data(test)<br>optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br>num_epochs = <span class="hljs-number">1</span><br><span class="hljs-comment"># 一轮咱也要预热哈哈哈，其实没用</span><br>num_training_steps = num_epochs * <span class="hljs-built_in">len</span>(dataloader)<br>lr_scheduler = get_scheduler(     name=<span class="hljs-string">&quot;linear&quot;</span>, optimizer=optimizer, num_warmup_steps=<span class="hljs-number">0</span>, num_training_steps=num_training_steps<br>)<br>model.train()<br>model.to(device)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">model = model.to(device)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> batch,label <span class="hljs-keyword">in</span> dataloader:<br>       <span class="hljs-comment"># print(batch)</span><br>        batch = batch.to(device)<br>        label = label.to(device)<br>        outputs=model(batch)<br>        loss = F.cross_entropy(outputs[<span class="hljs-string">&#x27;logits&#x27;</span>], label)<br>        loss.backward()<br>        optimizer.step()<br>        lr_scheduler.step()<br>        optimizer.zero_grad()<br>PATH = <span class="hljs-string">&quot;mae_1_epoch&quot;</span><br>torch.save(model.state_dict(), PATH)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一轮也有好坏～</span><br>PATH = <span class="hljs-string">&quot;mae_1_epoch_best&quot;</span><br>model.load_state_dict(torch.load(PATH))<br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>model.to(device)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 为了装skl我还重新整了个镜像，自从推出运维后天知道宿主机经历了什么</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix, accuracy_score, precision_score, recall_score, f1_score<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate</span>(<span class="hljs-params">model, dataloader</span>):<br>    <span class="hljs-comment"># 设置模型为评估模式</span><br>    model.<span class="hljs-built_in">eval</span>()<br>    model.to(device)<br>    <span class="hljs-comment"># 定义损失函数</span><br>    criterion = F.cross_entropy<br>    <span class="hljs-comment"># 定义记录变量</span><br>    predictions = []<br>    targets = []<br>    losses = []<br>    <span class="hljs-comment"># 遍历数据集</span><br>    <span class="hljs-keyword">for</span> images, labels <span class="hljs-keyword">in</span> dataloader:<br>        <span class="hljs-comment"># 将数据加载到设备上</span><br>        images, labels = images.to(device), labels.to(device)<br>        <span class="hljs-comment"># 前向计算</span><br>        outputs = model(images)<br>        loss = criterion(outputs[<span class="hljs-string">&#x27;logits&#x27;</span>], labels)<br>        <span class="hljs-comment"># 记录损失和预测结果</span><br>        losses.append(loss.item())<br>        predictions.append(torch.argmax(outputs[<span class="hljs-string">&#x27;logits&#x27;</span>], dim=<span class="hljs-number">1</span>).cpu().numpy())<br>        targets.append(labels.cpu().numpy())<br>    <span class="hljs-comment"># 计算各项指标</span><br>    predictions = np.concatenate(predictions)<br>    targets = np.concatenate(targets)<br>    acc = accuracy_score(targets, predictions)<br>    precision = precision_score(targets, predictions, average=<span class="hljs-string">&#x27;macro&#x27;</span>)<br>    recall = recall_score(targets, predictions, average=<span class="hljs-string">&#x27;macro&#x27;</span>)<br>    f1 = f1_score(targets, predictions, average=<span class="hljs-string">&#x27;macro&#x27;</span>)<br>    cm = confusion_matrix(targets, predictions)<br>    <span class="hljs-comment"># 输出结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loss: &#123;:.5f&#125;, Accuracy: &#123;:.5f&#125;, Precision: &#123;:.5f&#125;, Recall: &#123;:.5f&#125;, F1: &#123;:.5f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>        np.mean(losses), acc, precision, recall, f1))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Confusion Matrix:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(cm)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131611773.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还得是学术大牛啊</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim远程拷贝</title>
    <link href="/2023/06/20/vim%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D/"/>
    <url>/2023/06/20/vim%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近由于在写cs144的lab一直在和vim打交道，然后就诞生出了一个莫名其妙的需求，如何从服务器的vim中复制到我本地的剪贴板上？然后我搜索到了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ggvG+y<br></code></pre></td></tr></table></figure><p>没错，这东西根本没用啊，它是复制到了服务器本地的寄存器上…然后发现了这篇神奇的文章</p><p><a href="https://flogx.com/post/vim-remote-copy/">https://flogx.com/post/vim-remote-copy/</a></p><h2 id="修改本机ssh设置"><a href="#修改本机ssh设置" class="headerlink" title="修改本机ssh设置"></a>修改本机ssh设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.ssh/config<br></code></pre></td></tr></table></figure><p>然后添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Host *<br>    RemoteForward 22222 127.0.0.1:22222<br></code></pre></td></tr></table></figure><p>*<em>这段配置的意义是使用 SSH 登录任何主机时（Host <em>），将主机本地的 22222 端口（RemoteForward 22222）映射到远程主机的 127.0.0.1:22222 地址上。</em></em></p><h2 id="修改服务器的Vim配置文件"><a href="#修改服务器的Vim配置文件" class="headerlink" title="修改服务器的Vim配置文件"></a>修改服务器的Vim配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~<br>vim .vimrc<br></code></pre></td></tr></table></figure><p>然后添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">function! s:send2net()<br>    let ch = ch_open(&#x27;127.0.0.1:22222&#x27;)<br>    if ch_status(ch) != &quot;open&quot;<br>        echomsg &quot;Failed to open channel, status = &quot; .. ch_status(sh)<br>    endif<br>    call ch_sendraw(ch, getreg(&#x27;&quot;&#x27;))<br>endfunction<br><br>augroup send2net<br>    au!<br>    au TextYankPost * if v:event.operator ==# &#x27;y&#x27; | call s:send2net() | endif<br>augroup END<br></code></pre></td></tr></table></figure><p><strong>这段配置的意义是在触发vim的y（复制）操作时，将内容发送到本地的22222端口，在前边我们已经将本机和服务器的22222端口进行了绑定。</strong></p><h2 id="配置mac系统"><a href="#配置mac系统" class="headerlink" title="配置mac系统"></a>配置mac系统</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; $HOME/Library/LaunchAgents/pbcopy.plist &lt;&lt; END<br></code></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;<br>&lt;plist version=&quot;1.0&quot;&gt;<br>    &lt;dict&gt;<br>        &lt;key&gt;Label&lt;/key&gt;<br>            &lt;string&gt;localhost.pbcopy&lt;/string&gt;<br>        &lt;key&gt;ProgramArguments&lt;/key&gt;<br>        &lt;array&gt;<br>            &lt;string&gt;/usr/bin/pbcopy&lt;/string&gt;<br>        &lt;/array&gt;<br>        &lt;key&gt;inetdCompatibility&lt;/key&gt;<br>        &lt;dict&gt;<br>            &lt;key&gt;Wait&lt;/key&gt;<br>            &lt;false/&gt;<br>        &lt;/dict&gt;<br>        &lt;key&gt;Sockets&lt;/key&gt;<br>        &lt;dict&gt;<br>            &lt;key&gt;Listeners&lt;/key&gt;<br>            &lt;dict&gt;<br>                &lt;key&gt;SockServiceName&lt;/key&gt;<br>                &lt;string&gt;22222&lt;/string&gt;<br>                &lt;key&gt;SockNodeName&lt;/key&gt;<br>                &lt;string&gt;127.0.0.1&lt;/string&gt;<br>            &lt;/dict&gt;<br>        &lt;/dict&gt;<br>    &lt;/dict&gt;<br>&lt;/plist&gt;<br>END<br></code></pre></td></tr></table></figure><p>加载配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">launchctl load -w $HOME/Library/LaunchAgents/pbcopy.plist<br></code></pre></td></tr></table></figure><p>检查配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">launchctl list | grep localhost.pbcopy<br></code></pre></td></tr></table></figure><p><strong>这段配置的意义就是监听本地22222端口的链接，并把数据复制到剪贴板中（pbcopy）。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPT2的心情好不好呢？</title>
    <link href="/2023/06/04/bad_boy_gpt/"/>
    <url>/2023/06/04/bad_boy_gpt/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>到现在为止许多人已经体验到ChatGPT的强大威力了，它有非常多的缺点，例如幻觉，今天在写简历的时候，我想检查一下自己论文标题的拼写是否正确，<del>补全和竞赛这个单词我经常搞混…</del>，于是我话费了我宝贵的数十个tokens输入了我论文的名称：single cell imputation via adaptive matrix completion，然后它对我进行了以下的回复：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss">单细胞测序数据中存在许多缺失值，这对下游分析和解释造成了很大的困难。为了解决这个问题，研究人员提出了一种称为自适应矩阵完成（Adaptive <span class="hljs-keyword">Matrix</span> Completion）的方法，用于单细胞数据的缺失值填充。<br><br>自适应矩阵完成方法是一种基于矩阵分解的方法，它使用低秩矩阵分解来对单细胞数据进行建模。该方法首先利用已知数据来训练一个低秩矩阵模型，然后使用该模型来推断未知的数据点。该方法还使用自适应权重来调整矩阵分解模型，以适应不同的细胞和基因之间的差异。<br><br>具体来说，该方法为每个基因和每个单元格计算一组权重，这些权重可以反映该基因或单元格与其他基因或单元格之间的相关性。然后，这些权重被用于调整矩阵分解模型，以更好地适应数据的不同特征。<br><br>该方法在多个真实数据集上进行了测试，并与其他现有方法进行了比较。结果表明，自适应矩阵完成方法在单细胞数据的缺失值填充方面表现出色，并且可以提高下游分析的准确性和可靠性。<br></code></pre></td></tr></table></figure><p>如果不了解的人呢，可能会被忽悠到了，但是我的方法和矩阵分解压根就没有关系，但你说它完全bullshit，也不是，为啥呢？首先矩阵完成这个任务我觉得做信号处理或者服务推荐的人应该并不陌生，例如Netflix曾经花了一百万悬赏那些能够解决他们推荐问题的人，当年的冠军算法中就有矩阵分解的影子。矩阵补全框架中<strong>确实有</strong>一种<strong>基于矩阵分解</strong>的<strong>矩阵完成算法</strong>。自适应权重也是瞎扯吗？也不是，那我的论文确实和自适应参数有关系，也确实用了自适应权重调整模型，不过不是基于矩阵分解的就对了…具体来说这部分呢，嗯…，一股浓浓的的scImpute（NC的文章，感兴趣谷歌学术搜索，scRNA-seq scImpute）的味道，最后一段呢，太熟悉了。</p><p>所以他是<strong>瞎扯</strong>吗？我倾向于不是，如果你对某个领域有比较深入的了解的话，实际上它还是可以为你带来很多帮助的。但如果你对某个领域完全未知，那确实很容易被带跑偏了。所以重点的就来了，ChatGPT在初始训练阶段还是沿用了GPT2的方案，吃了大量的数据，所以我们其实可以把ChatGPT看成一个对世界所有文字信息<del>（期待那一天的到来）</del>的压缩模型，在不进行promote以及使用HMRF进行有害性的控制前，你给定一段输入，那么它会返回给你最能匹配训练数据分布的一组输出。<strong>有趣的终于来了</strong></p><h1 id="我对你好，你会对我好吗？"><a href="#我对你好，你会对我好吗？" class="headerlink" title="我对你好，你会对我好吗？"></a>我对你好，你会对我好吗？</h1><p>在这里我们设计一个场景，我们不断的对GPT2说你好，GPT2的回答，是消极占比多呢？</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-number">1</span>.CV hugging <span class="hljs-built_in">face</span>中GPT2以及随便一个用于情绪文本分类的模型<br><span class="hljs-number">2</span>.不断的对GPT2说你好<br><span class="hljs-number">3</span>.记录GPT的回答，分数，以及是积极还是消极<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline, set_seed<br>set_seed(<span class="hljs-number">3</span>)<br>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)<br>generator = pipeline(<span class="hljs-string">&#x27;text-generation&#x27;</span>, model=<span class="hljs-string">&#x27;gpt2&#x27;</span>)<br>res = []<br>num_p = <span class="hljs-number">0</span><br>num_n = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ans:<br>    ansers = <span class="hljs-built_in">str</span>(i[<span class="hljs-string">&#x27;generated_text&#x27;</span>])<br>    label  = classifier(ansers)<br>    res.append([label[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;label&#x27;</span>],ansers])<br>    <span class="hljs-keyword">if</span>(label[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;label&#x27;</span>]==<span class="hljs-string">&#x27;POSITIVE&#x27;</span>):<br>        num_p = num_p +  <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(label[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;label&#x27;</span>]==<span class="hljs-string">&#x27;NEGATIVE&#x27;</span>):<br>        num_n = num_n +  <span class="hljs-number">1</span> <br><span class="hljs-built_in">print</span>(num_n/(num_p+num_n))<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131515262.png"></p><p>啊这~看来它的情绪不太好啊，<del>众所周知深度学习的基石是随机数种子</del>，那么我们来测试下1-100的随机数种子吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> norm<br>plt.title(<span class="hljs-string">&#x27;Probability with different seed&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;seed&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Probability&#x27;</span>)<br>x = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>pdf = norm.pdf(x, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>cdf = norm.cdf(x, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, res, label=<span class="hljs-string">&#x27;n/(p+n)&#x27;</span>)<br>plt.legend()<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131516851.png"></p><p>嗯，说实话这个图看起来还是有点问题的，来画个小提琴看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = np.asarray(res)<br>sns.violinplot(y=data)<br>plt.xlabel(<span class="hljs-string">&#x27;Distribution&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;n/(p+n)&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Violin Plot&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131516422.png"></p><p>所以我们基本可以说，GPT2的心情似乎不太好哦～不过其实有个问题在这里，就是我们的分类器到底会把什么样的样本看作是Positive，什么样的样本看作Negative的呢？后边慢慢再继续研究～</p><h1 id="我对你不好，你会对我好吗？"><a href="#我对你不好，你会对我好吗？" class="headerlink" title="我对你不好，你会对我好吗？"></a>我对你不好，你会对我好吗？</h1><p><del>如果我说了一些不太好的话，那么阁下又当如何应对呢？</del>问题来了，说啥呢？说这两句话，第二句我就….直接给出小提琴图吧。</p><p>1.you are not cool !</p><p>2.F###</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131517043.png"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131517382.png" alt="image-20230606160231718"></p><p>那么均值已经在0.8了，所以你说了不那么cool的话，那么大概率不会得到太好的回复<del>（你会被喷回去）</del>。所以当我们对GPT2打招呼时，平均来说有**42%<strong>的概率会得到一些算法认为不那么“积极”的回复；那么如果你直接告诉GPT2它不裤的话，</strong>80%<strong>的概率会被GPT2“友好”的回复，但你如果直接喷它，诶？</strong>67%**的概率得到Negative的回答，这就很魔性了<del>舔狗一无所有？</del>。这其实告诉我们，为什么GPT4.0要在甚至会降低模型在评估任务上的效能的前提下，还要花那么多功夫做有害性控制。虽然不知道原因，但GPT系列起码是2来说，确实不那么正能量。<del>都和你说你好了，你还要PUA我！</del></p><h1 id="GPT2用了什么数据训练？"><a href="#GPT2用了什么数据训练？" class="headerlink" title="GPT2用了什么数据训练？"></a>GPT2用了什么数据训练？</h1><p>先把huggingface中的话复制下来：</p><p>The OpenAI team wanted to train this model on a corpus as large as possible. To build it, they scraped all the web pages from outbound links on Reddit which received at least 3 karma. Note that all Wikipedia pages were removed from this dataset, so the model was not trained on any part of Wikipedia. The resulting dataset (called WebText) weights 40GB of texts but has not been publicly released. You can find a list of the top 1,000 domains present in WebText here.</p><p>所以GPT2的训练数据主要是从reddit上爬下来的，要求Karma值在3以上的帖子才会被纳入训练。我们去看看论文中怎么写的</p><p>The resulting dataset, WebText, contains the text subset of these 45 million links. To extract the text from HTML responses we use a combination of the Dragnet (Peters &amp; Lecocq, 2013) and Newspaper1 content extractors. All re- sults presented in this paper use a preliminary version of WebText which does not include links created after Dec 2017 and which after de-duplication and some heuristic based cleaning contains slightly over 8 million documents for a total of 40 GB of text.</p><p>和huggingface上的描述差不多，爬下来的数据还做了一些清理，约800万个文档，40GB的文本，换算过来每一万个文档有0.05个GB，每一个文档52MB，如果使用unicode编码的话，一个字4Bytes，一个文档大约一千万字，这还是挺恐怖的…星辰变大概是200万字，一个文档大约等于5本小说，八百万乘以500…</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们的提问其实可以不严谨的分为三种情绪。</p><ul><li>态度良好的试探性语句</li><li>不太礼貌的批判性语句</li><li>带有极强攻击性的语句</li></ul><p>三者所得到的回复被判定为消极性回复的比例分别是：40%，80%，67%。假如我们是个贪心的人，希望尽可能多的得到别人积极的回复。我们有时候会态度良好的对他人进行试探，我们有时候会不太礼貌的对他人进行批判，心情比较糟糕的时候会对他人进行攻击，为了最大化我们的目标，我们要尽可能多的以礼待人，或者需要让别人意识到我们具有极强的攻击性，以及尽可能不要<del>阴阳怪气别人</del>。</p><p>做个彬彬有礼的人，必要时刻要亮出你自己的爪牙，与你无关的事不要乱掺和。</p>]]></content>
    
    
    
    <tags>
      
      <tag>头脑风暴</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣</title>
    <link href="/2023/06/02/%E5%8A%9B%E6%89%A3/"/>
    <url>/2023/06/02/%E5%8A%9B%E6%89%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>leetcode会自动清除提交过的代码<del>看看人家洛谷，一年前的还留着呢</del>，对于我这个资深bug师来说那可是毁灭性的。开始记录吧，以后开三个帖子，一个挂leetcode，一个挂洛谷，一个挂PAT吧。</p><h2 id="最长的回文子串"><a href="#最长的回文子串" class="headerlink" title="最长的回文子串"></a>最长的回文子串</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入：s = &quot;babad&quot;<br>输出：&quot;bab&quot;<br>解释：&quot;aba&quot; 同样是符合题意的答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入：s = &quot;cbbd&quot;<br>输出：&quot;bb&quot;<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>看到这个数据范围我上来想都没想直接暴力，然后挂了，嗯。枚举回文子串的长度，枚举回文子串的开头，然后再判断是不是回文，记录最大结果。这道题有一种很巧妙<del>不想看</del>的做法，那么给出正解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//枚举每个可能会回文子串的中心点【当回文子串是偶数时枚举的是中心没有元素的位置】</span><br>    <span class="hljs-comment">//向两边展开，记录最大长度</span><br>    <span class="hljs-comment">//维护一个最大长度，更大时替换子串，子串为从【i-（len-1）/2，len】 </span><br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> s;<br>    <span class="hljs-type">short</span> max_len = <span class="hljs-number">-1</span>;<br>    string res = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();++i)&#123;<br>        <span class="hljs-type">short</span> len1 = <span class="hljs-built_in">num</span>(s,i,i); <br>        <span class="hljs-type">short</span> len2 = <span class="hljs-built_in">num</span>(s,i,i+<span class="hljs-number">1</span>);<br>        <span class="hljs-type">short</span> len = <span class="hljs-built_in">max</span>(len1,len2);<br>        <span class="hljs-keyword">if</span>(len&gt;max_len)&#123;<br>            res = s.<span class="hljs-built_in">substr</span>(i-(len<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>,len);<br>            max_len = len;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">short</span> <span class="hljs-title">num</span><span class="hljs-params">(string s,<span class="hljs-type">short</span> l,<span class="hljs-type">short</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(l&gt;=<span class="hljs-number">0</span> &amp;&amp; r&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[l]==s[r])&#123;<br>            l--;<br>            r++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r-l<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这道题比较抽象的地方应该就在于回文子串的长度是偶数了吧，其$len1 &#x3D; num(s,i,i)$比较好理解，对$i$两边进行扩散，可以求出以$i$为中心的最长回文子串长度，而且这个数一定是个奇数，假设对于某个位置$i$满足了条件，并且迭代了$k$次，那么$   l &#x3D; i-k  ,\qquad r &#x3D; i+k,\qquad r-l-1 &#x3D;  2k - 1$，导致这种方式只能得到以$i$为中心的<strong>最长奇数回文子串</strong>。所以我们还需要考虑到以$i$和$i+1$为中心的<strong>最长偶数回文子串</strong>，可以通过$len2&#x3D;num(s,i,i+1)$的方式来得到，那么套用上边的计算方法可以得到$r-l-1 &#x3D; 2k$。那么我们只需要比较两种方案的长度，维护一个最大长度$max_len$，当前情况更大时对字符串作截取就可以。那么这就涉及到了两种情况，怎么根据$i$和$max_len$来确定这个回文子串呢？</p><p>我们使用$substr(start，end)$函数来对字符串进行截断，需要注意的是$substr$函数是属于左闭右开的形式，也就是$start$位置的串会被取到，而$end$位置的串不会被取到。在这个前提下我们考虑这个问题，当$max_len$为奇数时，$i$代表了当前结果的中心位置，串的长度是$max_len$，所以我们需要向$i$所在的位置向左偏移$(max_len-1)&#x2F;2$ 个位置，向右偏移$(max_len-1)&#x2F;2$ 个位置。</p><p>当$max_len$为偶数时，假如$i$此时位于会文子串中间不存在的位置记为$i*$，那么我们需要向左以及向右移动$(max_len)&#x2F;2$个位置，因为这个位置不存在，所以我们只能把$i$放在$i*$偏左或者偏右的位置，一般我们习惯于放在偏左的位置，因为这个位置的索引等$max_len&#x2F;2$，所以我们需要向左移动$(max_len-1)&#x2F;2$ 个位置，向右移动$(max_len)&#x2F;2$ 个位置。</p><p>因为我们实际上枚举的是以$i$为中心向左右拓展的会文子串，因此靠右的位置我们只需要令其为会文子串的长度$max_le n$就好。为什么是$max_len$而不需要减1呢，索引是从0开始的啊。因为substr采用的是左闭右开的形式，右边多一个位置没关系～</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id="下一个排列"><a href="#下一个排列" class="headerlink" title="下一个排列"></a>下一个排列</h2><p>整数数组的一个 <strong>排列</strong> 就是将其所有成员以序列或线性顺序排列。</p><ul><li>例如，<code>arr = [1,2,3]</code> ，以下这些都可以视作 <code>arr</code> 的排列：<code>[1,2,3]</code>、<code>[1,3,2]</code>、<code>[3,1,2]</code>、<code>[2,3,1]</code> 。</li></ul><p>整数数组的 <strong>下一个排列</strong> 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 <strong>下一个排列</strong> 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p><ul><li>例如，<code>arr = [1,2,3]</code> 的下一个排列是 <code>[1,3,2]</code> 。</li><li>类似地，<code>arr = [2,3,1]</code> 的下一个排列是 <code>[3,1,2]</code> 。</li><li>而 <code>arr = [3,2,1]</code> 的下一个排列是 <code>[1,2,3]</code> ，因为 <code>[3,2,1]</code> 不存在一个字典序更大的排列。</li></ul><p>给你一个整数数组 <code>nums</code> ，找出 <code>nums</code> 的下一个排列。</p><p>必须 <a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"><strong>原地</strong></a> 修改，只允许使用额外常数空间。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums = [1,2,3]<br>输出：[1,3,2]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums = [3,2,1]<br>输出：[1,2,3]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums = [1,1,5]<br>输出：[1,5,1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这个问题首先要清楚什么是<strong>字典序，</strong>现在我们有一个字符串，[‘1’,’2’,’3’]。那么它的字典序实际上是一个整数序列[49，50，51] 。这道题实际叙述的并不好，其实就是：</p><p><strong>需要找到一个比当前字符串更大的典序$ S* $，而不存在任何一个字典序满足比原字典序更大而比$S *$更小的字典序$^{sub}$。</strong>  </p><p>那么我们该如何找到这样的$S*$呢？，假如题目要求的不是我们对$nums$排序的话，我们只需要把$nums$看作一个整数，然后加1就是要求的结果。然而题目要求我们通过对$nums$排序来使得找到字典序$S*$。</p><p>为了使得字典序变高，很明显我们需要把某一位置的元素变为字典序更大的元素，而这个操作只能通过交换来完成。我们把交换的元素记作$A[L],A[R]$，为了满足条件$^{sub}$，我们需要$R$尽可能的大，同时我们希望$A[L]$恰好小于$A[R]$，交换完成后我们要令$A[L]’$之后的位置升序（使得交换后的大序列更小）。</p><p>首先寻找$A[L]$,从后向前扫描，只要满足$A[i]&lt;A[i+1]$时，我们便找到了$A[L]$的位置，且$i$之后的位置一定是递增的。</p><p>接下来寻找$A[R]$,从后向前找到第一个大于$A[L]$的元素</p><p>交换两者，并令$A[L]$之后的位置递增。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>       <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-type">int</span> l=<span class="hljs-number">-1</span>,r=<span class="hljs-number">-1</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>           <span class="hljs-keyword">if</span>(nums[i]&lt;nums[i+<span class="hljs-number">1</span>])&#123;<br>               l = i;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(l==<span class="hljs-number">-1</span>)&#123;<br>           <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>           <span class="hljs-keyword">return</span> ;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;l;i--)&#123;<br>           <span class="hljs-keyword">if</span>(nums[i]&gt;nums[l])&#123;<br>               r = i;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">swap</span>(nums[l],nums[r]);<br>       <span class="hljs-comment">//sort(nums.begin()+l+1,nums.end());</span><br>       <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>() + l + <span class="hljs-number">1</span>, nums.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>huggingface之transformers</title>
    <link href="/2023/05/30/huggingface%E4%B9%8Btransformers/"/>
    <url>/2023/05/30/huggingface%E4%B9%8Btransformers/</url>
    
    <content type="html"><![CDATA[<h1 id="Transformers库"><a href="#Transformers库" class="headerlink" title="Transformers库"></a>Transformers库</h1><p><strong>前言</strong>：</p><p>Hugging Face 是一个人工智能与自然语言处理技术公司，成立于2016年，总部位于美国纽约。该公司已经成为业内知名的开源机器学习工具和数据集库的提供者之一，提供了很多用于自然语言处理（NLP）的工具和模型，例如 BERT、GPT 等，这些工具都是基于 PyTorch 框架实现的。<del>Tensorflow亡了</del></p><p><strong>doc</strong>：<a href="https://huggingface.co/docs/transformers/installation">https://huggingface.co/docs/transformers/installation</a></p><h1 id="安装conda"><a href="#安装conda" class="headerlink" title="安装conda"></a>安装conda</h1><p>没什么特别的，下载完后直接bash就好，安装完成后需要运行一下conda init，版本是conda 4.10.3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./conda init <br></code></pre></td></tr></table></figure><p>主要有个挺搞笑的，yes完后，直接没配置，所以就有了上边一步</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">installation finished.<br>Do you wish the installer <span class="hljs-keyword">to</span> initialize Anaconda3<br><span class="hljs-keyword">by</span> running conda init? [<span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span>]<br>[<span class="hljs-literal">no</span>] &gt;&gt;&gt; <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><h1 id="安装transformers"><a href="#安装transformers" class="headerlink" title="安装transformers"></a>安装transformers</h1><p>首先搞个虚拟环境吧，python3.8吧，3.6感觉太低了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n transformer python=3.8<br><span class="hljs-comment"># 别忘了激活...</span><br>conda activate transformer<br></code></pre></td></tr></table></figure><p>然后直接pip安装就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install transformers<br></code></pre></td></tr></table></figure><p>然后torch装一下就好(tensorflowGPU支持太恶心了，再见)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> install pytorch==<span class="hljs-number">1</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> torchvision==<span class="hljs-number">0</span>.<span class="hljs-number">14</span>.<span class="hljs-number">1</span> torchaudio==<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> pytorch-cuda=<span class="hljs-number">11</span>.<span class="hljs-number">7</span> -c pytorch -c nvidia<br></code></pre></td></tr></table></figure><h1 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline()"></a>pipeline()</h1><p>用一种非常简单的方式来使用预训练模型</p><p>NLP相关的任务：<strong>文本分类</strong>，<strong>文本生成</strong> …</p><p>图像相关的任务：<strong>分类</strong>，<strong>分割</strong>…</p><p>音频类任务:<strong>文本识别</strong></p><p>多模态：<strong>看图输出文字</strong></p><p>完整的模型库在这里：<a href="https://huggingface.co/models">https://huggingface.co/models</a></p><table><thead><tr><th><strong>Task</strong></th><th><strong>Description</strong></th><th><strong>Modality</strong></th><th><strong>Pipeline identifier</strong></th></tr></thead><tbody><tr><td>Text classification</td><td>assign a label to a given sequence of text</td><td>NLP</td><td>pipeline(task&#x3D;“sentiment-analysis”)</td></tr><tr><td>Text generation</td><td>generate text given a prompt</td><td>NLP</td><td>pipeline(task&#x3D;“text-generation”)</td></tr><tr><td>Summarization</td><td>generate a summary of a sequence of text or document</td><td>NLP</td><td>pipeline(task&#x3D;“summarization”)</td></tr><tr><td>Image classification</td><td>assign a label to an image</td><td>Computer vision</td><td>pipeline(task&#x3D;“image-classification”)</td></tr><tr><td>Image segmentation</td><td>assign a label to each individual pixel of an image (supports semantic, panoptic, and instance segmentation)</td><td>Computer vision</td><td>pipeline(task&#x3D;“image-segmentation”)</td></tr><tr><td>Object detection</td><td>predict the bounding boxes and classes of objects in an image</td><td>Computer vision</td><td>pipeline(task&#x3D;“object-detection”)</td></tr><tr><td>Audio classification</td><td>assign a label to some audio data</td><td>Audio</td><td>pipeline(task&#x3D;“audio-classification”)</td></tr><tr><td>Automatic speech recognition</td><td>transcribe speech into text</td><td>Audio</td><td>pipeline(task&#x3D;“automatic-speech-recognition”)</td></tr><tr><td>Visual question answering</td><td>answer a question about the image, given an image and a question</td><td>Multimodal</td><td>pipeline(task&#x3D;“vqa”)</td></tr><tr><td>Document question answering</td><td>answer a question about a document, given an image and a question</td><td>Multimodal</td><td>pipeline(task&#x3D;“document-question-answering”)</td></tr><tr><td>Image captioning</td><td>generate a caption for a given image</td><td>Multimodal</td><td>pipeline(task&#x3D;“image-to-text”)</td></tr></tbody></table><p>以下是一个简单的文本分类demo,<del>连续进行反转</del>,可以看到它似乎真的可以了解一些语境。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 运行之前需要安装一个库</span><br>!pip install chardet <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;We are very happy to show you the 🤗 Transformers library.&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9997795224189758</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9966359734535217</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck,it it beautiful!&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9991146922111511</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck,it is sucked!&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9997245669364929</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck,it is sucked,but i loved it!&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9997512698173523</span>&#125;]<br></code></pre></td></tr></table></figure><h1 id="Fine-tune"><a href="#Fine-tune" class="headerlink" title="Fine-tune"></a>Fine-tune</h1><p>有三种方法对sota模型进行微调<del>（他们还是很推荐自家的轮子的）</del> </p><ul><li>Fine-tune a pretrained model with 🤗 Transformers <a href="https://huggingface.co/docs/transformers/v4.29.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>.</li><li>Fine-tune a pretrained model in TensorFlow with Keras.</li><li>Fine-tune a pretrained model in native PyTorch</li></ul><p>那么微调之前肯定是需要做数据预处理的了</p><h2 id="Data-Process"><a href="#Data-Process" class="headerlink" title="Data Process"></a>Data Process</h2><p>首先安一个加载数据的库，这玩意应该就类似tf.datasets之类的吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install datasets<br></code></pre></td></tr></table></figure><h3 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h3><p>用于处理文本的一个对象，内置了许多东西。最基础的功能就是把tokens转化为数值，然后再转化为tensor。</p><p> <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer">tokenizer</a> 最主要的作用就是可以吧文本<strong>对应</strong>转化为模型的输入，Transformer基础架构接受的数据是向量组，也就是矩阵，$attention &#x3D; \frac{K^TQ}{\sqrt k}V$，其中的$K,Q,V$都是把输入做了线性变换得到的。这里涉及到一个<strong>词嵌入</strong>的问题。</p><p><strong>词嵌入：字符串很明显是没有矩阵乘法这种东西的，词嵌入就是把NLP领域最细分数据单位词量化为数值类型的方法，通常来说是一个数值向量，现在一些的成熟方案解决了许多问题，例如高维，词之间相似关系，还需要把词嵌入转换为原本的tokens等。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 能够将词转化为bert标准的tokenizer</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)<br><span class="hljs-comment"># 模型存储在~/.cache/huggingface/下</span><br><span class="hljs-comment"># 多句话的话，传入一个list</span><br>encoded_input = tokenizer(<span class="hljs-string">&quot;Do not meddle in the affairs of wizards, for they are subtle and quick to anger.&quot;</span>)<br><span class="hljs-built_in">print</span>(encoded_input)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input_ids 每个词的字典序</span><br><span class="hljs-comment"># token_type_ids 区分一个 batch 中的两个序列，例如同时输入了问题和回答的序列</span><br><span class="hljs-comment"># attention_mask 处理数据集时需要对句子进行填充，1代表是非填充部分</span><br>&#123;<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">2079</span>, <span class="hljs-number">2025</span>, <span class="hljs-number">19960</span>, <span class="hljs-number">10362</span>, <span class="hljs-number">1999</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">3821</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">16657</span>, <span class="hljs-number">1010</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2027</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">11259</span>, <span class="hljs-number">1998</span>, <span class="hljs-number">4248</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">4963</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>], <br> <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <br> <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据索引还原为原本的句子，可以看到tokenizer添加了两个特殊字符</span><br><span class="hljs-comment"># [CLS] 分词器 [SEP] 分割符</span><br>tokenizer.decode(encoded_input[<span class="hljs-string">&quot;input_ids&quot;</span>])<br>&gt;&gt;&gt;<span class="hljs-string">&#x27;[CLS] Do not meddle in the affairs of wizards, for they are subtle and quick to anger. [SEP]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对句子进行padding,按照最长长度进行填充</span><br>batch_sentences = [<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,<br><span class="hljs-meta">... </span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对句子进行切割，使得适应模型可以容纳的最大长度</span><br>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># padding和turncation更为详细的用法</span><br></code></pre></td></tr></table></figure><p><a href="https://huggingface.co/docs/transformers/pad_truncation">Padding and truncation</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最终版本，转换为Pytorch 的 tensor</span><br>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br><span class="hljs-comment"># 转换为tensorflow 的 tensor</span><br>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Fine-tune-toy"><a href="#Fine-tune-toy" class="headerlink" title="Fine-tune toy"></a>Fine-tune toy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 载入数据集</span><br><span class="hljs-comment"># pip install cchardet</span><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>dataset = load_dataset(<span class="hljs-string">&quot;yelp_review_full&quot;</span>)<br><span class="hljs-comment"># 2.使用AutoTokenizer 对数据进行处理</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_function</span>(<span class="hljs-params">examples</span>):<br>  <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-string">&quot;max_length&quot;</span>, truncation=<span class="hljs-literal">True</span>)<br>tokenized_datasets = dataset.<span class="hljs-built_in">map</span>(tokenize_function, batched=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">## 划分一下数据集</span><br>small_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))<br>small_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;test&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))<br><span class="hljs-comment"># 3.引入分类模型</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification<br>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, num_labels=<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 4.设置超参数</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments<br>training_args = TrainingArguments(output_dir=<span class="hljs-string">&quot;test_trainer&quot;</span>,num_train_epochs=<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 5.定义评估过程</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> evaluate<br>metric = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)<br><span class="hljs-comment">## 把模型输出转化为真正的标签，transformers所有的模型返回的都是logits，未经归一化的实数向量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">eval_pred</span>):<br>    logits, labels = eval_pred<br>    predictions = np.argmax(logits, axis=-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> metric.compute(predictions=predictions, references=labels)<br><span class="hljs-comment"># 6.引入trainer并训练，transformers库提供的训练类，不需要自己编写实例循环</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer<br>trainer = Trainer(<br>    model=model,<br>    args=training_args,<br>    train_dataset=small_train_dataset,<br>    eval_dataset=small_eval_dataset,<br>    compute_metrics=compute_metrics,<br>)<br>trainer.train()<br></code></pre></td></tr></table></figure><p>至此为止我们简单的了解了基于Transformers库进行fine-tune的过程。工具为我们提供了很多的便利的同时，实际上也封装了很多细节，例如Tokenizer其实为我们做了许多的事情，从分词，到映射的保留，到使用何种方法进行词嵌入等。实际上我也很迷惘，作为一个算法工程师，我们要巨细无遗的了解这些吗？那么作为一个后端工程师，我们是否又真的有必要去了解到Java中的Map什么时候触发红黑树这类问题吗？希望未来的我能够好好的想清楚自己想要什么，以及好好的重述自己的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器Mysql安装（apt好坑）</title>
    <link href="/2023/04/22/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%88mysql%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/04/22/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%88mysql%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>Ubuntu</strong>: 18.04</p><p><strong>问题</strong>：直接输入sudo apt install mysql-server安装的mysql5.x的版本</p><p><strong>完全卸载MySQL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get autoremove --purge mysql-server<br>sudo apt-get remove mysql-server<br>sudo apt-get autoremove mysql-server<br>sudo apt-get remove mysql-common<br>dpkg -l |grep ^rc|awk ‘&#123;print $2&#125;’ |sudo xargs dpkg -P<br></code></pre></td></tr></table></figure><p><strong>更新</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure><p><strong>下载</strong></p><p><a href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a></p><p>找到community server，选择好版本点小企鹅<del>逆天真的，找半天</del>下载deb，传输到服务器上</p><p>逆天操作：回车会一直卡，全选ok</p><p><strong>更新</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install mysql-server <br><span class="hljs-meta prompt_"># </span><span class="language-bash">加密方式用传统</span><br></code></pre></td></tr></table></figure><p><strong>其他操作</strong></p><p><strong>放行3306端口</strong> <del>不愧是云耀裸机</del> </p><p><strong>登陆数据库</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use mysql;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host = &quot;%&quot; <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> = &quot;root&quot;;<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SprinBoot极简入门</title>
    <link href="/2023/04/18/Spring%20Boot/"/>
    <url>/2023/04/18/Spring%20Boot/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>阿里云代理</p><ul><li><a href="http://start.aliyun.co/">http://start.aliyun.co</a></li></ul><p>使用File Types来隐藏不需要看的文件 </p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309041458927.png" alt="image-20230414154617578"></p><h2 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h2><p>springboot维护了健壮的依赖版本</p><p>依赖的版本完全由springboot的版本<strong>决定</strong></p><p>在springBoot中的配置文件中添加坐标时，不需要指定版本</p><p><strong>parent定义了坐标管理，而并不是具体的依赖，parent减少了依赖冲突</strong></p><h2 id="starter"><a href="#starter" class="headerlink" title="starter"></a>starter</h2><p>一个stater包含了若干个依赖</p><p>starter会自动导入某个技术所依赖的父依赖</p><p><strong>starter定义了当前项目所使用的所有依赖坐标，减少了依赖配置</strong></p><h2 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h2><p>通过@SpringBootApplicat 修饰，该类运行后初始化spring容器</p><h2 id="内嵌Tomcat"><a href="#内嵌Tomcat" class="headerlink" title="内嵌Tomcat"></a>内嵌Tomcat</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309041458730.png" alt="image-20230414162554827"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309041458007.png" alt="image-20230414162708308"></p><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="修改服务器端口"><a href="#修改服务器端口" class="headerlink" title="修改服务器端口"></a>修改服务器端口</h2><p>在springboot的配置文件properties中直接修改</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309041458727.png" alt="image-20230414164704224"></p><p>SpringBoot 提供了三种配置文件的格式，同时出现时相同属性有加载优先级，独立属性则互相补足。</p><p>​1.application.properties</p><p>​2.<strong>application.yml</strong>（常用）</p><p>​3.application.yaml</p><p>在使用yml以及yaml格式配置文件时可能会出现设置属性时（xxx.port）没有提示的情况，在project structure内的Facets-&gt;Spring-&gt;小绿叶-&gt;加号添加配置文件即可</p><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>扩展名有<strong>yml</strong>以及yaml</p><p><strong>语法规则</strong>(：后空格别忘了)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">country:</span> <span class="hljs-string">beijing</span><br><span class="hljs-attr">city:</span> <span class="hljs-string">haider</span><br><span class="hljs-attr">party:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">user:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">itcast</span><br> <span class="hljs-attr">age:</span> <span class="hljs-number">16</span><br><span class="hljs-attr">likes:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">game</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span><br><span class="hljs-attr">users:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">name:zhangsan</span><br>   <span class="hljs-string">age:18</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">name:lisi</span><br>   <span class="hljs-string">age:10</span><br><span class="hljs-attr">likes:</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-attr">users3:</span> [&#123;<span class="hljs-string">name:zs</span>,<span class="hljs-string">age:18</span>&#125;,&#123;<span class="hljs-string">name:zss</span>,<span class="hljs-string">age:19</span>&#125;]<br></code></pre></td></tr></table></figure><p><strong>读取yaml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">直接使用<span class="hljs-meta">@values</span>注解，创建一个变量读取<br><span class="hljs-meta">@Value(&quot;$&#123;country&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String country;<br>对于多级结构使用<br>user.age来获取<br>对于数组<br>user[<span class="hljs-number">0</span>].age来获取<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309041458598.png" alt="image-20230418093713908"></p><p><strong>yml内变量的引用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">baseDir: c:</span> <span class="hljs-string">\windows</span><br><span class="hljs-string">＃使用$属性多子引用数婿</span><br><span class="hljs-attr">tempDir:</span> <span class="hljs-string">$&#123;baseDir&#125;\temp</span><br></code></pre></td></tr></table></figure><p><strong>yml支持转义字符，使用引号引起来</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tempDir:</span> <span class="hljs-string">&quot;$&#123;baseDir&#125;\temp \t1 \t2 \t3&quot;</span><br></code></pre></td></tr></table></figure><p> <strong>将全部数据封装到一个对象里</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309041458505.png" alt="image-20230418094524724"></p><p><strong>将部分数据封装到一个对象里</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.定义数居模型封装类</span><br><span class="hljs-comment">//2.定义为spring管控的bean</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//3. 指定加载的数塄</span><br><span class="hljs-meta">@ConfigurationProperties</span> (prefix = <span class="hljs-string">&quot;datasource&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvDataSource</span>&#123; <br>  <span class="hljs-keyword">private</span> String driver;<br><span class="hljs-keyword">private</span> String url;<br><span class="hljs-keyword">private</span> String username; <br>  <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><p><strong>junit</strong></p><p>创建MAVEN工程时自动导入，测试类使用@SpringBootTest修饰（自动生成）</p><p><strong>注</strong>：当测试类没有与SpringBoot引导文件在同一个目录时，需要显示给出引导类的字节码文件名</p><p>​        即：@SpringBootTest(classes &#x3D; Springboot04JunitApplication.class)</p><p>​           注：尽管SpringBoot下maven工程test与main两个引导类看起是两个目录，但他们同属一个包</p><p><strong>mybatis</strong></p><p>勾选mysql以及mybatis frame,给出四条连接信息</p><p>在使用高版本boot时，由于mysql8导致的<strong>时区错误</strong>这样解决：ur1: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;<strong>ssm_db?serverTimezone&#x3D;UTC</strong></p><p><strong>整合mybatis-plus</strong></p><p>到mvnrepository获取</p><p><strong>整合druid</strong></p><p>两种方法</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309041458360.png" alt="image-20230418155813504"></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql笔记</title>
    <link href="/2023/03/29/Mysql/"/>
    <url>/2023/03/29/Mysql/</url>
    
    <content type="html"><![CDATA[<p>既然解决了图床问题，那就把笔记搬一搬吧～</p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>MySql是关系型数据库，又多张互相连接的二维表组成的数据库</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131521443.png" alt="image-20230313160826461"></p><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131522225.png" alt="image-20230313161021759"></p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131522918.png" alt="image-20230313161203704"></p><h3 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 展示所有数据库<br><span class="hljs-keyword">SHOW</span> DATABASES;<br># 查询当前数据库<br><span class="hljs-keyword">SELECT</span> DATABASE();<br># 创建数据库<br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> MYDATABSE <span class="hljs-keyword">DEFAULT</span> CHARSET utf8mb4 <span class="hljs-keyword">COLLATE</span> 排序规则;<br># 删除数据库<br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> MYDATABSE;<br># 使用数据库<br>USE MYDATABASE;<br><br># 查询当前数据库所有表<span class="hljs-comment">--需要先进入某个数据库</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br># 查询表结构<br><span class="hljs-keyword">DESC</span> 表名;<br># 查询指定表的建表语句<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br><br>#建表语句<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>name <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;名字&#x27;</span>,<br>age <span class="hljs-type">INT</span> COMMENT ‘年龄’) COMMENT <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>DDL表数据类型</strong></p><p>数值类型，字符串类型，日期时间类型</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131522842.png" alt="image-20230313162833695"></p><p>默认是有符号数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">age TINYINT UNSIGNED<br>score <span class="hljs-keyword">double</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131523670.png" alt="image-20230313163251268"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">--性能高   不足的位置会使用空格补齐</span><br><span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">--性能低，在使用时需要计算长度 存多少占多少空间</span><br><br><span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">--用户名 更适合使用其存储，因为位数是未知的</span><br><span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">--性别 更适合使用其存储，因为位数是固定的</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131523370.png" alt="image-20230313163834904"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">最后一个不太常用<br></code></pre></td></tr></table></figure><p><strong>对表字段进行修改以及修改表名</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131523162.png" alt="image-20230313165414005"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131524384.png" alt="image-20230313165427697"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131524475.png" alt="image-20230313165439807"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131525069.png" alt="image-20230313165516777"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131524102.png" alt="image-20230313165536837"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131524624.png" alt="image-20230313165602784"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131524921.png" alt="image-20230313165651749"></p><h3 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131525632.png" alt="image-20230313170203733"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131525337.png" alt="image-20230313170349992"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131525223.png" alt="image-20230313170439656"></p><h3 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131526982.png" alt="image-20230313170812430"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131526805.png" alt="image-20230313182101046"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131526419.png" alt="image-20230313182302311"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-comment">--不空</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131526055.png" alt="image-20230313182815300"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-literal">null</span>是不会被聚合函数计算的<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131527738.png" alt="image-20230313183603511"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131527385.png" alt="image-20230313183401961"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131527790.png" alt="image-20230313183753038"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131528934.png" alt="image-20230313184130884"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131528673.png" alt="image-20230313184431291"></p><h3 id="DCL语句"><a href="#DCL语句" class="headerlink" title="DCL语句"></a>DCL语句</h3><p>用来管理哪些用户可以访问哪些数据库的权限。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131528653.png" alt="image-20230314132612320"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131528237.png" alt="image-20230314132634430"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131528635.png" alt="image-20230314132946733"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131528466.png" alt="image-20230314133053891"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">需要指定所有数据库的所有表时使用<span class="hljs-strong">*.*</span><br>多个权限使用,分隔<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131529320.png" alt="image-20230314133452136"></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131529111.png" alt="image-20230314133834871"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131529239.png" alt="image-20230314134027636"></p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131529001.png" alt="image-20230314134222466"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131529855.png" alt="image-20230314134424145"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131529115.png" alt="image-20230314134554989"></p><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131531885.png" alt="image-20230314134800556"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131531438.png" alt="image-20230314135000775"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131531980.png" alt="image-20230314135130951"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131531734.png" alt="image-20230314152119360"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131532200.png" alt="image-20230314152250885"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131533132.png" alt="image-20230314152326651"></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131534131.png" alt="image-20230314152907470"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131534296.png" alt="image-20230314153149516"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131534617.png" alt="image-20230314153448986"></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131534093.png" alt="image-20230314153903452"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131534509.png" alt="image-20230314154012864"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131535059.png" alt="image-20230314154211394"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131535702.png" alt="image-20230314154338690"></p><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131535225.png" alt="image-20230314154612572"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131535729.png" alt="image-20230314154838956"></p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131535244.png" alt="image-20230314154951114"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131536905.png" alt="image-20230314155100394"></p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131536624.png" alt="image-20230314155206451"></p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131536073.png" alt="image-20230315124336169"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131536004.png" alt="image-20230315124554907"></p><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131537528.png" alt="image-20230315124920355"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131537754.png" alt="image-20230315124644081"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">去掉<span class="hljs-keyword">all</span>关键字可以实现去重<br>要求两个查询的字段列表一致<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131537842.png" alt="image-20230315125057468"></p><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131537673.png" alt="image-20230315125349350"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309241112131.png" alt="image-20230315125418893"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202309241112958.png" alt="image-20230315125426094"></p><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131538505.png" alt="image-20230315130443380"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131538454.png" alt="image-20230315130549346"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131538770.png" alt="image-20230315130641950"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131538536.png" alt="image-20230315130758476"></p><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131538894.png" alt="image-20230315130848904"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131539386.png" alt="image-20230315130957824"></p><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131539572.png" alt="image-20230315131037508"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131539109.png" alt="image-20230315131901050"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131539408.png" alt="image-20230315131931799"></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131539934.png" alt="image-20230315132302069"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131540105.png" alt="image-20230315132442715"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131540919.png" alt="image-20230315132656710"></p><h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131540405.png" alt="image-20230315132909165"></p><h4 id="并发事务引发的问题"><a href="#并发事务引发的问题" class="headerlink" title="并发事务引发的问题"></a>并发事务引发的问题</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131540909.png" alt="image-20230315132950947"></p><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131540410.png" alt="image-20230315133738335"></p><h2 id="MYSQL-存储引擎"><a href="#MYSQL-存储引擎" class="headerlink" title="MYSQL 存储引擎"></a>MYSQL 存储引擎</h2><p>mysql的体系结构分为：</p><ul><li>连接层（用户权限校验，最大链接数的）</li><li>服务层（DML，DDL语句，查询优化器）</li><li>引擎层（5以后的版本InnoDB为默认版本，<strong>索引</strong>在该层实现）</li><li>存储层（实际的存储）</li></ul><p>存储引擎是存储数据，建立索引，更新&#x2F;查询数据技术的实现方式，存储引擎基于表而不是库，也可以称为表类型。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131541524.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131541588.png" alt="img"></p><h3 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h3><p>兼顾高性能和高可靠性，支持事务，行级锁，外健。每一张使用InnDOB引擎存储的表都对应一个xxx.ibd文件。每个文件存储了表的结构，数据，和索引。</p><p>InnoDB的存储结构为表空间–段–页（一条一条数据）–行</p><h3 id="MYISAM引擎"><a href="#MYISAM引擎" class="headerlink" title="MYISAM引擎"></a>MYISAM引擎</h3><p>MySql早期默认引擎，不支持事务，外健；支持行锁不支持列锁，访问速度快。</p><h3 id="Memory存储引擎"><a href="#Memory存储引擎" class="headerlink" title="Memory存储引擎"></a>Memory存储引擎</h3><p>访问速度快，支持哈希索引，但受断电影响。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131541224.png" alt="img"></p><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>选InnoDB，MEMORY存储引擎的场景使用Redis可以很好的替代；MyISAM存储引擎的使用场景一般被芒果DB来替代。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>优点：提高查找速度，降低IO，提高排序效率</p><p>缺点：空间，降低增删改的效率</p><h3 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h3><p>MySql的索引在存储引擎层实现，不同的存储引擎有不同的结构。常见的是B+树，哈希索引，R-tree空间索引（地理空间数据），Full-text（全文索引，和ES一个性质）</p><h3 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h3><p>B树的引入，红黑树在面对数据量较大时仍然存在树的深度较深的情况，因此引入了B树。B树一个节点允许存在多个子节点。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131541759.png" alt="img"></p><p>B+树是在B树的基础之上，做了两点改进</p><ul><li>所有元素都出现在叶子节点</li><li>叶子节点通过一条链表连接</li></ul><p>mysql在B+树之上又多维护了一个指针，指向相邻叶子节点</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131542038.png" alt="img"></p><h3 id="hash索引"><a href="#hash索引" class="headerlink" title="hash索引"></a>hash索引</h3><p>查询效率高，但是不支持范围查询，也没法利用索引进行排序。</p><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p>有四种常见的索引</p><ul><li>主键索引：自动创建，一张表只能有一个，primary关键字指定</li><li>唯一索引：使用unique关键字创建</li><li>常规索引：可以有多个</li><li>全文索引：查找文本中的关键词，而不是比较索引中的值，可以有多个，fulltext</li></ul><p>在Innodb中索引又分为两种不同的类型，分别是聚集索引以及二级索引</p><ul><li>聚集索引：必须有，默认主健，没有主键就默认使用unqiue修饰的键，也没有就默认为行号。</li><li>二级索引：可以有可以没有</li></ul><p>聚集索引的叶子节点挂了完整的一行数据，二级索引的节点则挂了作为二级索引的键值</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131542173.png" alt="img"></p><h3 id="索引的操作语法"><a href="#索引的操作语法" class="headerlink" title="索引的操作语法"></a>索引的操作语法</h3><ul><li>索引的创建语法</li></ul><p>create [unique,fulltext] index on table(col_name1,col_name2…);</p><ul><li>索引的查看</li></ul><p>show index from table;</p><ul><li>索引的删除</li></ul><p>​      drop index ind1 on table;</p><h3 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h3><ul><li>SQL执行频率 查看增删改查在该数据库的频率</li></ul><p>show global status like “Com_______”;</p><p>​      如果发现查询请求占大部分，则需要考虑做SQL优化；</p><ul><li>开启慢查询日志(重启失效)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//慢查询是否开启</span><br>show variables like <span class="hljs-string">&quot;slow_query_log&quot;</span>;<br><span class="hljs-comment">//多长的查询时间会记录为慢查询</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;long_query_time&#x27;</span>;<br><span class="hljs-comment">//修改该查询时间</span><br>SET GLOBAL long_query_time = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//输出日志目录</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;slow_query_log_file&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>profile  查看SQL时间都耗费到哪里了(重启失效)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//是否支持profile</span><br>select @@have_profiling;<br><span class="hljs-comment">//是否开启profile</span><br>select @@profiling;<br><span class="hljs-comment">//开启</span><br>set profiling = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//查看当前回话所有sql时间</span><br>show profiles;<br><span class="hljs-comment">//查询某条查询记录详细时间消耗</span><br>show profile <span class="hljs-keyword">for</span> query <span class="hljs-number">6</span>;<br><span class="hljs-comment">//查询某条记录cpu详细时间消耗</span><br>show profile cpu <span class="hljs-keyword">for</span> query <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><ul><li>explain查询sql语句的执行计划</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">explain + 具体的sql语句;<br></code></pre></td></tr></table></figure><p>id:值越大越先执行，值相同从上到下。</p><p>type:表示连接类型，性能从好到差排序为(NULL,ystem,const，eq_ref,ref,range,index,all)</p><p>possible_key:这张表可能用的索引</p><p>key:实际使用的索引</p><p>rows:mysql认为必须要执行查询的行数，是一个估计值</p><p>filtered:表示返回结果的行数占需读取行数的百分比，越大越好</p><h3 id="索引使用原则"><a href="#索引使用原则" class="headerlink" title="索引使用原则"></a>索引使用原则</h3><ul><li>最左前缀法则：在索引了多列的情况下（联合索引），如果希望索引生效，则联合索引最左边的字段必须存在；如果某个索引字段被跳过，则后边的部分失效。</li><li>范围查询：在联合索引的条件下，如果出现了&lt; or &gt; 的范围索引，则排在该字段后边的索引失效；可以使用&gt;&#x3D; ,&lt;&#x3D;规避</li><li>索引列运算：对索引列运算（例如使用substring查询手机号码结尾为15的用户）会导致索引失效</li><li>查询字符串不加’’会导致索引失效</li><li>模糊查询时，如果对字段尾进行模糊匹配索引不会失效，如果对头部进行了模糊匹配，索引会失效</li><li>or连接时，如果条件列有任意一方没有索引的话，则索引失效</li><li>数据分布影响：如果mysql判断走索引更慢，则不会走索引（例如查询全表）</li><li>查询时尽量使用覆盖索引（查询使用了索引，且返回的列都在索引中)</li><li>对于使用varchar或者text类型的字段使用前缀索引 create index idx_name on stduent(name(n));</li><li>创建联合索引时要考虑创建顺序，使用频率高的应该在最左边；联合索引的key存储了所有的字段</li></ul><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131542722.png" alt="img"></p><h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><p>建议&#x2F;强制 优化器使用什么样的索引</p><ul><li>use index()</li><li>ignore index()</li><li>force index()</li></ul><p>select * from student use index(_idx) where xx;</p><p>前两种形式MYSQL优化器有可能选择不执行</p><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><h4 id="INSERT-优化"><a href="#INSERT-优化" class="headerlink" title="INSERT 优化"></a>INSERT 优化</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131542704.png" alt="img"></p><p>一次性加载100万数据</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131542170.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131543486.png" alt="img"></p><h4 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h4><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131545924.png" alt="img"></p><p>1.在满足业务需求的情况下，尽量降低主键长度（二级索引会存储主键）</p><p>2.插入数据时尽量顺序插入（避免页分裂情况）</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131544553.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131544106.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131544850.png" alt="img"> </p><p>3.主键尽量选择自增主键  ，业务尽量避免对主键的修改</p><h4 id="ORDER-BY优化"><a href="#ORDER-BY优化" class="headerlink" title="ORDER BY优化"></a>ORDER BY优化</h4><p>OEDER BY有两种情况，一种是扫描出所有的需要的数据，然后在缓冲区排序；另一种直接通过索引顺序返回。</p><ul><li>尽量使用覆盖索引</li></ul><h4 id="GROUP-BY优化"><a href="#GROUP-BY优化" class="headerlink" title="GROUP BY优化"></a>GROUP BY优化</h4><p>使用索引</p><h4 id="Limit-分页查询优化"><a href="#Limit-分页查询优化" class="headerlink" title="Limit 分页查询优化"></a>Limit 分页查询优化</h4><p>随着起始页的增大，分页查询会越来越慢</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131544658.png" alt="img"></p><h4 id="COUNT优化"><a href="#COUNT优化" class="headerlink" title="COUNT优化"></a>COUNT优化</h4><p>COUNT就是很耗时，如果实在要优化的话结合redis进行优化。</p><h4 id="UPDATA优化"><a href="#UPDATA优化" class="headerlink" title="UPDATA优化"></a>UPDATA优化</h4><p>更新数据时更新的条件一定要有索引，如果更新的字段没有加索引的话，则会将整个表锁住，在事务提交以前其他对该表的索引都将被阻塞。</p><h3 id="MYSQL锁"><a href="#MYSQL锁" class="headerlink" title="MYSQL锁"></a>MYSQL锁</h3><p>mysql有三种锁</p><ul><li>行锁</li><li>表锁</li><li>全局锁</li></ul><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>加完锁之后整个数据库处于只读状态，DML，DDL语句，事务全部都会被阻塞。例如备份整个数据库。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131544989.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131544653.png" alt="img"></p><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><ul><li>表锁</li></ul><p>又分为表读锁以及表写锁；</p><p>表写锁会允许当前客户端对表进行读和写，并阻塞其他客户端对表的读和写</p><p>表读锁回允许当前客户端对表进行读，但是不允许写，并阻塞其他客户端的写</p><p>表锁的语法</p><p>lock table user read&#x2F;write</p><p>unlock table</p><ul><li>元数据锁</li></ul><p>元数据就是指的表结构；当表上存在活动的事务时会自动对表加上共享读&#x2F;写锁，两者任一都会阻塞alter语句；直到事务提交完毕后，锁会自动释放。</p><ul><li>意向锁</li></ul><p>假如某张表的行已经存在了锁，这时候如果另一个客户端要加表锁，需要对每一行的数据判断是否存在锁，是否可以上表锁，这<strong>很浪费时间</strong>；在执行select（lock in shard model），insert，update，delete语句时会自动对表加上共享锁；直接通过意向锁来判断是否可以加表锁；</p><p>意向锁分为两种，意向共享锁（select），意向拍他锁；</p><ul><li>意向共享锁：与表读锁兼容，与表写锁互斥；</li><li>意向排它锁：与表读锁，写锁都互斥；</li></ul><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>MYSQL支持四种隔离级别：</p><p>MySQL支持四种隔离级别，分别是：</p><ol><li>读未提交（Read Uncommitted）：最低的隔离级别，允许一个事务读取另一个事务未提交的数据。这种隔离级别可能会导致脏读（Dirty Read）和不可重复读（Non-repeatable Read）问题。</li><li>读已提交（Read Committed）：允许一个事务只能读取另一个事务已提交的数据。这种隔离级别可以避免脏读，但仍然可能出现不可重复读和幻读（Phantom Read）问题。</li><li>可重复读（Repeatable Read）：保证在同一个事务中多次读取同一数据时，结果始终一致。在这个级别下，MySQL使用锁来避免不可重复读和幻读问题。</li><li>串行化（Serializable）：最高的隔离级别，通过强制事务串行执行来避免并发问题。在这个级别下，MySQL会对所有读取的数据进行加锁，避免任何并发问题。</li></ol><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131543787.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131543956.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131543885.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131543070.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件测试笔记</title>
    <link href="/2023/03/29/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/03/29/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><h2 id="测试标准"><a href="#测试标准" class="headerlink" title="测试标准"></a>测试标准</h2><p><strong>国际标准 IOS25010</strong> </p><p><strong>国内标准</strong> GBT20438 <strong>GBT18905</strong></p><p>两个主要标准</p><h2 id="测试基本要求"><a href="#测试基本要求" class="headerlink" title="测试基本要求"></a>测试基本要求</h2><p>1.外观界面测试（风格，错位，界面效果等）</p><p>2.易用性测试（是否符合正常用户的需求）</p><p>3.兼容性测试（例如网站在各种浏览器的兼容性，ios不同的版本，win10，win10…  ，安卓版本等）</p><p>4.安全性测试（防止用户介入的部分，或者是正常的部分）</p><p>5.性能测试（）</p><p>6.功能测试（功能是否正常运行）</p><h2 id="bug来源"><a href="#bug来源" class="headerlink" title="bug来源"></a>bug来源</h2><p>虫子。。。</p><h1 id="测试与开发模型"><a href="#测试与开发模型" class="headerlink" title="测试与开发模型"></a>测试与开发模型</h1><h2 id="测试的工作流程"><a href="#测试的工作流程" class="headerlink" title="测试的工作流程"></a>测试的工作流程</h2><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1 .需求分析"></a>1 .需求分析</h3><p>阅读需求文档\产品文档\产品详细设计说明书, 分析需求的点（也是需要测试的点），参与需求评审（是否满足正常的需要），快速熟悉项目。</p><h3 id="2-制定测试计划和测试方案"><a href="#2-制定测试计划和测试方案" class="headerlink" title="2.制定测试计划和测试方案"></a>2.制定测试计划和测试方案</h3><p>测试计划：测试整个项目的总体规划，如测试的范围，进度的安排，人力物力的安排，整体的测试策略，风险评估于规避</p><p>测试方案：被测试的目标，选取什么测试工具（工具环境），测试的方法，测试的重点（2 8 原则，少数功能被用户使用）。</p><h3 id="3-测试用例设计"><a href="#3-测试用例设计" class="headerlink" title="3.测试用例设计"></a>3.测试用例设计</h3><p>（）</p><h3 id="4-测试用例执行"><a href="#4-测试用例执行" class="headerlink" title="4.测试用例执行"></a>4.测试用例执行</h3><p>执行测试用例</p><h3 id="5-评估阶段-测试报告"><a href="#5-评估阶段-测试报告" class="headerlink" title="5.评估阶段  测试报告"></a>5.评估阶段  测试报告</h3><p>3 4反复运行后，写出测试报告</p><h1 id="开发模型"><a href="#开发模型" class="headerlink" title="开发模型"></a>开发模型</h1><h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131629899.png" alt="image-20221014150847695"></p><p>1.阶段之间必须按顺序来</p><p>2.推迟实现</p><p>3.每一个阶段完成都可进行质量检查</p><p>总结：瀑布模型是文档驱动的模型（每个阶段完成都有文档以及检查），按照既定的规则约束在实现上比较简单，在成本上显著降低。</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>每个阶段都有检查点，当前阶段完成不需要考虑前一个阶段。</p><p>可在迭代模型应用瀑布模型（迭代模型见后）</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p> 不符合需求模糊且经常变动的系统</p><p>由于需要较长的交付时间，可能会对用户的新人造成影响</p><p>灵活度比较低</p><h2 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131630481.png" alt="image-20221014152425744"></p><p>每次只开发一个小功能，每个功能阶段顺序。避免了瀑布模型的缺点。</p><h2 id="快速原型"><a href="#快速原型" class="headerlink" title="快速原型"></a>快速原型</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131630020.png" alt="image-20221014152808936"></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>克服瀑布模型的缺点，减少由于软件需求不明确带来的开发风险，适合不能确切定义需求的软件系统的开发。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>产品质量低</p><h2 id="其他模型"><a href="#其他模型" class="headerlink" title="其他模型"></a>其他模型</h2><h3 id="螺旋开发模型"><a href="#螺旋开发模型" class="headerlink" title="螺旋开发模型"></a>螺旋开发模型</h3><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131630523.png" alt="image-20221014153142105"></p><h3 id="迭代开发模型"><a href="#迭代开发模型" class="headerlink" title="迭代开发模型"></a>迭代开发模型</h3><h3 id="敏捷开发模型"><a href="#敏捷开发模型" class="headerlink" title="敏捷开发模型"></a>敏捷开发模型</h3><p>简单设计，快速设计</p><h1 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h1><h2 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131630023.png" alt="image-20221014153541831"></p><h3 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h3><p>测试介入的较晚，从编码阶段才开始介入，使得一些前期的缺陷无法发现和修改，测试与开发串行，总用时较长。</p><h2 id="W模型（双V模型）"><a href="#W模型（双V模型）" class="headerlink" title="W模型（双V模型）"></a>W模型（双V模型）</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131630716.png" alt="image-20221014153910302"></p><p>从开发最开始，软件测试便介入其中。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>测试伴随软件整个生命周期</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>对需求和测试技术要求高 适用于大型中型企业</p><h1 id="软件测试的分类"><a href="#软件测试的分类" class="headerlink" title="软件测试的分类"></a>软件测试的分类</h1><h2 id="按照测试（开发）的阶段"><a href="#按照测试（开发）的阶段" class="headerlink" title="按照测试（开发）的阶段"></a>按照测试（开发）的阶段</h2><p>​<strong>单元测试</strong>：编码完成后，主要测试模块，类，函数，方法（开发人员和白盒测试人员参与）</p><p>​<strong>集成测试</strong>：在单元测试完成后，主要测试模块和模块之间的内容（开发人员和白盒测试人员参与）</p><p>​<strong>系统测试</strong>：集成测试之后，测试整个程序，软件，app，系统，网站（开发人员，白盒黑盒测试人员）</p><p>​<strong>验收（交付测试）</strong>：系统测试之后，测试整个项目（部分用户，以及测试人员测试）</p><p>分为α测试（小规模人员内测）以及β测试（大规模公测）</p><h2 id="是否覆盖源码"><a href="#是否覆盖源码" class="headerlink" title="是否覆盖源码"></a>是否覆盖源码</h2><p>​<strong>黑盒测试</strong>：不覆盖，</p><p>​功能测试（UI测试【界面测试】，业务测试【狭义的功能测试】，文档测试【文档对不对，逻辑清晰，错别字】，易用性测试【是不是满足用户的正常的思维逻辑】，安装和卸载测试，兼容性测试【浏览器测试，平台测试，本身的兼容性{老版本是否能正常兼容新版本内容}，数据兼容性{不同平台数据是否兼容}】）</p><p>​性能测试（一般性能测试【响应速度，对资源的利用{CPU占用率，GPU使用率，内存占有率}】，稳定性测试【服务器稳定性，程序稳定性】，负载测试{例如高并发的负载}，压力测试{例如多少的高并发不会使得程序崩溃} ）</p><p><strong>白盒测试</strong>：覆盖</p><p>   语句覆盖：每个语句都会被执行一次</p><p>   判断覆盖：确保每个判断条件都会执行一次</p><p>   条件覆盖：每个条件都会执行一次</p><p>   路径覆盖：代码每个分支都会走到</p><p><strong>灰盒测试</strong>：</p><p>​除了关心输入输出之外，考虑程序运行的状态</p><h2 id="是否运行"><a href="#是否运行" class="headerlink" title="是否运行"></a>是否运行</h2><p>​<strong>静态测试</strong>：测试程序结构，逻辑，过程，接口是否正常，代码的风格是否符合</p><p>​<strong>动态测试：</strong></p><h2 id="是否自动化"><a href="#是否自动化" class="headerlink" title="是否自动化"></a>是否自动化</h2><p>​<strong>手工测试：</strong>点点点</p><p>​<strong>自动化测试：</strong></p><h2 id="按照地域测试"><a href="#按照地域测试" class="headerlink" title="按照地域测试"></a>按照地域测试</h2><p>​<strong>本地化测试</strong>：</p><p>​<strong>国际化测试</strong>：</p><h2 id="其他测试分类"><a href="#其他测试分类" class="headerlink" title="其他测试分类"></a>其他测试分类</h2><p>​<strong>回归测试</strong>：打回去，拿过来，再测试</p><p>​<strong>冒烟测试</strong>（硬件测试词语）：基本功能，基本的模块是否能正常运行</p><p>​<strong>随机测试</strong>：monkey测试，乱jb点，看看程序有没有问题</p><p>​    <strong>探索测试</strong>：</p><h1 id="测试用例的设计"><a href="#测试用例的设计" class="headerlink" title="测试用例的设计"></a>测试用例的设计</h1><h2 id="测试用例定义"><a href="#测试用例定义" class="headerlink" title="测试用例定义"></a>测试用例定义</h2><p>测试用例又叫test case，由测试输入，执行条件，以及预期结果组成，以便测试某个程序路径或核实是否满足某个特定需求。为了确保这个功能，模块，函数返回一个合法的结果。</p><h2 id="测试用例的特性"><a href="#测试用例的特性" class="headerlink" title="测试用例的特性"></a>测试用例的特性</h2><p><strong>有效性：</strong>能够被使用，且不同人员测试结果应该是一致的</p><p><strong>可复用性</strong>：良好的测试用例具有可重复使用的功能，如回归测试</p><p> <strong>易组织性</strong>：好的测试用例会分门别类地提供给测试人员参考和使用</p><p><strong>可评估性</strong>：从测试管理的角度，测试用例地通过率和软件缺陷数目的数量是软件产品质量好坏的测试标准。</p><h2 id="测试用例的要素"><a href="#测试用例的要素" class="headerlink" title="测试用例的要素"></a>测试用例的要素</h2><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131630415.png" alt="image-20221017162718401"></p><p><strong>测试用例编号：</strong>不可重复，方便后续查找该用例，由<strong>字符</strong>和<strong>数字</strong>组成的<strong>字符串</strong></p><p><strong>测试项目：</strong>属于哪个项目，哪个需求，哪个模块，哪个单元等</p><p><strong>条件：</strong>执行用例所需的条件 ？</p><p><strong>测试输入</strong>：来源有手工，数据库等。</p><p><strong>预期输出</strong>：包括预期输出结果，返回值内容，界面响应结果等。</p><p><strong>操作步骤</strong>：<strong>必须十分详细</strong>，测试人员可以根据该步骤完成测试用例的执行</p><p><strong>测试用例标题</strong>：不可重复，对测试用例简单描述。</p><p><strong>级别</strong>：高级别（核心业务，重要特性，使用频率高），中级别，低级别（非核心，不太重要，使用频率低）</p><p><strong>其他建议添加要素：</strong>用例的设计者，用例设计日期，对应开发人员，测试结果，测试类型（功能，性能，压力等）</p><h2 id="测试用例设计原则"><a href="#测试用例设计原则" class="headerlink" title="测试用例设计原则"></a>测试用例设计原则</h2><p>**明确性:**测试用例的测试结果是唯一的，不可使用含糊用词</p><p><strong>代表性</strong>：功能相似的用例进行合并</p><p><strong>间接性</strong>：使用陈述性语句，一句话直指问题核心，不要用浮夸的修辞手法。</p><h2 id="测试用例的设计原则"><a href="#测试用例的设计原则" class="headerlink" title="测试用例的设计原则"></a>测试用例的设计原则</h2><h3 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h3><p>把所有可能输入的数据划分成若干部分，每一部分选取有代表性的数据作为测试用例。</p><p><strong>过程为1.划分等价类</strong>（列出等价类表）2.<strong>选取测试用例</strong>。</p><p>等价类划分法把不能穷举的测试合理分类，保证设计出的测试用例具有<strong>完整性</strong>和<strong>代表性</strong>。</p><p>等价类划分为有效等价类和无效等价类，前者用于保证程序的基本功能完整，后者使得程序对于输入健壮。</p><p>等价类划分法案例：QQ登录</p><p>条件划分：qq号为6-10位 </p><p>qq号码只接受整数，不能以0开头。</p><p>有效等价类： 【6，7，8，9，10】位数字（不以0开头）</p><p>无效等级类：【特殊符号，大写字母，小写字母，字符，以及组合】 </p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131630399.png" alt="image-20221021164346807"></p><h3 id="边界值法（于等价类划分法密切相关）"><a href="#边界值法（于等价类划分法密切相关）" class="headerlink" title="边界值法（于等价类划分法密切相关）"></a>边界值法（于等价类划分法密切相关）</h3><p>测试输入取边界以及边界加减1</p><h3 id="因果图法"><a href="#因果图法" class="headerlink" title="因果图法"></a>因果图法</h3><p>适合于检查程序<strong>输入条件各种组合</strong>的情况</p><p>例如充值系统，不同面值的组合输入，对应不同结果的输出。</p><p>等价类划分法和边界值法着重考虑输入条件，但没有考虑输入条件的各种组合情况，由于我们不可能考虑所有输入条件的组合($2^n-1$), 所以需要用到<strong>因果图模型（逻辑模型）</strong></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131631352.png" alt="image-20221121185053006"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131631750.png" alt="image-20221121185221311"></p><p><strong>因果图案例</strong></p><p>1.找出所有原因，找出所有结果。</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131631999.png" alt="image-20221201160040404"></p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131631115.png" alt="image-20221201160455925"></p><p>输入条件：【50元，100元，选择充值50元，选择充值100元】</p><p>输出条件（结果）：【完成充值后退卡，提示充值成功，提示错误，找零】</p><p>2.明确所有输入条件，输出条件之间的制约关系（哪些条件可以组合在一起，哪些条件不可以组合在一起）{是否可以同时出现或者不可同时出现需要结合系统需求来实现}</p><p>输入不可组合【（1，2），（3，4）】</p><p>输入可组合【（1，3），（1，4），（2，3），（2，4）】</p><p>单独条件【1，2，3，4】</p><p>输出不可组合【（1，3），（1，4）】</p><p>输出可组合【（1，2），，（2，3），（2，4），（3，4）】</p><p>单独条件【3，4】</p><p>3.根据制约关系绘图</p><p>xxxxxx</p><p>4.制作判定表</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131631366.png" alt="image-20221201163735428"></p><p>5.编写测试用例</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131631965.png" alt="image-20221201163943896"></p><h3 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h3><p>与因果图类似，把复杂问题按照各种可能情况一一列举出来，简明而已于理解，避免遗漏。</p><p>案例：</p><p><img src="https://raw.githubusercontent.com/ShuaiZhang1998/figure/main/figure/202307131631183.png" alt="image-20230125105126583"></p><h3 id="正交表法"><a href="#正交表法" class="headerlink" title="正交表法"></a>正交表法</h3><p>用最少的测试过程获得最大的测试覆盖率。</p><p>当选项过多时，因为组合数的复杂度为幂次方，不可能在有限的时间和空间内获取到所有组合情况。因此采用正交表法。</p><p>正交实验：实际上就是一种随机采样策略，存在一些工具可以方便生成正交实验表。</p><h3 id="场景法"><a href="#场景法" class="headerlink" title="场景法"></a>场景法</h3><p>从起点开始，通过一系列操作步骤（事件）达成某一结果，到终点的过程测试。场景法主要用于<strong>“冒烟测试”</strong>（基本功能是否完善）。</p><p>通过场景测试后，再通过其他方法进行更为细腻的测试。</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灌水思路</title>
    <link href="/2023/03/13/idea/"/>
    <url>/2023/03/13/idea/</url>
    
    <content type="html"><![CDATA[<p>$y &#x3D; ||UV-X||^*$</p><p>$s.t. X_\omega&#x3D;A_\omega$</p><p>使用两个低秩矩阵UV逼近满足使得满足约束条件具备最低秩的X矩阵</p><p>其实有两个算法</p><p>(1)</p><p>$min_x\ ||X||^*$</p><p>$s.t. X_\omega&#x3D;A_\omega$</p><p>(2)</p><p>$min_{u,v}||A-U^TV||_F$</p><p>为什么当时说不好</p><p>（1）单独的两个都凸，放一起非凸</p><p>（2）算法(1)的精度比（2）高不少，放在一起有点以次充好的感觉</p><p>上边的讨论没有考虑实际的测序数据存在的一些问题，因此在多种评估指标以及多种数据的背景下，我的实验中，（1）（2）谁好有一定的规律，（1）值准确，（2）聚类效果好。</p><p>两种算法都为经典的矩阵补全算法，某些约束都收敛到最优解$X_*$。然而我直观的感受来说，在数据未知的情况下，似乎有个挺均衡的的解介于两个算法的解之间。</p><p>$y &#x3D; ||X||_*+||U^TV-A||_F$</p><p>$s.t. X_{\Omega}&#x3D;A_{\Omega}$</p><p>这个问题形式也没啥用，各自求各自的，目标是希望两个解产生一定交互。然而我不太可能严谨的提出某种度量距离满足我直观的感觉。所以我给出如下的感觉式子</p><p>$y &#x3D; \alpha_1||X||_*+\alpha_2||U^TV-A||_F+dis(X,U^TV)$</p><p>测试下图片</p><p><img src="/../img/DALL.png" alt="DALL"></p><p>真的鶸智啊…时好时坏的，以后抽时间搞个图床算了…</p><p><img src="https://s.yimg.com/os/creatr-uploaded-images/2022-12/0e33a550-85f9-11ed-bb6f-a3c383de69f0" alt="YAYA"></p>]]></content>
    
    
    
    <tags>
      
      <tag>灌水</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT记录</title>
    <link href="/2023/03/01/PAT/"/>
    <url>/2023/03/01/PAT/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串1001"><a href="#字符串1001" class="headerlink" title="字符串1001"></a>字符串1001</h1><p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format – that is, the digits must be separated  into groups of three by commas  unless there are less than four digits).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a pair of integers <em>a</em> and <em>b</em> where $10^{-6}&lt;&#x3D;a,b&lt;&#x3D;10^{6}$ . The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you should output the sum of <em>a</em> and <em>b</em> in one line. The sum must be written in the standard format.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">-1000000 9<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">-999,991<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a,b,c;<br>cin&gt;&gt;a&gt;&gt;b;<br>c = a+b;<br>string num = <span class="hljs-built_in">to_string</span>(c);<br>string res;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=num.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,j=<span class="hljs-number">0</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-comment">//num是倒着枚举的，而结果方向与枚举方向相反，在一个空串上不断从左边添加</span><br><span class="hljs-comment">//       1 2 3 4【】 </span><br>res = num[i]+res;<br>++j;<br><span class="hljs-comment">//满足三个条件加逗号，已经有了三个数字，正数时不能是最后一位，负数时前一位不能为‘-’。</span><br><span class="hljs-keyword">if</span>(j%<span class="hljs-number">3</span>==<span class="hljs-number">0</span> &amp;&amp; i &amp;&amp; num[i<span class="hljs-number">-1</span>]!=<span class="hljs-string">&#x27;-&#x27;</span> )<br>res = <span class="hljs-string">&#x27;,&#x27;</span>+res;<br>&#125;<br>cout&lt;&lt;res;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1.</span>to_string() 将一个数字转化为字符串<br><span class="hljs-number">2.</span>字符串的拼接 ‘’+<span class="hljs-built_in">str</span> 向左不断拼接 <span class="hljs-built_in">str</span>+‘’ 向右不断拼接<br><span class="hljs-number">3.</span>正数范围一般比负数小 设计长度的判断可以先判断正数再判断负数<br></code></pre></td></tr></table></figure><h1 id="字符串1005"><a href="#字符串1005" class="headerlink" title="字符串1005"></a>字符串1005</h1><p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p><h3 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤10100).</p><h3 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">12345<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">one five<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>string n ;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:n)&#123;<br>s+=i-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>string str = <span class="hljs-built_in">to_string</span>(s);<br><span class="hljs-type">char</span> res[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>]=&#123;<span class="hljs-string">&quot;zero&quot;</span>,<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>,<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;five&quot;</span>,<span class="hljs-string">&quot;six&quot;</span>,<span class="hljs-string">&quot;seven&quot;</span>,<span class="hljs-string">&quot;eight&quot;</span>,<span class="hljs-string">&quot;nine&quot;</span>&#125;;<br>cout&lt;&lt;res[str[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i++)<br>cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;res[str[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span><span class="hljs-keyword">auto</span> 语法<br><span class="hljs-number">2.</span>处理多余空格时，先输出一个 <br><span class="hljs-number">3.</span>答案比较多时使用<span class="hljs-type">char</span>数组存放结果<br></code></pre></td></tr></table></figure><h1 id="字符串1006"><a href="#字符串1006" class="headerlink" title="字符串1006"></a>字符串1006</h1><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><h3 id="Input-Specification-2"><a href="#Input-Specification-2" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">ID<span class="hljs-number">_n</span>umber Sign<span class="hljs-number">_</span><span class="hljs-keyword">in</span><span class="hljs-number">_</span>time Sign<span class="hljs-number">_</span><span class="hljs-keyword">out</span><span class="hljs-number">_</span>time<br></code></pre></td></tr></table></figure><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><h3 id="Output-Specification-2"><a href="#Output-Specification-2" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs in">3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">SC3021234 CS301133<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    string id,<span class="hljs-type">in_t</span>,<span class="hljs-type">out_t</span>;<br>    string fast_id,fast_time;<br>    string last_id,last_time;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;id&gt;&gt;<span class="hljs-type">in_t</span>&gt;&gt;<span class="hljs-type">out_t</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||<span class="hljs-type">in_t</span>&lt;fast_time)&#123;<br>            fast_id = id;<br>            fast_time = <span class="hljs-type">in_t</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||<span class="hljs-type">out_t</span>&gt;last_time)&#123;<br>            last_id = id;<br>            last_time = <span class="hljs-type">out_t</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;fast_id&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;last_id&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>边读边处理<br><span class="hljs-number">2.</span>当位数相同时，数字大小等同于字典序大小，<span class="hljs-built_in">string</span>可以使用&lt;来比较<br><span class="hljs-number">3.</span>要清楚需要记录什么信息<br></code></pre></td></tr></table></figure><h1 id="字符串1035"><a href="#字符串1035" class="headerlink" title="字符串1035"></a>字符串1035</h1><p>To prepare for PAT, the judge sometimes has to generate random passwords for the users. The problem is that there are always some confusing passwords since it is hard to distinguish <code>1</code> (one) from <code>l</code> (<code>L</code> in lowercase), or <code>0</code> (zero) from <code>O</code> (<code>o</code> in uppercase). One solution is to replace <code>1</code> (one) by <code>@</code>, <code>0</code> (zero) by <code>%</code>, <code>l</code> by <code>L</code>, and <code>O</code> by <code>o</code>. Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p><h3 id="Input-Specification-3"><a href="#Input-Specification-3" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em> (≤1000), followed by <em>N</em> lines of accounts. Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p><h3 id="Output-Specification-3"><a href="#Output-Specification-3" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print the number <em>M</em> of accounts that have been modified, then print in the following <em>M</em> lines the modified accounts info, that is, the user names and the corresponding modified passwords. The accounts must be printed in the same order as they are read in. If no account is modified, print in one line <code>There are N accounts and no account is modified</code> where <code>N</code> is the total number of accounts. However, if <code>N</code> is one, you must print <code>There is 1 account and no account is modified</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs in">3<br>Team000002 Rlsp0dfa<br>Team000003 perfectpwd<br>Team000001 R1spOdfa<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">2<br>Team000002 RLsp%dfa<br>Team000001 R@spodfa<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">1<br>team110 abcdefg332<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">There is 1 account and no account is modified<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">2<br>team110 abcdefg222<br>team220 abcdefg333<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">There are 2 accounts and no account is modified<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> countt=<span class="hljs-number">0</span>;<br>    string name,pass;<br>    string N[<span class="hljs-number">1001</span>];<br>    string Pass[<span class="hljs-number">1001</span>];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;name&gt;&gt;pass;<br>        <span class="hljs-type">int</span> tag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;pass.<span class="hljs-built_in">size</span>();j++)&#123;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;1&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;@&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;%&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;l&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;L&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;O&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;o&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>        &#125; <br>        <span class="hljs-keyword">if</span>(tag==<span class="hljs-number">1</span>)&#123;<br>countt++;<br>        N[countt] = name;<br>        Pass[countt] = pass;<br>&#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">if</span>(countt==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>            cout&lt;&lt;<span class="hljs-string">&quot;There is 1 account and no account is modified&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout&lt;&lt;<span class="hljs-string">&quot;There are &quot;</span>+<span class="hljs-built_in">to_string</span>(n)+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;accounts and no account is modified&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    cout&lt;&lt;countt&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=countt;i++)<br>        cout&lt;&lt;N[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;Pass[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.处理字符串问题时要格外注意换行<br>2.判断条件要细心，记的加括号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lxd常用脚本记录</title>
    <link href="/2023/02/28/lxc/"/>
    <url>/2023/02/28/lxc/</url>
    
    <content type="html"><![CDATA[<h1 id="lxc"><a href="#lxc" class="headerlink" title="lxc"></a>lxc</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看已有的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo lxc list<br></code></pre></td></tr></table></figure><p>删除快照（保证容器在运行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lxc delete name<br></code></pre></td></tr></table></figure><p>自动化镜像bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>passwd=&#x27;1234&#x27;<br><br>read -p &quot;Enter your full name as the container name, such as zhangsan: &quot; name<br><br>echo &quot;Create the container $name...&quot;<br>echo $passwd | sudo -S lxc copy temp $name<br><br>echo &quot;Start the container $name...&quot;<br>echo $passwd | sudo -S lxc start $name<br><br>sudo -S lxc exec $name -- /bin/bash<br><br></code></pre></td></tr></table></figure><p>自动配置lxc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupmod -n $last_name temp<br><br>echo &quot;Change IP to $IP&quot;<br>mv /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak<br>echo &quot;network:<br>  version: 2<br>  ethernets:<br>    eth0:<br>      dhcp4: no<br>      dhcp6: no<br>      addresses:<br>        - $IP/24<br>      gateway4: 125.221.232.1<br>      nameservers:<br>        addresses:<br>          - 255.255.255.0<br>          - 218.75.247.245&quot; &gt; /etc/netplan/50-cloud-init.yaml<br><br>netplan --debug apply<br><br>echo &quot;$last_name:$password&quot; | sudo chpasswd<br><br>reboot<br></code></pre></td></tr></table></figure><p>ref：<a href="https://xungejiang.com/2022/07/14/lxd-new/">https://xungejiang.com/2022/07/14/lxd-new/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字三角形</title>
    <link href="/2022/09/21/20220921/"/>
    <url>/2022/09/21/20220921/</url>
    
    <content type="html"><![CDATA[<h2 id="USACO1-5-IOI1994-数字三角形-Number-Triangles"><a href="#USACO1-5-IOI1994-数字三角形-Number-Triangles" class="headerlink" title="[USACO1.5][IOI1994]数字三角形 Number Triangles"></a>[USACO1.5][IOI1994]数字三角形 Number Triangles</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>观察下面的数字金字塔。</p><p>写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">        <span class="hljs-number">7</span> <br>      <span class="hljs-number">3</span>   <span class="hljs-number">8</span> <br>    <span class="hljs-number">8</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <br>  <span class="hljs-number">2</span>   <span class="hljs-number">7</span>   <span class="hljs-number">4</span>   <span class="hljs-number">4</span> <br><span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">2</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><p>在上面的样例中,从 $7 \to 3 \to 8 \to 7 \to 5$ 的路径产生了最大</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一个行一个正整数 $r$ ,表示行的数目。</p><p>后面每行为这个数字金字塔特定行包含的整数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>单独的一行,包含那个可能得到的最大的和。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">30<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】<br>对于 $100%$ 的数据，$1\le r \le 1000$，所有输入在 $[0,100]$ 范围内。</p><p>题目翻译来自NOCOW。</p><p>USACO Training Section 1.5</p><p>IOI1994 Day1T1</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>毫无疑问的，一道典型的线性DP问题。也可以看到这是IOI1994年的第一题，~~~就拿过去两年的IOI什么成分不用我说了吧~~~ </p><h3 id="状态设定"><a href="#状态设定" class="headerlink" title="状态设定"></a>状态设定</h3><p>问题需要求解自上而下的最大路径和，我们令状态$\ f[i,j]\ $代表</p><p>（1）以第$i$行第$j$个数为结尾。</p><p>（2）包括这个位置在内的合法位置的最大的路径和。</p><h3 id="状态的转移"><a href="#状态的转移" class="headerlink" title="状态的转移"></a>状态的转移</h3><p>最优路径实际上是一个树，我们考虑从后向前推。</p><p>所有的求解路径构成一个满二叉树，~~~不会真的有人枚举吧~~我们考虑倒数第二层的某个节点（状态），那么为了最大化最终的答案，这个节点应该选取他左下或者右下较大的一个数作为路径，枚举这一层的节点，可以获取最后一层的最优答案。所以得出如下转移方程。</p><p>$f[i,j] &#x3D;\max (f[i+1,j],f[i+1,j+1])+A[i,j]\a&#x3D;？$</p><h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><p><del>明显全部为零</del></p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;bits/stdc++.h&gt;</span><br>using namespace std;<br><span class="hljs-built_in">int</span> A[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">int</span> n;<br><span class="hljs-built_in">int</span> F[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">int</span> main()&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>cin&gt;&gt;A[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>F[i][j] = <span class="hljs-built_in">max</span>(F[i+<span class="hljs-number">1</span>][j],F[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>])+A[i][j];<br>&#125;<br>&#125;<br>cout&lt;&lt;F[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><h3 id="忘记的部分"><a href="#忘记的部分" class="headerlink" title="忘记的部分"></a>忘记的部分</h3><p><del>我当时为什么会想到倒着枚举呢</del></p><p><del>是因为写了太多难题导致这么裸的题我考虑的太复杂了吗，状态i明显只有两种转移态，果然是抽象的题写的太多了吗。。。是啊，从开始学动态规划到AK紫题好像只过了10天诶，肯定不是我当时没理解瞎jb写没错</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>线性DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo配置记录</title>
    <link href="/2022/09/21/hello-world/"/>
    <url>/2022/09/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>最终对于公式无法正常换行的问题还是没有解决</p><h2 id="brew的安装"><a href="#brew的安装" class="headerlink" title="brew的安装"></a>brew的安装</h2><h3 id="使用脚本安装brew，期间会自动安装git"><a href="#使用脚本安装brew，期间会自动安装git" class="headerlink" title="使用脚本安装brew，期间会自动安装git"></a>使用脚本安装brew，期间会自动安装git</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><h3 id="brew初始化-添加不受信任的路径"><a href="#brew初始化-添加不受信任的路径" class="headerlink" title="brew初始化 添加不受信任的路径"></a>brew初始化 添加不受信任的路径</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">brew -v</span><br></code></pre></td></tr></table></figure><h3 id="git-的初始化"><a href="#git-的初始化" class="headerlink" title="git 的初始化"></a>git 的初始化</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Zs&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;1990977934@qq.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="git命令一条龙"><a href="#git命令一条龙" class="headerlink" title="git命令一条龙"></a>git命令一条龙</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br>git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;conclusion&quot;</span><br></code></pre></td></tr></table></figure><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br>hexo clean<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识cuda</title>
    <link href="/2022/09/21/%E5%88%9D%E5%85%A5cuda/"/>
    <url>/2022/09/21/%E5%88%9D%E5%85%A5cuda/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><del>一堆吊事文档都没时间看，埋了埋了，下次继续</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>cuda</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
