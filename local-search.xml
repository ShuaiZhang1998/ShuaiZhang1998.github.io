<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>灌水思路</title>
    <link href="/2023/03/13/idea/"/>
    <url>/2023/03/13/idea/</url>
    
    <content type="html"><![CDATA[<p>$y &#x3D; ||UV-X||^*$</p><p>$s.t. X_\omega&#x3D;A_\omega$</p><p>使用两个低秩矩阵UV逼近满足使得满足约束条件具备最低秩的X矩阵</p><p>其实有两个算法</p><p>(1)</p><p>$min_x\ ||X||^*$</p><p>$s.t. X_\omega&#x3D;A_\omega$</p><p>(2)</p><p>$min_{u,v}||A-U^TV||_F$</p><p>为什么当时说不好</p><p>（1）单独的两个都凸，放一起非凸</p><p>（2）算法(1)的精度比（2）高不少，放在一起有点以次充好的感觉</p><p>上边的讨论没有考虑实际的测序数据存在的一些问题，因此在多种评估指标以及多种数据的背景下，我的实验中，（1）（2）谁好有一定的规律，（1）值准确，（2）聚类效果好。</p><p>两种算法都为经典的矩阵补全算法，某些约束都收敛到最优解$X_*$。然而我直观的感受来说，在数据未知的情况下，似乎有个挺均衡的的解介于两个算法的解之间。</p><p>$y &#x3D; ||X||_*+||U^TV-A||_F$</p><p>$s.t. X_{\Omega}&#x3D;A_{\Omega}$</p><p>这个问题形式也没啥用，各自求各自的，目标是希望两个解产生一定交互。然而我不太可能严谨的提出某种度量距离满足我直观的感觉。所以我给出如下的感觉式子</p><p>$y &#x3D; \alpha_1||X||_*+\alpha_2||U^TV-A||_F+dis(X,U^TV)$</p><p>测试下图片</p><p><img src="/../img/DALL.png" alt="DALL"></p>]]></content>
    
    
    
    <tags>
      
      <tag>灌水</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT记录</title>
    <link href="/2023/03/01/PAT/"/>
    <url>/2023/03/01/PAT/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串1001"><a href="#字符串1001" class="headerlink" title="字符串1001"></a>字符串1001</h1><p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format – that is, the digits must be separated  into groups of three by commas  unless there are less than four digits).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a pair of integers <em>a</em> and <em>b</em> where $10^{-6}&lt;&#x3D;a,b&lt;&#x3D;10^{6}$ . The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you should output the sum of <em>a</em> and <em>b</em> in one line. The sum must be written in the standard format.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">-1000000 9<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">-999,991<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a,b,c;<br>cin&gt;&gt;a&gt;&gt;b;<br>c = a+b;<br>string num = <span class="hljs-built_in">to_string</span>(c);<br>string res;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=num.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,j=<span class="hljs-number">0</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-comment">//num是倒着枚举的，而结果方向与枚举方向相反，在一个空串上不断从左边添加</span><br><span class="hljs-comment">//       1 2 3 4【】 </span><br>res = num[i]+res;<br>++j;<br><span class="hljs-comment">//满足三个条件加逗号，已经有了三个数字，正数时不能是最后一位，负数时前一位不能为‘-’。</span><br><span class="hljs-keyword">if</span>(j%<span class="hljs-number">3</span>==<span class="hljs-number">0</span> &amp;&amp; i &amp;&amp; num[i<span class="hljs-number">-1</span>]!=<span class="hljs-string">&#x27;-&#x27;</span> )<br>res = <span class="hljs-string">&#x27;,&#x27;</span>+res;<br>&#125;<br>cout&lt;&lt;res;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1.</span>to_string() 将一个数字转化为字符串<br><span class="hljs-number">2.</span>字符串的拼接 ‘’+<span class="hljs-built_in">str</span> 向左不断拼接 <span class="hljs-built_in">str</span>+‘’ 向右不断拼接<br><span class="hljs-number">3.</span>正数范围一般比负数小 设计长度的判断可以先判断正数再判断负数<br></code></pre></td></tr></table></figure><h1 id="字符串1005"><a href="#字符串1005" class="headerlink" title="字符串1005"></a>字符串1005</h1><p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p><h3 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤10100).</p><h3 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">12345<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">one five<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>string n ;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:n)&#123;<br>s+=i-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>string str = <span class="hljs-built_in">to_string</span>(s);<br><span class="hljs-type">char</span> res[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>]=&#123;<span class="hljs-string">&quot;zero&quot;</span>,<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>,<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;five&quot;</span>,<span class="hljs-string">&quot;six&quot;</span>,<span class="hljs-string">&quot;seven&quot;</span>,<span class="hljs-string">&quot;eight&quot;</span>,<span class="hljs-string">&quot;nine&quot;</span>&#125;;<br>cout&lt;&lt;res[str[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i++)<br>cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;res[str[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span><span class="hljs-keyword">auto</span> 语法<br><span class="hljs-number">2.</span>处理多余空格时，先输出一个 <br><span class="hljs-number">3.</span>答案比较多时使用<span class="hljs-type">char</span>数组存放结果<br></code></pre></td></tr></table></figure><h1 id="字符串1006"><a href="#字符串1006" class="headerlink" title="字符串1006"></a>字符串1006</h1><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><h3 id="Input-Specification-2"><a href="#Input-Specification-2" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">ID<span class="hljs-number">_n</span>umber Sign<span class="hljs-number">_</span><span class="hljs-keyword">in</span><span class="hljs-number">_</span>time Sign<span class="hljs-number">_</span><span class="hljs-keyword">out</span><span class="hljs-number">_</span>time<br></code></pre></td></tr></table></figure><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><h3 id="Output-Specification-2"><a href="#Output-Specification-2" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs in">3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">SC3021234 CS301133<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    string id,<span class="hljs-type">in_t</span>,<span class="hljs-type">out_t</span>;<br>    string fast_id,fast_time;<br>    string last_id,last_time;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;id&gt;&gt;<span class="hljs-type">in_t</span>&gt;&gt;<span class="hljs-type">out_t</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||<span class="hljs-type">in_t</span>&lt;fast_time)&#123;<br>            fast_id = id;<br>            fast_time = <span class="hljs-type">in_t</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||<span class="hljs-type">out_t</span>&gt;last_time)&#123;<br>            last_id = id;<br>            last_time = <span class="hljs-type">out_t</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;fast_id&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;last_id&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>边读边处理<br><span class="hljs-number">2.</span>当位数相同时，数字大小等同于字典序大小，<span class="hljs-built_in">string</span>可以使用&lt;来比较<br><span class="hljs-number">3.</span>要清楚需要记录什么信息<br></code></pre></td></tr></table></figure><h1 id="字符串1035"><a href="#字符串1035" class="headerlink" title="字符串1035"></a>字符串1035</h1><p>To prepare for PAT, the judge sometimes has to generate random passwords for the users. The problem is that there are always some confusing passwords since it is hard to distinguish <code>1</code> (one) from <code>l</code> (<code>L</code> in lowercase), or <code>0</code> (zero) from <code>O</code> (<code>o</code> in uppercase). One solution is to replace <code>1</code> (one) by <code>@</code>, <code>0</code> (zero) by <code>%</code>, <code>l</code> by <code>L</code>, and <code>O</code> by <code>o</code>. Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p><h3 id="Input-Specification-3"><a href="#Input-Specification-3" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em> (≤1000), followed by <em>N</em> lines of accounts. Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p><h3 id="Output-Specification-3"><a href="#Output-Specification-3" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print the number <em>M</em> of accounts that have been modified, then print in the following <em>M</em> lines the modified accounts info, that is, the user names and the corresponding modified passwords. The accounts must be printed in the same order as they are read in. If no account is modified, print in one line <code>There are N accounts and no account is modified</code> where <code>N</code> is the total number of accounts. However, if <code>N</code> is one, you must print <code>There is 1 account and no account is modified</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs in">3<br>Team000002 Rlsp0dfa<br>Team000003 perfectpwd<br>Team000001 R1spOdfa<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">2<br>Team000002 RLsp%dfa<br>Team000001 R@spodfa<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">1<br>team110 abcdefg332<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">There is 1 account and no account is modified<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">2<br>team110 abcdefg222<br>team220 abcdefg333<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">There are 2 accounts and no account is modified<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> countt=<span class="hljs-number">0</span>;<br>    string name,pass;<br>    string N[<span class="hljs-number">1001</span>];<br>    string Pass[<span class="hljs-number">1001</span>];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;name&gt;&gt;pass;<br>        <span class="hljs-type">int</span> tag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;pass.<span class="hljs-built_in">size</span>();j++)&#123;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;1&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;@&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;%&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;l&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;L&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;O&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;o&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>        &#125; <br>        <span class="hljs-keyword">if</span>(tag==<span class="hljs-number">1</span>)&#123;<br>countt++;<br>        N[countt] = name;<br>        Pass[countt] = pass;<br>&#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">if</span>(countt==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>            cout&lt;&lt;<span class="hljs-string">&quot;There is 1 account and no account is modified&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout&lt;&lt;<span class="hljs-string">&quot;There are &quot;</span>+<span class="hljs-built_in">to_string</span>(n)+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;accounts and no account is modified&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    cout&lt;&lt;countt&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=countt;i++)<br>        cout&lt;&lt;N[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;Pass[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.处理字符串问题时要格外注意换行<br>2.判断条件要细心，记的加括号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lxd常用脚本记录</title>
    <link href="/2023/02/28/lxc/"/>
    <url>/2023/02/28/lxc/</url>
    
    <content type="html"><![CDATA[<h1 id="lxc"><a href="#lxc" class="headerlink" title="lxc"></a>lxc</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看已有的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo lxc list<br></code></pre></td></tr></table></figure><p>删除快照（保证容器在运行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lxc delete name<br></code></pre></td></tr></table></figure><p>自动化镜像bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>passwd=&#x27;1234&#x27;<br><br>read -p &quot;Enter your full name as the container name, such as zhangsan: &quot; name<br><br>echo &quot;Create the container $name...&quot;<br>echo $passwd | sudo -S lxc copy temp $name<br><br>echo &quot;Start the container $name...&quot;<br>echo $passwd | sudo -S lxc start $name<br><br>sudo -S lxc exec $name -- /bin/bash<br><br></code></pre></td></tr></table></figure><p>自动配置lxc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupmod -n $last_name temp<br><br>echo &quot;Change IP to $IP&quot;<br>mv /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak<br>echo &quot;network:<br>  version: 2<br>  ethernets:<br>    eth0:<br>      dhcp4: no<br>      dhcp6: no<br>      addresses:<br>        - $IP/24<br>      gateway4: 125.221.232.1<br>      nameservers:<br>        addresses:<br>          - 255.255.255.0<br>          - 218.75.247.245&quot; &gt; /etc/netplan/50-cloud-init.yaml<br><br>netplan --debug apply<br><br>echo &quot;$last_name:$password&quot; | sudo chpasswd<br><br>reboot<br></code></pre></td></tr></table></figure><p>ref：<a href="https://xungejiang.com/2022/07/14/lxd-new/">https://xungejiang.com/2022/07/14/lxd-new/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字三角形</title>
    <link href="/2022/09/21/20220921/"/>
    <url>/2022/09/21/20220921/</url>
    
    <content type="html"><![CDATA[<h2 id="USACO1-5-IOI1994-数字三角形-Number-Triangles"><a href="#USACO1-5-IOI1994-数字三角形-Number-Triangles" class="headerlink" title="[USACO1.5][IOI1994]数字三角形 Number Triangles"></a>[USACO1.5][IOI1994]数字三角形 Number Triangles</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>观察下面的数字金字塔。</p><p>写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">        <span class="hljs-number">7</span> <br>      <span class="hljs-number">3</span>   <span class="hljs-number">8</span> <br>    <span class="hljs-number">8</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <br>  <span class="hljs-number">2</span>   <span class="hljs-number">7</span>   <span class="hljs-number">4</span>   <span class="hljs-number">4</span> <br><span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">2</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><p>在上面的样例中,从 $7 \to 3 \to 8 \to 7 \to 5$ 的路径产生了最大</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一个行一个正整数 $r$ ,表示行的数目。</p><p>后面每行为这个数字金字塔特定行包含的整数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>单独的一行,包含那个可能得到的最大的和。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">30<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】<br>对于 $100%$ 的数据，$1\le r \le 1000$，所有输入在 $[0,100]$ 范围内。</p><p>题目翻译来自NOCOW。</p><p>USACO Training Section 1.5</p><p>IOI1994 Day1T1</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>毫无疑问的，一道典型的线性DP问题。也可以看到这是IOI1994年的第一题，~~~就拿过去两年的IOI什么成分不用我说了吧~~~ </p><h3 id="状态设定"><a href="#状态设定" class="headerlink" title="状态设定"></a>状态设定</h3><p>问题需要求解自上而下的最大路径和，我们令状态$\ f[i,j]\ $代表</p><p>（1）以第$i$行第$j$个数为结尾。</p><p>（2）包括这个位置在内的合法位置的最大的路径和。</p><h3 id="状态的转移"><a href="#状态的转移" class="headerlink" title="状态的转移"></a>状态的转移</h3><p>最优路径实际上是一个树，我们考虑从后向前推。</p><p>所有的求解路径构成一个满二叉树，~~~不会真的有人枚举吧~~我们考虑倒数第二层的某个节点（状态），那么为了最大化最终的答案，这个节点应该选取他左下或者右下较大的一个数作为路径，枚举这一层的节点，可以获取最后一层的最优答案。所以得出如下转移方程。</p><p>$f[i,j] &#x3D;\max (f[i+1,j],f[i+1,j+1])+A[i,j]\a&#x3D;？$</p><h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><p><del>明显全部为零</del></p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;bits/stdc++.h&gt;</span><br>using namespace std;<br><span class="hljs-built_in">int</span> A[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">int</span> n;<br><span class="hljs-built_in">int</span> F[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">int</span> main()&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>cin&gt;&gt;A[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>F[i][j] = <span class="hljs-built_in">max</span>(F[i+<span class="hljs-number">1</span>][j],F[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>])+A[i][j];<br>&#125;<br>&#125;<br>cout&lt;&lt;F[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><h3 id="忘记的部分"><a href="#忘记的部分" class="headerlink" title="忘记的部分"></a>忘记的部分</h3><p><del>我当时为什么会想到倒着枚举呢</del></p><p><del>是因为写了太多难题导致这么裸的题我考虑的太复杂了吗，状态i明显只有两种转移态，果然是抽象的题写的太多了吗。。。是啊，从开始学动态规划到AK紫题好像只过了10天诶，肯定不是我当时没理解瞎jb写没错</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>线性DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo配置记录</title>
    <link href="/2022/09/21/hello-world/"/>
    <url>/2022/09/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>最终对于公式无法正常换行的问题还是没有解决</p><h2 id="brew的安装"><a href="#brew的安装" class="headerlink" title="brew的安装"></a>brew的安装</h2><h3 id="使用脚本安装brew，期间会自动安装git"><a href="#使用脚本安装brew，期间会自动安装git" class="headerlink" title="使用脚本安装brew，期间会自动安装git"></a>使用脚本安装brew，期间会自动安装git</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><h3 id="brew初始化-添加不受信任的路径"><a href="#brew初始化-添加不受信任的路径" class="headerlink" title="brew初始化 添加不受信任的路径"></a>brew初始化 添加不受信任的路径</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">brew -v</span><br></code></pre></td></tr></table></figure><h3 id="git-的初始化"><a href="#git-的初始化" class="headerlink" title="git 的初始化"></a>git 的初始化</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Zs&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;1990977934@qq.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="git命令一条龙"><a href="#git命令一条龙" class="headerlink" title="git命令一条龙"></a>git命令一条龙</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br>git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;conclusion&quot;</span><br></code></pre></td></tr></table></figure><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br>hexo clean<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
