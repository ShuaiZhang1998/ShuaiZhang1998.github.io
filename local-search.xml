<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>huggingface之transformers</title>
    <link href="/2023/05/30/huggingface%E4%B9%8Btransformers/"/>
    <url>/2023/05/30/huggingface%E4%B9%8Btransformers/</url>
    
    <content type="html"><![CDATA[<h1 id="transformers库">Transformers库</h1><p><strong>前言</strong>：</p><p>Hugging Face是一个人工智能与自然语言处理技术公司，成立于2016年，总部位于美国纽约。该公司已经成为业内知名的开源机器学习工具和数据集库的提供者之一，提供了很多用于自然语言处理（NLP）的工具和模型，例如BERT、GPT 等，这些工具都是基于 PyTorch框架实现的。<del>Tensorflow亡了</del></p><p><strong>doc</strong>：https://huggingface.co/docs/transformers/installation</p><h1 id="安装conda">安装conda</h1><p>没什么特别的，下载完后直接bash就好，安装完成后需要运行一下condainit，版本是conda 4.10.3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./conda init <br></code></pre></td></tr></table></figure><p>主要有个挺搞笑的，yes完后，直接没配置，所以就有了上边一步</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">installation finished.<br>Do you wish the installer <span class="hljs-keyword">to</span> initialize Anaconda3<br><span class="hljs-keyword">by</span> running conda init? [<span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span>]<br>[<span class="hljs-literal">no</span>] &gt;&gt;&gt; <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><h1 id="安装transformers">安装transformers</h1><p>首先搞个虚拟环境吧，python3.8吧，3.6感觉太低了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n transformer python=3.8<br><span class="hljs-comment"># 别忘了激活...</span><br>conda activate transformer<br></code></pre></td></tr></table></figure><p>然后直接pip安装就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install transformers<br></code></pre></td></tr></table></figure><p>然后torch装一下就好(tensorflowGPU支持太恶心了，再见)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> install pytorch==<span class="hljs-number">1</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> torchvision==<span class="hljs-number">0</span>.<span class="hljs-number">14</span>.<span class="hljs-number">1</span> torchaudio==<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> pytorch-cuda=<span class="hljs-number">11</span>.<span class="hljs-number">7</span> -c pytorch -c nvidia<br></code></pre></td></tr></table></figure><h1 id="pipeline">pipeline()</h1><p>用一种非常简单的方式来使用预训练模型</p><p>NLP相关的任务：<strong>文本分类</strong>，<strong>文本生成</strong>...</p><p>图像相关的任务：<strong>分类</strong>，<strong>分割</strong>...</p><p>音频类任务:<strong>文本识别</strong></p><p>多模态：<strong>看图输出文字</strong></p><p>完整的模型库在这里：https://huggingface.co/models</p><table><thead><tr class="header"><th><strong>Task</strong></th><th><strong>Description</strong></th><th><strong>Modality</strong></th><th><strong>Pipeline identifier</strong></th></tr></thead><tbody><tr class="odd"><td>Text classification</td><td>assign a label to a given sequence of text</td><td>NLP</td><td>pipeline(task=“sentiment-analysis”)</td></tr><tr class="even"><td>Text generation</td><td>generate text given a prompt</td><td>NLP</td><td>pipeline(task=“text-generation”)</td></tr><tr class="odd"><td>Summarization</td><td>generate a summary of a sequence of text or document</td><td>NLP</td><td>pipeline(task=“summarization”)</td></tr><tr class="even"><td>Image classification</td><td>assign a label to an image</td><td>Computer vision</td><td>pipeline(task=“image-classification”)</td></tr><tr class="odd"><td>Image segmentation</td><td>assign a label to each individual pixel of an image (supportssemantic, panoptic, and instance segmentation)</td><td>Computer vision</td><td>pipeline(task=“image-segmentation”)</td></tr><tr class="even"><td>Object detection</td><td>predict the bounding boxes and classes of objects in an image</td><td>Computer vision</td><td>pipeline(task=“object-detection”)</td></tr><tr class="odd"><td>Audio classification</td><td>assign a label to some audio data</td><td>Audio</td><td>pipeline(task=“audio-classification”)</td></tr><tr class="even"><td>Automatic speech recognition</td><td>transcribe speech into text</td><td>Audio</td><td>pipeline(task=“automatic-speech-recognition”)</td></tr><tr class="odd"><td>Visual question answering</td><td>answer a question about the image, given an image and aquestion</td><td>Multimodal</td><td>pipeline(task=“vqa”)</td></tr><tr class="even"><td>Document question answering</td><td>answer a question about a document, given an image and aquestion</td><td>Multimodal</td><td>pipeline(task=“document-question-answering”)</td></tr><tr class="odd"><td>Image captioning</td><td>generate a caption for a given image</td><td>Multimodal</td><td>pipeline(task=“image-to-text”)</td></tr></tbody></table><p>以下是一个简单的文本分类demo,<del>连续进行反转</del>,可以看到它似乎真的可以了解一些语境。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 运行之前需要安装一个库</span><br>!pip install chardet <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;We are very happy to show you the 🤗 Transformers library.&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9997795224189758</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9966359734535217</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck,it it beautiful!&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9991146922111511</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck,it is sucked!&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9997245669364929</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;what the fuck,it is sucked,but i loved it!&quot;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9997512698173523</span>&#125;]<br></code></pre></td></tr></table></figure><h1 id="fine-tune">Fine-tune</h1><p>有三种方法对sota模型进行微调<del>（他们还是很推荐自家的轮子的）</del></p><ul><li>Fine-tune a pretrained model with 🤗 Transformers <ahref="https://huggingface.co/docs/transformers/v4.29.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>.</li><li>Fine-tune a pretrained model in TensorFlow with Keras.</li><li>Fine-tune a pretrained model in native PyTorch</li></ul><p>那么微调之前肯定是需要做数据预处理的了</p><h2 id="data-process">Data Process</h2><p>首先安一个加载数据的库，这玩意应该就类似tf.datasets之类的吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install datasets<br></code></pre></td></tr></table></figure><h3 id="tokenizer">Tokenizer</h3><p>用于处理文本的一个对象，内置了许多东西。最基础的功能就是把tokens转化为数值，然后再转化为tensor。</p><p><ahref="https://huggingface.co/docs/transformers/main_classes/tokenizer">tokenizer</a>最主要的作用就是可以吧文本<strong>对应</strong>转化为模型的输入，Transformer基础架构接受的数据是向量组，也就是矩阵，<spanclass="math inline">\(attention = \frac{K^TQ}{\sqrtk}V\)</span>，其中的<spanclass="math inline">\(K,Q,V\)</span>都是把输入做了线性变换得到的。这里涉及到一个<strong>词嵌入</strong>的问题。</p><p><strong>词嵌入：字符串很明显是没有矩阵乘法这种东西的，词嵌入就是把NLP领域最细分数据单位词量化为数值类型的方法，通常来说是一个数值向量，现在一些的成熟方案解决了许多问题，例如高维，词之间相似关系，还需要把词嵌入转换为原本的tokens等。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 能够将词转化为bert标准的tokenizer</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)<br><span class="hljs-comment"># 多句话的话，传入一个list</span><br>encoded_input = tokenizer(<span class="hljs-string">&quot;Do not meddle in the affairs of wizards, for they are subtle and quick to anger.&quot;</span>)<br><span class="hljs-built_in">print</span>(encoded_input)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input_ids 每个词的字典序</span><br><span class="hljs-comment"># token_type_ids 区分一个 batch 中的两个序列，例如同时输入了问题和回答的序列</span><br><span class="hljs-comment"># attention_mask 处理数据集时需要对句子进行填充，1代表是非填充部分</span><br>&#123;<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">2079</span>, <span class="hljs-number">2025</span>, <span class="hljs-number">19960</span>, <span class="hljs-number">10362</span>, <span class="hljs-number">1999</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">3821</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">16657</span>, <span class="hljs-number">1010</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2027</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">11259</span>, <span class="hljs-number">1998</span>, <span class="hljs-number">4248</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">4963</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>], <br> <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <br> <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据索引还原为原本的句子，可以看到tokenizer添加了两个特殊字符</span><br><span class="hljs-comment"># [CLS] 分词器 [SEP] 分割符</span><br>tokenizer.decode(encoded_input[<span class="hljs-string">&quot;input_ids&quot;</span>])<br>&gt;&gt;&gt;<span class="hljs-string">&#x27;[CLS] Do not meddle in the affairs of wizards, for they are subtle and quick to anger. [SEP]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对句子进行padding,按照最长长度进行填充</span><br>batch_sentences = [<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,<br><span class="hljs-meta">... </span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对句子进行切割，使得适应模型可以容纳的最大长度</span><br>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># padding和turncation更为详细的用法</span><br></code></pre></td></tr></table></figure><p><ahref="https://huggingface.co/docs/transformers/pad_truncation">Paddingand truncation</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最终版本，转换为Pytorch 的 tensor</span><br>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br><span class="hljs-comment"># 转换为tensorflow 的 tensor</span><br>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="fine-tune-toy">Fine-tune toy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 载入数据集</span><br><span class="hljs-comment"># pip install cchardet</span><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>dataset = load_dataset(<span class="hljs-string">&quot;yelp_review_full&quot;</span>)<br><span class="hljs-comment"># 2.使用AutoTokenizer 对数据进行处理</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_function</span>(<span class="hljs-params">examples</span>):<br>  <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-string">&quot;max_length&quot;</span>, truncation=<span class="hljs-literal">True</span>)<br>tokenized_datasets = dataset.<span class="hljs-built_in">map</span>(tokenize_function, batched=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">## 划分一下数据集</span><br>small_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))<br>small_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;test&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))<br><span class="hljs-comment"># 3.引入分类模型</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification<br>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, num_labels=<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 4.设置超参数</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments<br>training_args = TrainingArguments(output_dir=<span class="hljs-string">&quot;test_trainer&quot;</span>,num_train_epochs=<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 5.定义评估过程</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> evaluate<br>metric = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)<br><span class="hljs-comment">## 把模型输出转化为真正的标签，transformers所有的模型返回的都是logits，未经归一化的实数向量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">eval_pred</span>):<br>    logits, labels = eval_pred<br>    predictions = np.argmax(logits, axis=-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> metric.compute(predictions=predictions, references=labels)<br><span class="hljs-comment"># 6.引入trainer并训练，transformers库提供的训练类，不需要自己编写实例循环</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer<br>trainer = Trainer(<br>    model=model,<br>    args=training_args,<br>    train_dataset=small_train_dataset,<br>    eval_dataset=small_eval_dataset,<br>    compute_metrics=compute_metrics,<br>)<br>trainer.train()<br></code></pre></td></tr></table></figure><p>至此为止我们简单的了解了基于Transformers库进行fine-tune的过程。工具为我们提供了很多的便利的同时，实际上也封装了很多细节，例如Tokenizer其实为我们做了许多的事情，从分词，到映射的保留，到使用何种方法进行词嵌入等。实际上我也很迷惘，作为一个算法工程师，我们要巨细无遗的了解这些吗？那么作为一个后端工程师，我们是否又真的有必要去了解到Java中的Map什么时候触发红黑树这类问题吗？希望未来的我能够好好的想清楚自己想要什么，以及好好的重述自己的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灌水思路</title>
    <link href="/2023/03/13/idea/"/>
    <url>/2023/03/13/idea/</url>
    
    <content type="html"><![CDATA[<p><span class="math inline">\(y = ||UV-X||^*\)</span></p><p><span class="math inline">\(s.t. X_\omega=A_\omega\)</span></p><p>使用两个低秩矩阵UV逼近满足使得满足约束条件具备最低秩的X矩阵</p><p>其实有两个算法</p><ol type="1"><li></li></ol><p><span class="math inline">\(min_x\ ||X||^*\)</span></p><p><span class="math inline">\(s.t. X_\omega=A_\omega\)</span></p><ol start="2" type="1"><li></li></ol><p><span class="math inline">\(min_{u,v}||A-U^TV||_F\)</span></p><p>为什么当时说不好</p><p>（1）单独的两个都凸，放一起非凸</p><p>（2）算法(1)的精度比（2）高不少，放在一起有点以次充好的感觉</p><p>上边的讨论没有考虑实际的测序数据存在的一些问题，因此在多种评估指标以及多种数据的背景下，我的实验中，（1）（2）谁好有一定的规律，（1）值准确，（2）聚类效果好。</p><p>两种算法都为经典的矩阵补全算法，某些约束都收敛到最优解<spanclass="math inline">\(X_*\)</span>。然而我直观的感受来说，在数据未知的情况下，似乎有个挺均衡的的解介于两个算法的解之间。</p><p><span class="math inline">\(y = ||X||_*+||U^TV-A||_F\)</span></p><p><span class="math inline">\(s.t. X_{\Omega}=A_{\Omega}\)</span></p><p>这个问题形式也没啥用，各自求各自的，目标是希望两个解产生一定交互。然而我不太可能严谨的提出某种度量距离满足我直观的感觉。所以我给出如下的感觉式子</p><p><span class="math inline">\(y =\alpha_1||X||_*+\alpha_2||U^TV-A||_F+dis(X,U^TV)\)</span></p><p>测试下图片</p><figure><img src="../img/DALL.png" alt="DALL" /><figcaption aria-hidden="true">DALL</figcaption></figure><p>真的鶸智啊...时好时坏的，以后抽时间搞个图床算了...</p><figure><imgsrc="https://s.yimg.com/os/creatr-uploaded-images/2022-12/0e33a550-85f9-11ed-bb6f-a3c383de69f0"alt="YAYA" /><figcaption aria-hidden="true">YAYA</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>灌水</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT记录</title>
    <link href="/2023/03/01/PAT/"/>
    <url>/2023/03/01/PAT/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串1001">字符串1001</h1><p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format-- that is, the digits must be separated into groups of three by commasunless there are less than four digits).</p><h3 id="input-specification">Input Specification:</h3><p>Each input file contains one test case. Each case contains a pair ofintegers <em>a</em> and <em>b</em> where <spanclass="math inline">\(10^{-6}&lt;=a,b&lt;=10^{6}\)</span> . The numbersare separated by a space.</p><h3 id="output-specification">Output Specification:</h3><p>For each test case, you should output the sum of <em>a</em> and<em>b</em> in one line. The sum must be written in the standardformat.</p><h3 id="sample-input">Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">-1000000 9<br></code></pre></td></tr></table></figure><h3 id="sample-output">Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">-999,991<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a,b,c;<br>cin&gt;&gt;a&gt;&gt;b;<br>c = a+b;<br>string num = <span class="hljs-built_in">to_string</span>(c);<br>string res;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=num.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,j=<span class="hljs-number">0</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-comment">//num是倒着枚举的，而结果方向与枚举方向相反，在一个空串上不断从左边添加</span><br><span class="hljs-comment">//       1 2 3 4【】 </span><br>res = num[i]+res;<br>++j;<br><span class="hljs-comment">//满足三个条件加逗号，已经有了三个数字，正数时不能是最后一位，负数时前一位不能为‘-’。</span><br><span class="hljs-keyword">if</span>(j%<span class="hljs-number">3</span>==<span class="hljs-number">0</span> &amp;&amp; i &amp;&amp; num[i<span class="hljs-number">-1</span>]!=<span class="hljs-string">&#x27;-&#x27;</span> )<br>res = <span class="hljs-string">&#x27;,&#x27;</span>+res;<br>&#125;<br>cout&lt;&lt;res;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1.</span>to_string() 将一个数字转化为字符串<br><span class="hljs-number">2.</span>字符串的拼接 ‘’+<span class="hljs-built_in">str</span> 向左不断拼接 <span class="hljs-built_in">str</span>+‘’ 向右不断拼接<br><span class="hljs-number">3.</span>正数范围一般比负数小 设计长度的判断可以先判断正数再判断负数<br></code></pre></td></tr></table></figure><h1 id="字符串1005">字符串1005</h1><p>Given a non-negative integer <em>N</em>, your task is to compute thesum of all the digits of <em>N</em>, and output every digit of the sumin English.</p><h3 id="input-specification-1">Input Specification:</h3><p>Each input file contains one test case. Each case occupies one linewhich contains an <em>N</em> (≤10100).</p><h3 id="output-specification-1">Output Specification:</h3><p>For each test case, output in one line the digits of the sum inEnglish words. There must be one space between two consecutive words,but no extra space at the end of a line.</p><h3 id="sample-input-1">Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">12345<br></code></pre></td></tr></table></figure><h3 id="sample-output-1">Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">one five<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>string n ;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:n)&#123;<br>s+=i-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>string str = <span class="hljs-built_in">to_string</span>(s);<br><span class="hljs-type">char</span> res[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>]=&#123;<span class="hljs-string">&quot;zero&quot;</span>,<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>,<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;five&quot;</span>,<span class="hljs-string">&quot;six&quot;</span>,<span class="hljs-string">&quot;seven&quot;</span>,<span class="hljs-string">&quot;eight&quot;</span>,<span class="hljs-string">&quot;nine&quot;</span>&#125;;<br>cout&lt;&lt;res[str[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i++)<br>cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;res[str[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span><span class="hljs-keyword">auto</span> 语法<br><span class="hljs-number">2.</span>处理多余空格时，先输出一个 <br><span class="hljs-number">3.</span>答案比较多时使用<span class="hljs-type">char</span>数组存放结果<br></code></pre></td></tr></table></figure><h1 id="字符串1006">字符串1006</h1><p>At the beginning of every day, the first person who signs in thecomputer room will unlock the door, and the last one who signs out willlock the door. Given the records of signing in's and out's, you aresupposed to find the ones who have unlocked and locked the door on thatday.</p><h3 id="input-specification-2">Input Specification:</h3><p>Each input file contains one test case. Each case contains therecords for one day. The case starts with a positive integer <em>M</em>,which is the total number of records, followed by <em>M</em> lines, eachin the format:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">ID<span class="hljs-number">_n</span>umber Sign<span class="hljs-number">_</span><span class="hljs-keyword">in</span><span class="hljs-number">_</span>time Sign<span class="hljs-number">_</span><span class="hljs-keyword">out</span><span class="hljs-number">_</span>time<br></code></pre></td></tr></table></figure><p>where times are given in the format <code>HH:MM:SS</code>, and<code>ID_number</code> is a string with no more than 15 characters.</p><h3 id="output-specification-2">Output Specification:</h3><p>For each test case, output in one line the ID numbers of the personswho have unlocked and locked the door on that day. The two ID numbersmust be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, thesign in time must be earlier than the sign out time for each person, andthere are no two persons sign in or out at the same moment.</p><h3 id="sample-input-2">Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs in">3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40<br></code></pre></td></tr></table></figure><h3 id="sample-output-2">Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">SC3021234 CS301133<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    string id,<span class="hljs-type">in_t</span>,<span class="hljs-type">out_t</span>;<br>    string fast_id,fast_time;<br>    string last_id,last_time;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;id&gt;&gt;<span class="hljs-type">in_t</span>&gt;&gt;<span class="hljs-type">out_t</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||<span class="hljs-type">in_t</span>&lt;fast_time)&#123;<br>            fast_id = id;<br>            fast_time = <span class="hljs-type">in_t</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||<span class="hljs-type">out_t</span>&gt;last_time)&#123;<br>            last_id = id;<br>            last_time = <span class="hljs-type">out_t</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;fast_id&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;last_id&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>边读边处理<br><span class="hljs-number">2.</span>当位数相同时，数字大小等同于字典序大小，<span class="hljs-built_in">string</span>可以使用&lt;来比较<br><span class="hljs-number">3.</span>要清楚需要记录什么信息<br></code></pre></td></tr></table></figure><h1 id="字符串1035">字符串1035</h1><p>To prepare for PAT, the judge sometimes has to generate randompasswords for the users. The problem is that there are always someconfusing passwords since it is hard to distinguish <code>1</code> (one)from <code>l</code> (<code>L</code> in lowercase), or <code>0</code>(zero) from <code>O</code> (<code>o</code> in uppercase). One solutionis to replace <code>1</code> (one) by <code>@</code>, <code>0</code>(zero) by <code>%</code>, <code>l</code> by <code>L</code>, and<code>O</code> by <code>o</code>. Now it is your job to write a programto check the accounts generated by the judge, and to help the jugemodify the confusing passwords.</p><h3 id="input-specification-3">Input Specification:</h3><p>Each input file contains one test case. Each case contains a positiveinteger <em>N</em> (≤1000), followed by <em>N</em> lines of accounts.Each account consists of a user name and a password, both are strings ofno more than 10 characters with no space.</p><h3 id="output-specification-3">Output Specification:</h3><p>For each test case, first print the number <em>M</em> of accountsthat have been modified, then print in the following <em>M</em> linesthe modified accounts info, that is, the user names and thecorresponding modified passwords. The accounts must be printed in thesame order as they are read in. If no account is modified, print in oneline <code>There are N accounts and no account is modified</code> where<code>N</code> is the total number of accounts. However, if<code>N</code> is one, you must print<code>There is 1 account and no account is modified</code> instead.</p><h3 id="sample-input-1-1">Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs in">3<br>Team000002 Rlsp0dfa<br>Team000003 perfectpwd<br>Team000001 R1spOdfa<br></code></pre></td></tr></table></figure><h3 id="sample-output-1-1">Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">2<br>Team000002 RLsp%dfa<br>Team000001 R@spodfa<br></code></pre></td></tr></table></figure><h3 id="sample-input-2-1">Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">1<br>team110 abcdefg332<br></code></pre></td></tr></table></figure><h3 id="sample-output-2-1">Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">There is 1 account and no account is modified<br></code></pre></td></tr></table></figure><h3 id="sample-input-3">Sample Input 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">2<br>team110 abcdefg222<br>team220 abcdefg333<br></code></pre></td></tr></table></figure><h3 id="sample-output-3">Sample Output 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">There are 2 accounts and no account is modified<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> countt=<span class="hljs-number">0</span>;<br>    string name,pass;<br>    string N[<span class="hljs-number">1001</span>];<br>    string Pass[<span class="hljs-number">1001</span>];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;name&gt;&gt;pass;<br>        <span class="hljs-type">int</span> tag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;pass.<span class="hljs-built_in">size</span>();j++)&#123;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;1&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;@&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;%&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;l&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;L&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pass[j]==<span class="hljs-string">&#x27;O&#x27;</span>)<br>                pass[j]=<span class="hljs-string">&#x27;o&#x27;</span>,tag=<span class="hljs-number">1</span>;<br>        &#125; <br>        <span class="hljs-keyword">if</span>(tag==<span class="hljs-number">1</span>)&#123;<br>countt++;<br>        N[countt] = name;<br>        Pass[countt] = pass;<br>&#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">if</span>(countt==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>            cout&lt;&lt;<span class="hljs-string">&quot;There is 1 account and no account is modified&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout&lt;&lt;<span class="hljs-string">&quot;There are &quot;</span>+<span class="hljs-built_in">to_string</span>(n)+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;accounts and no account is modified&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    cout&lt;&lt;countt&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=countt;i++)<br>        cout&lt;&lt;N[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;Pass[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.处理字符串问题时要格外注意换行<br>2.判断条件要细心，记的加括号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lxd常用脚本记录</title>
    <link href="/2023/02/28/lxc/"/>
    <url>/2023/02/28/lxc/</url>
    
    <content type="html"><![CDATA[<h1 id="lxc">lxc</h1><h2 id="常用命令">常用命令</h2><p>查看已有的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo lxc list<br></code></pre></td></tr></table></figure><p>删除快照（保证容器在运行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lxc delete name<br></code></pre></td></tr></table></figure><p>自动化镜像bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>passwd=&#x27;1234&#x27;<br><br>read -p &quot;Enter your full name as the container name, such as zhangsan: &quot; name<br><br>echo &quot;Create the container $name...&quot;<br>echo $passwd | sudo -S lxc copy temp $name<br><br>echo &quot;Start the container $name...&quot;<br>echo $passwd | sudo -S lxc start $name<br><br>sudo -S lxc exec $name -- /bin/bash<br><br></code></pre></td></tr></table></figure><p>自动配置lxc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupmod -n $last_name temp<br><br>echo &quot;Change IP to $IP&quot;<br>mv /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak<br>echo &quot;network:<br>  version: 2<br>  ethernets:<br>    eth0:<br>      dhcp4: no<br>      dhcp6: no<br>      addresses:<br>        - $IP/24<br>      gateway4: 125.221.232.1<br>      nameservers:<br>        addresses:<br>          - 255.255.255.0<br>          - 218.75.247.245&quot; &gt; /etc/netplan/50-cloud-init.yaml<br><br>netplan --debug apply<br><br>echo &quot;$last_name:$password&quot; | sudo chpasswd<br><br>reboot<br></code></pre></td></tr></table></figure><p>ref：https://xungejiang.com/2022/07/14/lxd-new/</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字三角形</title>
    <link href="/2022/09/21/20220921/"/>
    <url>/2022/09/21/20220921/</url>
    
    <content type="html"><![CDATA[<h2id="usaco1.5ioi1994数字三角形-number-triangles">[USACO1.5][IOI1994]数字三角形Number Triangles</h2><h2 id="题目描述">题目描述</h2><p>观察下面的数字金字塔。</p><p>写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">        <span class="hljs-number">7</span> <br>      <span class="hljs-number">3</span>   <span class="hljs-number">8</span> <br>    <span class="hljs-number">8</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <br>  <span class="hljs-number">2</span>   <span class="hljs-number">7</span>   <span class="hljs-number">4</span>   <span class="hljs-number">4</span> <br><span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">2</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><p>在上面的样例中,从 <span class="math inline">\(7 \to 3 \to 8 \to 7 \to5\)</span> 的路径产生了最大</p><h2 id="输入格式">输入格式</h2><p>第一个行一个正整数 <span class="math inline">\(r\)</span>,表示行的数目。</p><p>后面每行为这个数字金字塔特定行包含的整数。</p><h2 id="输出格式">输出格式</h2><p>单独的一行,包含那个可能得到的最大的和。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">30<br></code></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>【数据范围】<br />对于 <span class="math inline">\(100\%\)</span> 的数据，<spanclass="math inline">\(1\le r \le 1000\)</span>，所有输入在 <spanclass="math inline">\([0,100]\)</span> 范围内。</p><p>题目翻译来自NOCOW。</p><p>USACO Training Section 1.5</p><p>IOI1994 Day1T1</p><h2 id="问题分析">问题分析</h2><p>毫无疑问的，一道典型的线性DP问题。也可以看到这是IOI1994年的第一题，~<del>就拿过去两年的IOI什么成分不用我说了吧</del>~</p><h3 id="状态设定">状态设定</h3><p>问题需要求解自上而下的最大路径和，我们令状态<spanclass="math inline">\(\ f[i,j]\ \)</span>代表</p><p>（1）以第<span class="math inline">\(i\)</span>行第<spanclass="math inline">\(j\)</span>个数为结尾。</p><p>（2）包括这个位置在内的合法位置的最大的路径和。</p><h3 id="状态的转移">状态的转移</h3><p>最优路径实际上是一个树，我们考虑从后向前推。</p><p>所有的求解路径构成一个满二叉树，~<del>不会真的有人枚举吧</del>我们考虑倒数第二层的某个节点（状态），那么为了最大化最终的答案，这个节点应该选取他左下或者右下较大的一个数作为路径，枚举这一层的节点，可以获取最后一层的最优答案。所以得出如下转移方程。</p><p><span class="math inline">\(f[i,j] =\max(f[i+1,j],f[i+1,j+1])+A[i,j]\\a=？\)</span></p><h3 id="初始状态">初始状态</h3><p><del>明显全部为零</del></p><h3 id="code">CODE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;bits/stdc++.h&gt;</span><br>using namespace std;<br><span class="hljs-built_in">int</span> A[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">int</span> n;<br><span class="hljs-built_in">int</span> F[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">int</span> main()&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>cin&gt;&gt;A[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>F[i][j] = <span class="hljs-built_in">max</span>(F[i+<span class="hljs-number">1</span>][j],F[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>])+A[i][j];<br>&#125;<br>&#125;<br>cout&lt;&lt;F[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><h3 id="忘记的部分">忘记的部分</h3><p><del>我当时为什么会想到倒着枚举呢</del></p><p><del>是因为写了太多难题导致这么裸的题我考虑的太复杂了吗，状态i明显只有两种转移态，果然是抽象的题写的太多了吗。。。是啊，从开始学动态规划到AK紫题好像只过了10天诶，肯定不是我当时没理解瞎jb写没错</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>线性DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo配置记录</title>
    <link href="/2022/09/21/hello-world/"/>
    <url>/2022/09/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>最终对于公式无法正常换行的问题还是没有解决</p><h2 id="brew的安装">brew的安装</h2><h3id="使用脚本安装brew期间会自动安装git">使用脚本安装brew，期间会自动安装git</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><h3 id="brew初始化-添加不受信任的路径">brew初始化添加不受信任的路径</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">brew -v</span><br></code></pre></td></tr></table></figure><h3 id="git-的初始化">git 的初始化</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Zs&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;1990977934@qq.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="git命令一条龙">git命令一条龙</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br>git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;conclusion&quot;</span><br></code></pre></td></tr></table></figure><h3 id="hexo">hexo</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br>hexo clean<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
